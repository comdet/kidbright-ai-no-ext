!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(object,e){return Object.prototype.hasOwnProperty.call(object,e)},o.p="/_nuxt/",o(o.s=0)}([function(module,exports){importScripts("https://cdn.jsdelivr.net/npm/@tensorflow/tfjs");let processing=!1,sourceCode="",__model=null,__labels=[],__image=null,__data=null,__maxIndex=0,responseCallback=null,requestCommand=null;const requestData=async function(e,t){requestCommand=e;let o={command:"REQUEST",data:e};t&&(o=Object.assign(o,t)),postMessage(o);let n=new Promise((e=>responseCallback=e));return await n},loadingModel=async function(){let e=await requestData("MODEL");__model=await tf.loadLayersModel(tf.io.fromMemory(e.modelJson.modelTopology,e.modelJson.weightsManifest[0].weights,e.weight))},__classify=async function(img){let e=__model.layers[0].inputSpec[0].shape;const t=tf.tidy((()=>{const t=tf.add(tf.mul(tf.cast(img,"float32"),2/255),-1);let o=tf.image.resizeBilinear(t,[e[1],e[2]],!0);return tf.reshape(o,[-1,e[1],e[2],e[3]])}));return await __model.predict(t)},initModel=async function(){postMessage({command:"PRINT",msg:"Loading model\r\n"}),await loadingModel(),postMessage({command:"PRINT",msg:"Loading labels\r\n"}),postMessage({command:"PRINT",msg:"Label : "+__labels.join(",")+"\r\n"});let e=__model.layers[0].inputSpec[0].shape;postMessage({command:"PRINT",msg:"Model Input Shape : "+e.join(",")+"\r\n"}),postMessage({command:"PRINT",msg:"Preloading model\r\n"});const t=tf.zeros([1,e[1],e[2],e[3]],"int32"),o=await __model.predict(t);await o.data();o.dispose(),t.dispose(),postMessage({command:"PRINT",msg:"Preload model success\r\n"}),postMessage({command:"PRINT",msg:"Model loaded\r\n"})},classify=async function(){__image=await requestData("IMAGE");let e=await tf.browser.fromPixels(__image),t=await __classify(e);__data=t.dataSync(),__maxIndex=t.argMax(1).dataSync()[0]};onmessage=async e=>{"RUN"==e.data.command?(sourceCode=e.data.code,__labels=e.data.labels,processing||(processing=!0,process())):"RESPONSE"==e.data.command&&e.data.subcommand==requestCommand&&responseCallback(e.data.data)};const process=function(){try{eval(sourceCode)}catch(e){postMessage({command:"PRINT",msg:"ERROR !!! \r\n"+e.message})}}}]);