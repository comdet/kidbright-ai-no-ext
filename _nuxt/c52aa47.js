/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1027:function(t,e){t.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function r(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function o(t){return!0===(t&&t.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=o;var c={},d={};function l(t,e){var n,r,o;return e?(o=0<=(t>>>=0)&&t<256)&&(r=d[t])?r:(n=f(t,(0|t)<0?-1:0,!0),o&&(d[t]=n),n):(o=-128<=(t|=0)&&t<128)&&(r=c[t])?r:(n=f(t,t<0?-1:0,!1),o&&(c[t]=n),n)}function h(t,e){if(isNaN(t))return e?S:v;if(e){if(t<0)return S;if(t>=w)return _}else{if(t<=-x)return A;if(t+1>=x)return I}return t<0?h(-t,e).neg():f(t%j|0,t/j|0,e)}function f(t,e,n){return new r(t,e,n)}r.fromInt=l,r.fromNumber=h,r.fromBits=f;var m=Math.pow;function y(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return v;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var p;if((p=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===p)return y(t.substring(1),e,n).neg();for(var r=h(m(n,8)),o=v,i=0;i<t.length;i+=8){var c=Math.min(8,t.length-i),d=parseInt(t.substring(i,i+c),n);if(c<8){var l=h(m(n,c));o=o.mul(l).add(h(d))}else o=(o=o.mul(r)).add(h(d))}return o.unsigned=e,o}function O(t,e){return"number"==typeof t?h(t,e):"string"==typeof t?y(t,e):f(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}r.fromString=y,r.fromValue=O;var j=4294967296,w=j*j,x=w/2,N=l(1<<24),v=l(0);r.ZERO=v;var S=l(0,!0);r.UZERO=S;var T=l(1);r.ONE=T;var k=l(1,!0);r.UONE=k;var E=l(-1);r.NEG_ONE=E;var I=f(-1,2147483647,!1);r.MAX_VALUE=I;var _=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=_;var A=f(0,-2147483648,!1);r.MIN_VALUE=A;var $=r.prototype;$.toInt=function(){return this.unsigned?this.low>>>0:this.low},$.toNumber=function(){return this.unsigned?(this.high>>>0)*j+(this.low>>>0):this.high*j+(this.low>>>0)},$.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(A)){var e=h(t),div=this.div(e),n=div.mul(e).sub(this);return div.toString(t)+n.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var r=h(m(t,6),this.unsigned),o=this,c="";;){var d=o.div(r),l=(o.sub(d.mul(r)).toInt()>>>0).toString(t);if((o=d).isZero())return l+c;for(;l.length<6;)l="0"+l;c=""+l+c}},$.getHighBits=function(){return this.high},$.getHighBitsUnsigned=function(){return this.high>>>0},$.getLowBits=function(){return this.low},$.getLowBitsUnsigned=function(){return this.low>>>0},$.getNumBitsAbs=function(){if(this.isNegative())return this.eq(A)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},$.isZero=function(){return 0===this.high&&0===this.low},$.eqz=$.isZero,$.isNegative=function(){return!this.unsigned&&this.high<0},$.isPositive=function(){return this.unsigned||this.high>=0},$.isOdd=function(){return 1==(1&this.low)},$.isEven=function(){return 0==(1&this.low)},$.equals=function(t){return o(t)||(t=O(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},$.eq=$.equals,$.notEquals=function(t){return!this.eq(t)},$.neq=$.notEquals,$.ne=$.notEquals,$.lessThan=function(t){return this.comp(t)<0},$.lt=$.lessThan,$.lessThanOrEqual=function(t){return this.comp(t)<=0},$.lte=$.lessThanOrEqual,$.le=$.lessThanOrEqual,$.greaterThan=function(t){return this.comp(t)>0},$.gt=$.greaterThan,$.greaterThanOrEqual=function(t){return this.comp(t)>=0},$.gte=$.greaterThanOrEqual,$.ge=$.greaterThanOrEqual,$.compare=function(t){if(o(t)||(t=O(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},$.comp=$.compare,$.negate=function(){return!this.unsigned&&this.eq(A)?A:this.not().add(T)},$.neg=$.negate,$.add=function(t){o(t)||(t=O(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,c=65535&this.low,d=t.high>>>16,l=65535&t.high,h=t.low>>>16,m=0,y=0,j=0,w=0;return j+=(w+=c+(65535&t.low))>>>16,y+=(j+=r+h)>>>16,m+=(y+=n+l)>>>16,m+=e+d,f((j&=65535)<<16|(w&=65535),(m&=65535)<<16|(y&=65535),this.unsigned)},$.subtract=function(t){return o(t)||(t=O(t)),this.add(t.neg())},$.sub=$.subtract,$.multiply=function(t){if(this.isZero())return v;if(o(t)||(t=O(t)),n)return f(n.mul(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned);if(t.isZero())return v;if(this.eq(A))return t.isOdd()?A:v;if(t.eq(A))return this.isOdd()?A:v;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(N)&&t.lt(N))return h(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,r=65535&this.high,c=this.low>>>16,d=65535&this.low,l=t.high>>>16,m=65535&t.high,y=t.low>>>16,j=65535&t.low,w=0,x=0,S=0,T=0;return S+=(T+=d*j)>>>16,x+=(S+=c*j)>>>16,S&=65535,x+=(S+=d*y)>>>16,w+=(x+=r*j)>>>16,x&=65535,w+=(x+=c*y)>>>16,x&=65535,w+=(x+=d*m)>>>16,w+=e*j+r*y+c*m+d*l,f((S&=65535)<<16|(T&=65535),(w&=65535)<<16|(x&=65535),this.unsigned)},$.mul=$.multiply,$.divide=function(t){if(o(t)||(t=O(t)),t.isZero())throw Error("division by zero");var e,r,c;if(n)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?S:v;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return S;if(t.gt(this.shru(1)))return k;c=S}else{if(this.eq(A))return t.eq(T)||t.eq(E)?A:t.eq(A)?T:(e=this.shr(1).div(t).shl(1)).eq(v)?t.isNegative()?T:E:(r=this.sub(t.mul(e)),c=e.add(r.div(t)));if(t.eq(A))return this.unsigned?S:v;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();c=v}for(r=this;r.gte(t);){e=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var d=Math.ceil(Math.log(e)/Math.LN2),l=d<=48?1:m(2,d-48),y=h(e),j=y.mul(t);j.isNegative()||j.gt(r);)j=(y=h(e-=l,this.unsigned)).mul(t);y.isZero()&&(y=T),c=c.add(y),r=r.sub(j)}return c},$.div=$.divide,$.modulo=function(t){return o(t)||(t=O(t)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},$.mod=$.modulo,$.rem=$.modulo,$.not=function(){return f(~this.low,~this.high,this.unsigned)},$.and=function(t){return o(t)||(t=O(t)),f(this.low&t.low,this.high&t.high,this.unsigned)},$.or=function(t){return o(t)||(t=O(t)),f(this.low|t.low,this.high|t.high,this.unsigned)},$.xor=function(t){return o(t)||(t=O(t)),f(this.low^t.low,this.high^t.high,this.unsigned)},$.shiftLeft=function(t){return o(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?f(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):f(0,this.low<<t-32,this.unsigned)},$.shl=$.shiftLeft,$.shiftRight=function(t){return o(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?f(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):f(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},$.shr=$.shiftRight,$.shiftRightUnsigned=function(t){if(o(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?f(this.low>>>t|e<<32-t,e>>>t,this.unsigned):f(32===t?e:e>>>t-32,0,this.unsigned)},$.shru=$.shiftRightUnsigned,$.shr_u=$.shiftRightUnsigned,$.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},$.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},$.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},$.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},$.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},r.fromBytes=function(t,e,n){return n?r.fromBytesLE(t,e):r.fromBytesBE(t,e)},r.fromBytesLE=function(t,e){return new r(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},r.fromBytesBE=function(t,e){return new r(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},1028:function(t,e,n){"use strict";(function(t){var e=n(900);const r=()=>n(977);let o;class c{constructor(){this.util=n(978),this.textEncoder=new this.util.TextEncoder}fetch(path,t){return null!=Object(e.b)().global.fetch?Object(e.b)().global.fetch(path,t):(null==o&&(o=r()),o(path,t))}now(){const time=t.hrtime();return 1e3*time[0]+time[1]/1e6}encode(text,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(text)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(a){return this.util.types.isFloat32Array(a)||this.util.types.isInt32Array(a)||this.util.types.isUint8Array(a)||this.util.types.isUint8ClampedArray(a)}}Object(e.b)().get("IS_NODE")&&!Object(e.b)().get("IS_BROWSER")&&Object(e.b)().setPlatform("node",new c)}).call(this,n(98))},1029:function(t,e,n){var r=n(1030),o=n(1031),c=n(1032),d=n(1033),l=n(1034),h=n(1035),f=n(1036);f.alea=r,f.xor128=o,f.xorwow=c,f.xorshift7=d,f.xor4096=l,f.tychei=h,t.exports=f},1030:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e,n=this,r=(e=4022871197,function(data){data=String(data);for(var i=0;i<data.length;i++){var t=.02519603282416938*(e+=data.charCodeAt(i));t-=e=t>>>0,e=(t*=e)>>>0,e+=4294967296*(t-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function l(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var n=new d(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.alea=h}(0,t,n(914))}).call(this,n(634)(t))},1031:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function l(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var n=new d(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xor128=h}(0,t,n(914))}).call(this,n(634)(t))},1032:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function l(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var n=new d(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xorwow=h}(0,t,n(914))}).call(this,n(634)(t))},1033:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function l(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var n=new d(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xorshift7=h}(0,t,n(914))}).call(this,n(634)(t))},1034:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,i,o,c,d=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),i=0,o=-32;o<l;++o)e&&(r^=e.charCodeAt((o+32)%e.length)),0===o&&(c=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(c=c+1640531527|0,i=0==(n=d[127&o]^=r+c)?i+1:0);for(i>=128&&(d[127&(e&&e.length||0)]=-1),i=127,o=512;o>0;--o)r=d[i+34&127],n=d[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,d[i]=r^n;t.w=c,t.X=d,t.i=i}(e,t)}function l(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var n=new d(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xor4096=h}(0,t,n(914))}).call(this,n(634)(t))},1035:function(t,e,n){(function(t){var r;!function(t,o,c){function d(t){var e=this,n="";e.next=function(){var b=e.b,t=e.c,n=e.d,a=e.a;return b=b<<25^b>>>7^t,t=t-n|0,n=n<<24^n>>>8^a,a=a-b|0,e.b=b=b<<20^b>>>12^t,e.c=t=t-n|0,e.d=n<<16^t>>>16^a,e.a=a-b|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function l(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var n=new d(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(914)&&n(953)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.tychei=h}(0,t,n(914))}).call(this,n(634)(t))},1036:function(t,e,n){var r;!function(o,c,d){var l,h=256,f=d.pow(h,6),m=d.pow(2,52),y=2*m,mask=255;function O(t,e,n){var r=[],O=N(x((e=1==e?{entropy:!0}:e||{}).entropy?[t,v(c)]:null==t?function(){try{var t;return l&&(t=l.randomBytes)?t=t(h):(t=new Uint8Array(h),(o.crypto||o.msCrypto).getRandomValues(t)),v(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,v(c)]}}():t,3),r),S=new j(r),T=function(){for(var t=S.g(6),e=f,n=0;t<m;)t=(t+n)*h,e*=h,n=S.g(1);for(;t>=y;)t/=2,e/=2,n>>>=1;return(t+n)/e};return T.int32=function(){return 0|S.g(4)},T.quick=function(){return S.g(4)/4294967296},T.double=T,N(v(S.S),c),(e.pass||n||function(t,e,n,r){return r&&(r.S&&w(r,S),t.state=function(){return w(S,{})}),n?(d.random=t,e):t})(T,O,"global"in e?e.global:this==d,e.state)}function j(t){var e,n=t.length,r=this,i=0,o=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<h;)s[i]=i++;for(i=0;i<h;i++)s[i]=s[o=mask&o+t[i%n]+(e=s[i])],s[o]=e;(r.g=function(t){for(var e,n=0,i=r.i,o=r.j,s=r.S;t--;)e=s[i=mask&i+1],n=n*h+s[mask&(s[i]=s[o=mask&o+e])+(s[o]=e)];return r.i=i,r.j=o,n})(h)}function w(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function x(t,e){var n,r=[],o=typeof t;if(e&&"object"==o)for(n in t)try{r.push(x(t[n],e-1))}catch(t){}return r.length?r:"string"==o?t:t+"\0"}function N(t,e){for(var n,r=t+"",o=0;o<r.length;)e[mask&o]=mask&(n^=19*e[mask&o])+r.charCodeAt(o++);return v(e)}function v(a){return String.fromCharCode.apply(0,a)}if(N(d.random(),c),t.exports){t.exports=O;try{l=n(985)}catch(t){}}else void 0===(r=function(){return O}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},1037:function(t,e,n){"use strict";var r,o;n.d(e,"a",(function(){return r})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_QINT16=15]="DT_QINT16",t[t.DT_QUINT16=16]="DT_QUINT16",t[t.DT_UINT16=17]="DT_UINT16",t[t.DT_COMPLEX128=18]="DT_COMPLEX128",t[t.DT_HALF=19]="DT_HALF",t[t.DT_RESOURCE=20]="DT_RESOURCE",t[t.DT_VARIANT=21]="DT_VARIANT",t[t.DT_UINT32=22]="DT_UINT32",t[t.DT_UINT64=23]="DT_UINT64",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",t[t.DT_QINT16_REF=115]="DT_QINT16_REF",t[t.DT_QUINT16_REF=116]="DT_QUINT16_REF",t[t.DT_UINT16_REF=117]="DT_UINT16_REF",t[t.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",t[t.DT_HALF_REF=119]="DT_HALF_REF",t[t.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",t[t.DT_VARIANT_REF=121]="DT_VARIANT_REF",t[t.DT_UINT32_REF=122]="DT_UINT32_REF",t[t.DT_UINT64_REF=123]="DT_UINT64_REF"}(r||(r={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(o||(o={}))},1038:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},1039:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},1040:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]},1041:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},1042:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},1043:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},1044:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},1045:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},1046:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]},1047:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]},1048:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}]},1049:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}]},1050:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}]},1051:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},1052:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]},1053:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},1054:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},1055:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},1056:function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},888:function(t,e,n){"use strict";n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return d}));var r=n(890),o=n(899);const c="__op";function d(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const d=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=c;const l=(...t)=>{r.a.startScope(n);try{const e=d(...t);return Object(o.y)(e)&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(e),e}catch(t){throw r.a.endScope(null),t}};return Object.defineProperty(l,"name",{value:n,configurable:!0}),l}},889:function(t,e,n){"use strict";n.d(e,"c",(function(){return f})),n.d(e,"a",(function(){return O})),n.d(e,"b",(function(){return j}));var r=n(890),o=n(900),c=n(909),d=n(927),l=n(892),h=n(899);function f(t,e){let n=t;if(Object(l.isTypedArray)(t))return"string"===e?[]:[t.length];if(Object(d.a)(t)){const e=t.channels||"RGBA";return[t.height,t.width*e.length]}if(Object(d.b)(t))return[t.buffer.size/(null==e?4:Object(h.h)(e))];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Object(l.isTypedArray)(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Object(o.b)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&m(t,r,[]),r}function m(t,e,n){if(n=n||[],!Array.isArray(t)&&!Object(l.isTypedArray)(t))return void Object(h.c)(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));Object(h.c)(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),Object(h.c)(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let i=0;i<t.length;++i)m(t[i],r,n.concat(i))}function y(t,e,n,r){if("string_or_numeric"!==t){if(null==t)throw new Error("Expected dtype cannot be null.");if("numeric"!==t&&t!==e||"numeric"===t&&"string"===e)throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}}function O(t,e,n,o="numeric"){if(t instanceof c.a)return y(o,t.dtype,e,n),t;let d=Object(h.s)(t);if("string"!==d&&["bool","int32","float32"].indexOf(o)>=0&&(d=o),y(o,d,e,n),null==t||!Object(l.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const m=f(t,d);Object(l.isTypedArray)(t)||Array.isArray(t)||(t=[t]);const O="string"!==d?Object(l.toTypedArray)(t,d):Object(l.flatten)(t,[],!0);return r.a.makeTensor(O,m,d)}function j(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,i)=>O(t,`${e}[${i}]`,n,r)))}},890:function(t,e,n){"use strict";n.d(e,"b",(function(){return T})),n.d(e,"a",(function(){return k}));var r=n(970),o=n(900),c=n(975),d=n(891),l=n(969),h=n(968),f=n(892),m=n(899);class y{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new j)}profileKernel(t,e,n){let r;const c=()=>{r=n()};let d;const l=f.now();if(this.backendTimer.timerAvailable())d=this.backendTimer.time(c);else{c();for(const output of r)output.dataSync();d=Promise.resolve({kernelMs:f.now()-l})}if(Object(o.b)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<r.length;i++){const output=r[i];output.data().then((e=>{O(e,output.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:d.then((t=>t.kernelMs)),extraInfo:d.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:o,extraInfo:c}=t;n.forEach((t=>{Promise.all([t.data(),r,c]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],o,n[2])}))}))}}function O(t,e,n){if("float32"!==e)return!1;for(let i=0;i<t.length;i++){const e=t[i];if(isNaN(e)||!isFinite(e))return console.warn(`Found ${e} in the result of '${n}'`),!0}return!1}class j{logKernelProfile(t,e,n,r,o,c){const time="number"==typeof r?m.L(`${r}ms`,9):r.error,d=m.L(t,25),l=e.rank,h=e.size,f=m.L(e.shape.toString(),14);let y="";for(const t in o){const input=o[t];if(null!=input){const n=input.shape||e.shape,r=n.length;y+=`${t}: ${r}D ${r>0?n:""} `}}console.log(`%c${d}\t%c${time}\t%c${l}D ${f}\t%c${h}\t%c${y}\t%c${c}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var w=n(909),x=n(894);function N(t){return null!=t.kernelName}class v{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((t=>t.name))))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class S{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new v}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let i=0;i<t.length;i++){const e=t[i];if(await this.initializeBackend(e).success)return void await this.setBackend(e)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(h.b(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new y(this.backendInstance),!0}setupRegisteredKernels(){Object(l.c)(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){Object(l.c)(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof r.b||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,h.b(`Initialization of backend ${t} failed`),h.b(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return h.b(`Initialization of backend ${t} failed`),h.b(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((a,b)=>this.registryFactory[b].priority-this.registryFactory[a].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let i=0;i<t.length;i++){const e=t[i],{success:n,asyncInit:r}=this.initializeBackend(e);if(r||n)return{name:e,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e),c=r.refCount(e);r.disposeData(e,!0),n.backend=t,t.move(e,o,n.shape,n.dtype,c),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return S.nextTensorId++}nextVariableId(){return S.nextVariableId++}clone(t){const e=k.runKernel(d.pb,{x:t}),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e={x:t},n={dtype:"float32"};return k.runKernel(d.w,e,n)}})),[],{}),e}runKernel(t,e,n){null==this.backendName&&this.backend;if(!(null!=Object(l.b)(t,this.backendName)))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let o=0;n.forEach((t=>{o+="complex64"===t.dtype?3:1}));const c=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],d=r-e-o-c;if(d>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${d} data ids) after running '${t}'`)}runKernelFunc(t){let e,n=[];const r=this.isTapeOn(),o=this.state.numBytes,c=this.state.numTensors;let d,h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const f=N(t)?t.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(N(t)){const{kernelName:e,inputs:o,attrs:c}=t;null==this.backendName&&this.backend;const f=Object(l.b)(e,this.backendName);m.c(null!=f,(()=>`Cannot find registered kernel '${e}' for backend '${this.backendName}'`)),d=()=>{const t=this.backend.numDataIds();h=f.kernelFunc({inputs:o,attrs:c,backend:this.backend});const d=Array.isArray(h)?h:[h];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(e,t,d);const l=d.map((t=>null!=t.rank?t:this.makeTensorFromTensorInfo(t)));if(r){const t=this.getTensorsForGradient(e,o,l);n=this.saveTensorsForBackwardMode(t)}return l}}else{const{forwardFunc:e}=t,o=t=>{r&&(n=t.map((t=>this.keep(this.clone(t)))))};d=()=>{const t=this.backend.numDataIds();h=this.tidy((()=>e(this.backend,o)));const n=Array.isArray(h)?h:[h];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(f,t,n),n}}const{inputs:y,attrs:O}=t,j=N(t)?null:t.backwardsFunc;let w;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(w=this.profiler.profileKernel(f,y,(()=>d())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(w),e=w.outputs):e=d()})),r&&this.addTapeNode(f,y,e,j,n,O),this.state.profiling&&this.state.activeProfile.kernels.push({name:f,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-c,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(y).map((t=>null!=y[t]?y[t].shape:null)),outputShapes:e.map((t=>t.shape)),kernelTimeMs:w.timeMs,extraInfo:w.extraInfo}),Array.isArray(h)?e:e[0]}saveTensorsForBackwardMode(t){const e=t.map((t=>this.keep(this.clone(t))));return e}getTensorsForGradient(t,e,n){const r=Object(l.a)(t);if(null!=r){const t=r.inputsToSave||[],o=r.outputsToSave||[];let c;r.saveAllInputs?(m.c(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),c=Object.keys(e).map((t=>e[t]))):c=t.map((t=>e[t]));const d=n.filter(((t,i)=>o[i]));return c.concat(d)}return[]}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let o=t;"string"===n&&m.A(t[0])&&(o=t.map((t=>f.encodeString(t))));const c=r.write(o,e,n),d=new w.a(e,n,c,this.nextTensorId());if(this.trackTensor(d,r),"string"===n){const t=this.state.tensorInfo.get(c),e=Object(m.g)(o);this.state.numBytes+=e-t.bytes,t.bytes=e}return d}makeTensorFromDataId(t,e,n,r){const o={dataId:t,shape:e,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(o,r)}makeTensorFromTensorInfo(t,e){const{dataId:n,shape:r,dtype:o}=t,c=new w.a(r,o,n,this.nextTensorId());return this.trackTensor(c,e),c}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const o=new w.c(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}trackTensor(a,t){this.state.numTensors++,"string"===a.dtype&&this.state.numStringTensors++;let e=0;"complex64"!==a.dtype&&"string"!==a.dtype&&(e=a.size*m.h(a.dtype)),this.state.numBytes+=e,this.state.tensorInfo.has(a.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(a.dataId,{backend:t||this.backend,dtype:a.dtype,shape:a.shape,bytes:e})),a instanceof w.c||this.track(a)}incRef(a,t){this.trackTensor(a,t),this.backend.incRef(a.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(a){if(!this.state.tensorInfo.has(a.dataId))return;const t=this.state.tensorInfo.get(a.dataId);if(this.state.numTensors--,"string"===a.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==a.dtype&&"string"!==a.dtype){const t=a.size*m.h(a.dtype);this.state.numBytes-=t}t.backend.disposeData(a.dataId)&&this.removeDataId(a.dataId,t.backend)}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,o,c){const d={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},h=Object(l.a)(t);null!=h&&(r=h.gradFunc),null!=r&&(d.gradient=t=>(t=t.map(((t,i)=>{if(null==t){const output=n[i],t=m.F(output.size,output.dtype);return this.makeTensor(t,output.shape,output.dtype)}return t})),r(t.length>1?t:t[0],o,c))),this.state.activeTape.push(d)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Object(x.b)(t),n=new Set(e.map((t=>t.id)));for(let i=0;i<this.state.activeScope.track.length;i++){const t=this.state.activeScope.track[i];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(m.c(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));m.c(o instanceof w.a,(()=>"The result y returned by f() must be a tensor."));const c=function(t,e,n){const r={},o={};for(let i=0;i<e.length;i++)r[e[i].id]=!0;for(let i=0;i<t.length;i++){const n=t[i],c=n.inputs;for(const t in c){const input=c[t];let d=!1;for(let t=0;t<e.length;t++)if(r[input.id]){n.outputs.forEach((output=>r[output.id]=!0)),d=!0,o[n.id]=!0;break}if(d)break}}const c={};c[n.id]=!0;const d={};for(let i=t.length-1;i>=0;i--){const e=t[i],n=e.inputs;for(let t=0;t<e.outputs.length;t++)if(c[e.outputs[t].id]){for(const t in n)c[n[t].id]=!0,d[e.id]=!0;break}}const l=[];for(let i=0;i<t.length;i++){const e=t[i];if(o[e.id]&&d[e.id]){const t={};for(const n in e.inputs){const o=e.inputs[n];r[o.id]&&(t[n]=o)}const n=Object.assign({},e);n.inputs=t,n.outputs=e.outputs,l.push(n)}}return l}(this.state.activeTape,e,o);if(!r&&0===c.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[o.id]=null==n?function(t){const e=Object(m.D)(Object(m.O)(t),"float32");return k.makeTensor(e,t,"float32")}(o.shape):n,function(t,e,n,r){for(let i=e.length-1;i>=0;i--){const o=e[i],c=[];if(o.outputs.forEach((e=>{const n=t[e.id];null!=n?c.push(n):c.push(null)})),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const d=o.gradient(c);for(const e in o.inputs){if(!(e in d))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(d)}.`);const c=n((()=>d[e]()));if("float32"!==c.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${c.dtype}'`);const l=o.inputs[e];if(!m.a(c.shape,l.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${e}' has shape '${c.shape}', which does not match the shape of the input '${l.shape}'`);if(null==t[l.id])t[l.id]=c;else{const e=t[l.id];t[l.id]=r(e,c),e.dispose()}}}}(t,c,(t=>this.tidy(t)),E);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:o,grads:r}}))}customGrad(t){return m.c(m.v(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;m.c(e.every((t=>t instanceof w.a)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};e.forEach(((input,i)=>{r[i]=input}));return this.runKernelFunc({forwardFunc:(r,o)=>(n=t(...e,o),m.c(n.value instanceof w.a,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),m.c(m.v(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(t,r)=>{const o=n.gradFunc(t,r),c=Array.isArray(o)?o:[o];m.c(c.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),m.c(c.every((t=>t instanceof w.a)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const d={};return c.forEach(((t,i)=>{d[i]=()=>t})),d},inputs:r})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){const e=Object(f.now)(),n=await this.backend.time(t);return n.wallMs=Object(f.now)()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new v;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function T(){const t=Object(c.b)();if(null==t._tfengine){const e=new o.a(t);t._tfengine=new S(e)}return Object(o.c)(t._tfengine.ENV),Object(w.f)((()=>t._tfengine)),t._tfengine}S.nextTensorId=0,S.nextVariableId=0;const k=T();function E(a,b){const t={a:a,b:b};return k.runKernel(d.d,t)}},891:function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return c})),n.d(e,"d",(function(){return d})),n.d(e,"e",(function(){return l})),n.d(e,"f",(function(){return h})),n.d(e,"g",(function(){return f})),n.d(e,"h",(function(){return m})),n.d(e,"i",(function(){return y})),n.d(e,"j",(function(){return O})),n.d(e,"k",(function(){return j})),n.d(e,"l",(function(){return w})),n.d(e,"n",(function(){return x})),n.d(e,"m",(function(){return N})),n.d(e,"o",(function(){return v})),n.d(e,"q",(function(){return S})),n.d(e,"p",(function(){return T})),n.d(e,"r",(function(){return k})),n.d(e,"s",(function(){return E})),n.d(e,"t",(function(){return I})),n.d(e,"u",(function(){return _})),n.d(e,"v",(function(){return A})),n.d(e,"w",(function(){return $})),n.d(e,"x",(function(){return M})),n.d(e,"y",(function(){return D})),n.d(e,"z",(function(){return R})),n.d(e,"A",(function(){return C})),n.d(e,"B",(function(){return F})),n.d(e,"C",(function(){return B})),n.d(e,"D",(function(){return L})),n.d(e,"E",(function(){return z})),n.d(e,"F",(function(){return P})),n.d(e,"G",(function(){return V})),n.d(e,"H",(function(){return U})),n.d(e,"I",(function(){return W})),n.d(e,"K",(function(){return G})),n.d(e,"L",(function(){return K})),n.d(e,"J",(function(){return H})),n.d(e,"M",(function(){return Z})),n.d(e,"N",(function(){return J})),n.d(e,"O",(function(){return Y})),n.d(e,"P",(function(){return Q})),n.d(e,"Q",(function(){return X})),n.d(e,"R",(function(){return tt})),n.d(e,"S",(function(){return et})),n.d(e,"T",(function(){return nt})),n.d(e,"hc",(function(){return at})),n.d(e,"U",(function(){return st})),n.d(e,"V",(function(){return ot})),n.d(e,"X",(function(){return it})),n.d(e,"W",(function(){return ct})),n.d(e,"Y",(function(){return ut})),n.d(e,"Z",(function(){return lt})),n.d(e,"ab",(function(){return pt})),n.d(e,"bb",(function(){return ht})),n.d(e,"cb",(function(){return ft})),n.d(e,"db",(function(){return mt})),n.d(e,"eb",(function(){return bt})),n.d(e,"fb",(function(){return gt})),n.d(e,"hb",(function(){return yt})),n.d(e,"lb",(function(){return Ot})),n.d(e,"kb",(function(){return jt})),n.d(e,"mb",(function(){return wt})),n.d(e,"nb",(function(){return xt})),n.d(e,"pb",(function(){return Nt})),n.d(e,"ob",(function(){return vt})),n.d(e,"qb",(function(){return St})),n.d(e,"rb",(function(){return Tt})),n.d(e,"sb",(function(){return kt})),n.d(e,"tb",(function(){return Et})),n.d(e,"vb",(function(){return It})),n.d(e,"wb",(function(){return _t})),n.d(e,"xb",(function(){return At})),n.d(e,"yb",(function(){return $t})),n.d(e,"zb",(function(){return Mt})),n.d(e,"Ab",(function(){return Dt})),n.d(e,"Bb",(function(){return Rt})),n.d(e,"Cb",(function(){return Ct})),n.d(e,"Db",(function(){return Ft})),n.d(e,"ub",(function(){return Bt})),n.d(e,"Eb",(function(){return Lt})),n.d(e,"Ib",(function(){return zt})),n.d(e,"Fb",(function(){return Pt})),n.d(e,"Gb",(function(){return Vt})),n.d(e,"Hb",(function(){return Ut})),n.d(e,"Jb",(function(){return Wt})),n.d(e,"Kb",(function(){return Gt})),n.d(e,"Lb",(function(){return qt})),n.d(e,"Mb",(function(){return Kt})),n.d(e,"Nb",(function(){return Ht})),n.d(e,"Ob",(function(){return Zt})),n.d(e,"Pb",(function(){return Jt})),n.d(e,"Qb",(function(){return Yt})),n.d(e,"Ub",(function(){return Qt})),n.d(e,"Rb",(function(){return Xt})),n.d(e,"Sb",(function(){return te})),n.d(e,"Tb",(function(){return ee})),n.d(e,"Wb",(function(){return ne})),n.d(e,"Vb",(function(){return re})),n.d(e,"Xb",(function(){return ae})),n.d(e,"Yb",(function(){return se})),n.d(e,"Zb",(function(){return oe})),n.d(e,"ac",(function(){return ie})),n.d(e,"bc",(function(){return ce})),n.d(e,"cc",(function(){return ue})),n.d(e,"dc",(function(){return de})),n.d(e,"ec",(function(){return le})),n.d(e,"fc",(function(){return pe})),n.d(e,"gc",(function(){return he})),n.d(e,"ic",(function(){return fe})),n.d(e,"jc",(function(){return me})),n.d(e,"lc",(function(){return be})),n.d(e,"nc",(function(){return ge})),n.d(e,"mc",(function(){return ye})),n.d(e,"kc",(function(){return Oe})),n.d(e,"oc",(function(){return je})),n.d(e,"qc",(function(){return we})),n.d(e,"rc",(function(){return xe})),n.d(e,"sc",(function(){return Ne})),n.d(e,"Xc",(function(){return ve})),n.d(e,"tc",(function(){return Se})),n.d(e,"uc",(function(){return Te})),n.d(e,"vc",(function(){return ke})),n.d(e,"Ac",(function(){return Ee})),n.d(e,"yc",(function(){return Ie})),n.d(e,"zc",(function(){return _e})),n.d(e,"xc",(function(){return Ae})),n.d(e,"wc",(function(){return $e})),n.d(e,"Cc",(function(){return Me})),n.d(e,"Kc",(function(){return De})),n.d(e,"Uc",(function(){return Re})),n.d(e,"Dc",(function(){return Ce})),n.d(e,"Jc",(function(){return Fe})),n.d(e,"Bc",(function(){return Be})),n.d(e,"Ec",(function(){return Le})),n.d(e,"Fc",(function(){return ze})),n.d(e,"Gc",(function(){return Pe})),n.d(e,"Hc",(function(){return Ve})),n.d(e,"Ic",(function(){return Ue})),n.d(e,"Mc",(function(){return We})),n.d(e,"Lc",(function(){return Ge})),n.d(e,"Nc",(function(){return qe})),n.d(e,"Pc",(function(){return Ke})),n.d(e,"Qc",(function(){return He})),n.d(e,"Rc",(function(){return Ze})),n.d(e,"Sc",(function(){return Je})),n.d(e,"Tc",(function(){return Ye})),n.d(e,"Vc",(function(){return Qe})),n.d(e,"Wc",(function(){return Xe})),n.d(e,"Yc",(function(){return tn})),n.d(e,"Zc",(function(){return en})),n.d(e,"ad",(function(){return nn})),n.d(e,"bd",(function(){return rn})),n.d(e,"cd",(function(){return an})),n.d(e,"dd",(function(){return sn})),n.d(e,"ed",(function(){return on})),n.d(e,"fd",(function(){return cn})),n.d(e,"Oc",(function(){return un})),n.d(e,"gb",(function(){return dn})),n.d(e,"pc",(function(){return ln})),n.d(e,"gd",(function(){return pn})),n.d(e,"ib",(function(){return hn})),n.d(e,"jb",(function(){return fn}));const r="Abs",o="Acos",c="Acosh",d="Add",l="AddN",h="All",f="Any",m="ArgMax",y="ArgMin",O="Asin",j="Asinh",w="Atan",x="Atanh",N="Atan2",v="AvgPool",S="AvgPoolGrad",T="AvgPool3D",k="BatchMatMul",E="BatchToSpaceND",I="Bincount",_="BitwiseAnd",A="BroadcastArgs",$="Cast",M="Ceil",D="ClipByValue",R="Complex",C="ComplexAbs",F="Concat",B="Conv2D",L="Conv2DBackpropFilter",z="Conv2DBackpropInput",P="Conv3D",V="Conv3DBackpropInputV2",U="Cos",W="Cosh",G="Cumprod",K="Cumsum",H="CropAndResize",Z="DenseBincount",J="DepthToSpace",Y="DepthwiseConv2dNative",Q="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",tt="Diag",et="Dilation2D",nt="Draw",at="RealDiv",st="Einsum",ot="Elu",it="Erf",ct="Equal",ut="Exp",lt="ExpandDims",pt="Expm1",ht="FFT",ft="Fill",mt="FlipLeftRight",bt="Floor",gt="FloorDiv",yt="FusedBatchNorm",Ot="GatherV2",jt="GatherNd",wt="Greater",xt="GreaterEqual",Nt="Identity",vt="IFFT",St="Imag",Tt="IsFinite",kt="IsInf",Et="IsNan",It="LeakyRelu",_t="Less",At="LessEqual",$t="LinSpace",Mt="Log",Dt="Log1p",Rt="LogicalAnd",Ct="LogicalNot",Ft="LogicalOr",Bt="LRN",Lt="Max",zt="Maximum",Pt="MaxPool",Vt="MaxPool3D",Ut="MaxPoolWithArgmax",Wt="Mean",Gt="Min",qt="Minimum",Kt="MirrorPad",Ht="Mod",Zt="Multinomial",Jt="Multiply",Yt="Neg",Qt="NotEqual",Xt="NonMaxSuppressionV3",te="NonMaxSuppressionV4",ee="NonMaxSuppressionV5",ne="OnesLike",re="OneHot",ae="Pack",se="PadV2",oe="Pow",ie="Prelu",ce="Prod",ue="RaggedGather",de="RaggedRange",le="RaggedTensorToTensor",pe="Range",he="Real",fe="Reciprocal",me="Relu",be="Reshape",ge="ResizeNearestNeighbor",ye="ResizeBilinear",Oe="Relu6",je="Reverse",we="Round",xe="Rsqrt",Ne="ScatterNd",ve="TensorScatterUpdate",Se="SearchSorted",Te="Select",ke="Selu",Ee="Slice",Ie="Sin",_e="Sinh",Ae="Sign",$e="Sigmoid",Me="Softplus",De="Sqrt",Re="Sum",Ce="SpaceToBatchND",Fe="SplitV",Be="Softmax",Le="SparseFillEmptyRows",ze="SparseReshape",Pe="SparseSegmentMean",Ve="SparseSegmentSum",Ue="SparseToDense",We="SquaredDifference",Ge="Square",qe="StaticRegexReplace",Ke="StridedSlice",He="StringNGrams",Ze="StringSplit",Je="StringToHashBucketFast",Ye="Sub",Qe="Tan",Xe="Tanh",tn="Tile",en="TopK",nn="Transform",rn="Transpose",an="Unique",sn="Unpack",on="UnsortedSegmentSum",cn="ZerosLike",un="Step",dn="FromPixels",ln="RotateWithOffset",pn="_FusedMatMul",hn="FusedConv2D",fn="FusedDepthwiseConv2D"},892:function(t,e,n){"use strict";n.r(e),n.d(e,"shuffle",(function(){return c.M})),n.d(e,"shuffleCombo",(function(){return c.N})),n.d(e,"clamp",(function(){return c.j})),n.d(e,"nearestLargerEven",(function(){return c.H})),n.d(e,"swap",(function(){return c.S})),n.d(e,"sum",(function(){return c.R})),n.d(e,"randUniform",(function(){return c.J})),n.d(e,"distSquared",(function(){return c.n})),n.d(e,"assert",(function(){return c.c})),n.d(e,"assertShapesMatch",(function(){return c.f})),n.d(e,"assertNonNull",(function(){return c.e})),n.d(e,"sizeFromShape",(function(){return c.O})),n.d(e,"isScalarShape",(function(){return c.z})),n.d(e,"arraysEqualWithNull",(function(){return c.b})),n.d(e,"arraysEqual",(function(){return c.a})),n.d(e,"isInt",(function(){return c.w})),n.d(e,"tanh",(function(){return c.T})),n.d(e,"sizeToSquarishShape",(function(){return c.P})),n.d(e,"createShuffledIndices",(function(){return c.m})),n.d(e,"rightPad",(function(){return c.L})),n.d(e,"repeatedTry",(function(){return c.K})),n.d(e,"inferFromImplicitShape",(function(){return c.t})),n.d(e,"parseAxisParam",(function(){return c.I})),n.d(e,"squeezeShape",(function(){return c.Q})),n.d(e,"getTypedArrayFromDType",(function(){return c.p})),n.d(e,"getArrayFromDType",(function(){return c.o})),n.d(e,"checkConversionForErrors",(function(){return c.i})),n.d(e,"isValidDtype",(function(){return c.B})),n.d(e,"hasEncodingLoss",(function(){return c.q})),n.d(e,"bytesPerElement",(function(){return c.h})),n.d(e,"bytesFromStringArray",(function(){return c.g})),n.d(e,"isString",(function(){return c.A})),n.d(e,"isBoolean",(function(){return c.u})),n.d(e,"isNumber",(function(){return c.x})),n.d(e,"inferDtype",(function(){return c.s})),n.d(e,"isFunction",(function(){return c.v})),n.d(e,"nearestDivisor",(function(){return c.G})),n.d(e,"computeStrides",(function(){return c.k})),n.d(e,"toNestedArray",(function(){return c.U})),n.d(e,"convertBackendValuesAndArrayBuffer",(function(){return c.l})),n.d(e,"makeOnesTypedArray",(function(){return c.D})),n.d(e,"makeZerosTypedArray",(function(){return c.F})),n.d(e,"makeZerosNestedTypedArray",(function(){return c.E})),n.d(e,"assertNonNegativeIntegerDimensions",(function(){return c.d})),n.d(e,"locToIndex",(function(){return c.C})),n.d(e,"indexToLoc",(function(){return c.r})),n.d(e,"isPromise",(function(){return c.y})),n.d(e,"hexToLong",(function(){return h})),n.d(e,"fingerPrint64",(function(){return T})),n.d(e,"createScalarValue",(function(){return k})),n.d(e,"toTypedArray",(function(){return E})),n.d(e,"now",(function(){return I})),n.d(e,"fetch",(function(){return _})),n.d(e,"encodeString",(function(){return A})),n.d(e,"decodeString",(function(){return $})),n.d(e,"isTypedArray",(function(){return M})),n.d(e,"flatten",(function(){return D}));var r=n(900),o=n(995),c=n(899),d=n(1027);const l=n.n(d).a||d;function h(t){return l.fromString(t,!0,16)}const f=h("c3a5c85c97cb3127"),m=h("b492b66fbe98f273"),y=h("9ae16a3b2f90404f");function O(t){return t.xor(t.shru(47))}function j(s,t,e){const n=s.slice(t,t+e);return l.fromBytes(Array.from(n),!0,!0)}function w(s,t){return j(s,t,8)}function x(s,t){return j(s,t,4)}function N(t,e){return 0===e?t:t.shru(e).or(t.shl(64-e))}function v(u,t,e=h("9ddfea08eb382d69")){let a=u.xor(t).mul(e);a=a.xor(a.shru(47));let b=t.xor(a).mul(e);return b=b.xor(b.shru(47)),b=b.mul(e),b}function S(s,t,a,b){return function(t,e,n,r,a,b){a=a.add(t),b=N(b.add(a).add(r),21);const o=a;return a=(a=a.add(e)).add(n),b=b.add(N(a,44)),[a.add(r),b.add(o)]}(w(s,t),w(s,t+8),w(s,t+16),w(s,t+24),a,b)}function T(s,t=s.length){const e=l.fromNumber(81,!0);if(t<=32)return t<=16?function(s,t=s.length){if(t>=8){const e=y.add(2*t),a=w(s,0).add(y),b=w(s,t-8);return v(N(b,37).mul(e).add(a),N(a,25).add(b).mul(e),e)}if(t>=4){const e=y.add(2*t);return v(x(s,0).shl(3).add(t),x(s,t-4),e)}if(t>0){const e=s[0]+(s[t>>1]<<8),n=t+(s[t-1]<<2);return O(y.mul(e).xor(f.mul(n))).mul(y)}return y}(s,t):function(s,t=s.length){const e=y.add(2*t),a=w(s,0).mul(m),b=w(s,8),n=w(s,t-8).mul(e),r=w(s,t-16).mul(y);return v(N(a.add(b),43).add(N(n,30)).add(r),a.add(N(b.add(y),18)).add(n),e)}(s,t);if(t<=64)return function(s,t=s.length){const e=y.add(2*t),a=w(s,0).mul(y),b=w(s,8),n=w(s,t-8).mul(e),r=w(s,t-16).mul(y),o=N(a.add(b),43).add(N(n,30)).add(r),c=v(o,a.add(N(b.add(y),18)).add(n),e),d=w(s,16).mul(e),l=w(s,24),g=o.add(w(s,t-32)).mul(e),h=c.add(w(s,t-24)).mul(e);return v(N(d.add(l),43).add(N(g,30)).add(h),d.add(N(l.add(a),18)).add(g),e)}(s,t);let n=e,r=e.mul(m).add(113),o=O(r.mul(y).add(113)).mul(y),c=[l.UZERO,l.UZERO],d=[l.UZERO,l.UZERO];n=n.mul(y).add(w(s,0));let h=0;const j=64*(t-1>>6),T=j+(t-1&63)-63;do{n=N(n.add(r).add(c[0]).add(w(s,h+8)),37).mul(m),r=N(r.add(c[1]).add(w(s,h+48)),42).mul(m),n=n.xor(d[1]),r=r.add(c[0]).add(w(s,h+40)),o=N(o.add(d[0]),33).mul(m),c=S(s,h,c[1].mul(m),n.add(d[0])),d=S(s,h+32,o.add(d[1]),r.add(w(s,h+16))),[o,n]=[n,o],h+=64}while(h!==j);const k=m.add(o.and(255).shl(1));return h=T,d[0]=d[0].add(t-1&63),c[0]=c[0].add(d[0]),d[0]=d[0].add(c[0]),n=N(n.add(r).add(c[0]).add(w(s,h+8)),37).mul(k),r=N(r.add(c[1]).add(w(s,h+48)),42).mul(k),n=n.xor(d[1].mul(9)),r=r.add(c[0].mul(9).add(w(s,h+40))),o=N(o.add(d[0]),33).mul(k),c=S(s,h,c[1].mul(k),n.add(d[0])),d=S(s,h+32,o.add(d[1]),r.add(w(s,h+16))),[o,n]=[n,o],v(v(c[0],d[0],k).add(O(r).mul(f)).add(o),v(c[1],d[1],k).add(n),k)}function k(t,e){return"string"===e?A(t):E([t],e)}function E(a,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(a)&&(a=D(a)),Object(r.b)().getBool("DEBUG")&&c.i(a,t),function(a,t){return a instanceof Float32Array&&"float32"===t||a instanceof Int32Array&&"int32"===t||a instanceof Uint8Array&&"bool"===t}(a,t))return a;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(a);if("int32"===t)return new Int32Array(a);if("bool"===t){const t=new Uint8Array(a.length);for(let i=0;i<t.length;++i)0!==Math.round(a[i])&&(t[i]=1);return t}throw new Error(`Unknown data type ${t}`)}function I(){return Object(r.b)().platform.now()}function _(path,t){return Object(r.b)().platform.fetch(path,t)}function A(s,t="utf-8"){return t=t||"utf-8",Object(r.b)().platform.encode(s,t)}function $(t,e="utf-8"){return e=e||"utf-8",Object(r.b)().platform.decode(t,e)}function M(a){return null!=Object(r.b)().platform.isTypedArray?Object(r.b)().platform.isTypedArray(a):Object(o.a)(a)}function D(t,e=[],n=!1){if(null==e&&(e=[]),"boolean"==typeof t||"number"==typeof t||"string"==typeof t||c.y(t)||null==t||M(t)&&n)e.push(t);else if(Array.isArray(t)||M(t))for(let i=0;i<t.length;++i)D(t[i],e,n);else{let r=-1;for(const e of Object.keys(t))/^([1-9]+[0-9]*|0)$/.test(e)&&(r=Math.max(r,Number(e)));for(let i=0;i<=r;i++)D(t[i],e,n)}return e}},893:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({reshape_:function(t,e){const n={x:Object(c.a)(t,"x","reshape","string_or_numeric")},d={shape:e};return r.a.runKernel(o.lc,n,d)}})},894:function(t,e,n){"use strict";n.d(e,"c",(function(){return d})),n.d(e,"a",(function(){return l})),n.d(e,"b",(function(){return h}));var r=n(909),o=n(927),c=n(899);function d(a,b){if(a.dtype===b.dtype)return[a,b];const t=Object(o.d)(a.dtype,b.dtype);return[a.cast(t),b.cast(t)]}function l(a,b){Object(c.c)(a.dtype===b.dtype,(()=>`The dtypes of the first(${a.dtype}) and second(${b.dtype}) input must match`))}function h(t){const e=[];return f(t,e,new Set),e}function f(t,e,n){if(null==t)return;if(t instanceof r.a)return void e.push(t);if(o=t,!Array.isArray(o)&&"object"!=typeof o)return;var o;const c=t;for(const t in c){const r=c[t];n.has(r)||(n.add(r),f(r,e,n))}}},895:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(888);const h=Object(l.b)({mul_:function(a,b){let t=Object(d.a)(a,"a","mul"),e=Object(d.a)(b,"b","mul");[t,e]=Object(c.c)(t,e);const n={a:t,b:e};return r.a.runKernel(o.Pb,n)}})},896:function(t,e,n){"use strict";n.d(e,"d",(function(){return o})),n.d(e,"e",(function(){return c})),n.d(e,"f",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"g",(function(){return f})),n.d(e,"c",(function(){return m})),n.d(e,"a",(function(){return y}));var r=n(906);function o(t,e,n,o,d){const l=e.inputParams[t];if(l&&void 0!==l.inputIndexStart){const t=l.inputIndexStart,h=0===l.inputIndexEnd?void 0:void 0===l.inputIndexEnd?t+1:l.inputIndexEnd,f=t<0?e.inputNames.length+t:t;if("tensor"===l.type)return c(e.inputNames[f],n,o,d);if("tensors"===l.type){const r=e.inputs.slice(t,h);return e.inputNames.slice(t,h).filter(((t,e)=>{var n;return"NoOp"!==(null===(n=r[e])||void 0===n?void 0:n.op)})).map((t=>c(t,n,o,d)))}const m=c(e.inputNames[f],n,o,d),data=m.dataSync();return"number"===l.type?data[0]:r.Ed.toNestedArray(m.shape,data)}const h=e.attrParams[t];return h&&h.value}function c(t,e,n,r){const[o,c]=f(t,n);if(null!=r){const t=r.getHashTableHandleByName(o);if(null!=t)return t}const d=n.currentContextIds.find((t=>!!e[h(o,t)]));return void 0!==d?e[h(o,d)][c]:void 0}function d(t,e,n){return e[h(t,n.currentContextId)]}function l(t,e){const[n,r,o]=f(t,e);return[h(n,e&&e.currentContextId),r,o]}function h(t,e){return e?`${t}-${e}`:t}function f(t,e){if(""===t)return["",0,void 0];const n=null!=e&&null!=e.parseNodeNameCache;if(n){const n=e.parseNodeNameCache.get(t);if(null!=n)return n}const r=t.split(":");let o;if(1===r.length)o=[t,0,void 0];else{const t=r[0],e=3===r.length?r[1]:void 0;o=[t,Number(r[r.length-1]),e]}return n&&e.parseNodeNameCache.set(t,o),o}function m(t,e,n){let r=o("pad",t,e,n);if("explicit"===r){r=o("explicitPaddings",t,e,n);const c=[[0,0],[0,0],[0,0],[0,0]];for(let i=0;i<4;i++)c[i][0]=r[2*i],c[i][1]=r[2*i+1];return c}return r}function y(t){return t.kept?t:Object(r.Vc)(t)}},897:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(888);const h=Object(l.b)({add_:function(a,b){let t=Object(d.a)(a,"a","add"),e=Object(d.a)(b,"b","add");[t,e]=Object(c.c)(t,e);const n={a:t,b:e};return r.a.runKernel(o.d,n)}})},898:function(t,e,n){"use strict";function r(t,e){const n=t.length,r=[];for(let i=0;i<n;i++){const o=n-1-i,a=t[o]||1;(e[e.length-1-i]||1)>1&&1===a&&r.unshift(o)}return r}function o(t,e){const n=[];for(let i=0;i<e.length;i++){const r=t[t.length-i-1],o=e.length-i-1,c=e[o];(null==r||1===r&&c>1)&&n.unshift(o)}return n}function c(t,e){const n=Math.max(t.length,e.length),r=new Array(n);for(let i=0;i<n;i++){let a=t[t.length-i-1];null==a&&(a=1);let b=e[e.length-i-1];if(null==b&&(b=1),1===a)r[n-i-1]=b;else if(1===b)r[n-i-1]=a;else{if(a!==b){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}r[n-i-1]=a}}return r}n.r(e),n.d(e,"getBroadcastDims",(function(){return r})),n.d(e,"getReductionAxes",(function(){return o})),n.d(e,"assertAndGetBroadcastShape",(function(){return c}))},899:function(t,e,n){"use strict";function r(t){let e=t.length,n=0;for(;e>0;)n=Math.random()*e|0,e--,l(t,e,n)}function o(t,e){if(t.length!==e.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${t.length}Second array length was ${e.length}`);let n=t.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,l(t,n,r),l(e,n,r)}function c(t,e,n){return Math.max(t,Math.min(e,n))}function d(t){return t%2==0?t:t+1}function l(object,t,e){const n=object[t];object[t]=object[e],object[e]=n}function h(t){let e=0;for(let i=0;i<t.length;i++)e+=t[i];return e}function f(a,b){const t=Math.random();return b*t+(1-t)*a}function m(a,b){let t=0;for(let i=0;i<a.length;i++){const e=Number(a[i])-Number(b[i]);t+=e*e}return t}function y(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function O(t,e,n=""){y(v(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function j(a){y(null!=a,(()=>"The input to the tensor constructor must be a non-null value."))}function w(t){if(0===t.length)return 1;let e=t[0];for(let i=1;i<t.length;i++)e*=t[i];return e}function x(t){return 0===t.length}function N(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(null!==t[i]&&null!==e[i]&&t[i]!==e[i])return!1;return!0}function v(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(t[i]!==e[i])return!1;return!0}function S(a){return a%1==0}function T(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function k(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function E(t){const e=new Uint32Array(t);for(let i=0;i<t;++i)e[i]=i;return r(e),e}function I(a,t){return t<=a.length?a:a+" ".repeat(t-a.length)}function _(t,e=(t=>0),n,r){return new Promise(((o,c)=>{let d=0;const l=()=>{if(t())return void o();d++;const h=e(d);null!=n&&d>=n?c():null!=r?r(l,h):setTimeout(l,h)};l()}))}function A(t,e){let n=1,r=-1;for(let i=0;i<t.length;++i)if(t[i]>=0)n*=t[i];else if(-1===t[i]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${i}`);r=i}else if(t[i]<0)throw Error(`Shapes can not be < 0. Found ${t[i]} at dim ${i}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const o=t.slice();return o[r]=e/n,o}function $(t,e){const n=e.length;return y((t=null==t?e.map(((s,i)=>i)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),y(t.every((t=>S(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((a=>a<0?n+a:a))}function M(t,e){const n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,c=null==e||o?null:$(e,t).sort();let d=0;for(let i=0;i<t.length;++i){if(null!=c){if(c[d]===i&&1!==t[i])throw new Error(`Can't squeeze axis ${i} since its dim '${t[i]}' is not 1`);(null==c[d]||c[d]>i)&&1===t[i]&&(n.push(t[i]),r.push(i)),c[d]<=i&&d++}1!==t[i]&&(n.push(t[i]),r.push(i))}return{newShape:n,keptDims:r}}function D(t,e){return R(t,e)}function R(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}function C(t,e){for(let i=0;i<t.length;i++){const n=t[i];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${e} being uploaded contains ${n}.`)}}function F(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function B(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function L(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function z(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}function P(t){return"string"==typeof t||t instanceof String}function V(t){return"boolean"==typeof t}function U(t){return"number"==typeof t}function W(t){return Array.isArray(t)?W(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray?"int32":U(t)?"float32":P(t)?"string":V(t)?"bool":"float32"}function G(t){return!!(t&&t.constructor&&t.call&&t.apply)}function K(t,e){for(let i=e;i<t;++i)if(t%i==0)return i;return t}function H(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let i=e-3;i>=0;--i)n[i]=n[i+1]*t[i+1];return n}function Z(t,e,a,n=!1){const r=new Array;if(1===e.length){const o=e[0]*(n?2:1);for(let i=0;i<o;i++)r[i]=a[t+i]}else{const o=e[0],c=e.slice(1),d=c.reduce(((t,e)=>t*e))*(n?2:1);for(let i=0;i<o;i++)r[i]=Z(t+i*d,c,a,n)}return r}function J(t,a,e=!1){if(0===t.length)return a[0];const n=t.reduce(((t,e)=>t*e))*(e?2:1);if(0===n)return[];if(n!==a.length)throw new Error(`[${t}] does not match the input size ${a.length}${e?" for a complex tensor":""}.`);return Z(0,t,a,e)}function Y(data,t){if(Array.isArray(data))return data;if("float32"===t)return data instanceof Float32Array?data:new Float32Array(data);if("int32"===t)return data instanceof Int32Array?data:new Int32Array(data);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(data));throw new Error(`Unknown dtype ${t}`)}function Q(t,e){const n=X(t,e);for(let i=0;i<n.length;i++)n[i]=1;return n}function X(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function tt(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||"float32"===e)return J(t,new Float32Array(n));if("int32"===e)return J(t,new Int32Array(n));if("bool"===e)return J(t,new Uint8Array(n));throw new Error(`Unknown data type ${e}`)}function et(t){t.forEach((e=>{y(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function nt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let i=0;i<t.length-1;++i)r+=n[i]*t[i];return r}function at(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let i=0;i<r.length-1;++i)r[i]=Math.floor(t/n[i]),t-=r[i]*n[i];return r[r.length-1]=t,r}function st(object){return object&&object.then&&"function"==typeof object.then}n.d(e,"M",(function(){return r})),n.d(e,"N",(function(){return o})),n.d(e,"j",(function(){return c})),n.d(e,"H",(function(){return d})),n.d(e,"S",(function(){return l})),n.d(e,"R",(function(){return h})),n.d(e,"J",(function(){return f})),n.d(e,"n",(function(){return m})),n.d(e,"c",(function(){return y})),n.d(e,"f",(function(){return O})),n.d(e,"e",(function(){return j})),n.d(e,"O",(function(){return w})),n.d(e,"z",(function(){return x})),n.d(e,"b",(function(){return N})),n.d(e,"a",(function(){return v})),n.d(e,"w",(function(){return S})),n.d(e,"T",(function(){return T})),n.d(e,"P",(function(){return k})),n.d(e,"m",(function(){return E})),n.d(e,"L",(function(){return I})),n.d(e,"K",(function(){return _})),n.d(e,"t",(function(){return A})),n.d(e,"I",(function(){return $})),n.d(e,"Q",(function(){return M})),n.d(e,"p",(function(){return D})),n.d(e,"o",(function(){return R})),n.d(e,"i",(function(){return C})),n.d(e,"B",(function(){return F})),n.d(e,"q",(function(){return B})),n.d(e,"h",(function(){return L})),n.d(e,"g",(function(){return z})),n.d(e,"A",(function(){return P})),n.d(e,"u",(function(){return V})),n.d(e,"x",(function(){return U})),n.d(e,"s",(function(){return W})),n.d(e,"v",(function(){return G})),n.d(e,"G",(function(){return K})),n.d(e,"k",(function(){return H})),n.d(e,"U",(function(){return J})),n.d(e,"l",(function(){return Y})),n.d(e,"D",(function(){return Q})),n.d(e,"F",(function(){return X})),n.d(e,"E",(function(){return tt})),n.d(e,"d",(function(){return et})),n.d(e,"C",(function(){return nt})),n.d(e,"r",(function(){return at})),n.d(e,"y",(function(){return st}))},900:function(t,e,n){"use strict";n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return l})),n.d(e,"c",(function(){return f}));var r=n(899);const o="tfjsflags";class c{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=d,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(l().getBool("IS_TEST")||l().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];l().getBool("IS_TEST")||l().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Object(r.y)(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);if(o in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){const n=e.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:e}(0,n)}))}}}function d(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((s,...t)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,t[0],t[1]),t.join("=")))),e}function l(){return h}let h=null;function f(t){h=t}},901:function(t,e,n){"use strict";n.d(e,"a",(function(){return sub}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(888);const sub=Object(l.b)({sub_:function(a,b){let t=Object(d.a)(a,"a","sub"),e=Object(d.a)(b,"b","sub");[t,e]=Object(c.c)(t,e);const n={a:t,b:e};return r.a.runKernel(o.Tc,n)}})},903:function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(892),o=n(932);function c(t,e){if((Object(r.isTypedArray)(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Object(r.isTypedArray)(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(o.a)(t,[],[],e)}},905:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(889),d=n(899),l=n(888);const h=Object(l.b)({cast_:function(t,e){const n=Object(c.a)(t,"x","cast");if(!d.B(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const l={x:n},h={dtype:e};return r.a.runKernel(o.w,l,h)}})},906:function(t,e,n){"use strict";n.d(e,"Cc",(function(){return ut.a})),n.d(e,"Dc",(function(){return ut.b})),n.d(e,"xd",(function(){return Ie.c})),n.d(e,"Dd",(function(){return Ie.d})),n.d(e,"Lc",(function(){return _e.e})),n.d(e,"Mc",(function(){return _e.i})),n.d(e,"Pc",(function(){return _e.B})),n.d(e,"Sc",(function(){return _e.C})),n.d(e,"Tc",(function(){return _e.D})),n.d(e,"Uc",(function(){return _e.F})),n.d(e,"Vc",(function(){return _e.G})),n.d(e,"Wc",(function(){return _e.I})),n.d(e,"Yc",(function(){return _e.cb})),n.d(e,"bd",(function(){return _e.nb})),n.d(e,"cd",(function(){return _e.ob})),n.d(e,"id",(function(){return _e.ic})),n.d(e,"jd",(function(){return _e.jc})),n.d(e,"kd",(function(){return _e.nc})),n.d(e,"ld",(function(){return _e.yc})),n.d(e,"od",(function(){return _e.Wc})),n.d(e,"pd",(function(){return _e.fd})),n.d(e,"qd",(function(){return _e.ld})),n.d(e,"rd",(function(){return _e.qd})),n.d(e,"td",(function(){return _e.Dd})),n.d(e,"ud",(function(){return _e.Fd})),n.d(e,"vd",(function(){return _e.Gd})),n.d(e,"wd",(function(){return _e.Kd})),n.d(e,"yd",(function(){return _e.Od})),n.d(e,"zd",(function(){return _e.Pd})),n.d(e,"Ad",(function(){return _e.Qd})),n.d(e,"Cd",(function(){return _e.ce})),n.d(e,"Fd",(function(){return _e.he})),n.d(e,"ed",(function(){return _e.Cb})),n.d(e,"Zc",(function(){return pt.c})),n.d(e,"Bd",(function(){return pt.g})),n.d(e,"Xc",(function(){return pt.b})),n.d(e,"gd",(function(){return pt.e})),n.d(e,"dd",(function(){return pt.d})),n.d(e,"md",(function(){return pt.f})),n.d(e,"Nc",(function(){return pt.a})),n.d(e,"nd",(function(){return Qt.d})),n.d(e,"ad",(function(){return m.b})),n.d(e,"Rc",(function(){return o})),n.d(e,"fd",(function(){return r})),n.d(e,"Ed",(function(){return Ee})),n.d(e,"Oc",(function(){return l})),n.d(e,"Qc",(function(){return Jt})),n.d(e,"sd",(function(){return c})),n.d(e,"hd",(function(){return h})),n.d(e,"mb",(function(){return Un.b})),n.d(e,"G",(function(){return Un.a})),n.d(e,"a",(function(){return Yt.a})),n.d(e,"b",(function(){return Yt.b})),n.d(e,"c",(function(){return Yt.c})),n.d(e,"d",(function(){return Yt.d})),n.d(e,"e",(function(){return Yt.e})),n.d(e,"f",(function(){return Yt.f})),n.d(e,"g",(function(){return Yt.g})),n.d(e,"h",(function(){return Yt.h})),n.d(e,"i",(function(){return Yt.i})),n.d(e,"j",(function(){return Yt.j})),n.d(e,"k",(function(){return Yt.k})),n.d(e,"l",(function(){return Yt.l})),n.d(e,"n",(function(){return Yt.n})),n.d(e,"m",(function(){return Yt.m})),n.d(e,"o",(function(){return Yt.o})),n.d(e,"p",(function(){return Yt.q})),n.d(e,"q",(function(){return Yt.r})),n.d(e,"r",(function(){return Yt.s})),n.d(e,"s",(function(){return Yt.t})),n.d(e,"t",(function(){return Yt.w})),n.d(e,"u",(function(){return Yt.x})),n.d(e,"v",(function(){return Yt.y})),n.d(e,"w",(function(){return Yt.z})),n.d(e,"x",(function(){return Yt.B})),n.d(e,"y",(function(){return Yt.C})),n.d(e,"z",(function(){return Yt.D})),n.d(e,"A",(function(){return Yt.E})),n.d(e,"B",(function(){return Yt.H})),n.d(e,"C",(function(){return Yt.I})),n.d(e,"E",(function(){return Yt.K})),n.d(e,"F",(function(){return Yt.L})),n.d(e,"D",(function(){return Yt.J})),n.d(e,"H",(function(){return Yt.M})),n.d(e,"I",(function(){return Yt.N})),n.d(e,"J",(function(){return Yt.O})),n.d(e,"K",(function(){return Yt.R})),n.d(e,"L",(function(){return Yt.S})),n.d(e,"Tb",(function(){return Yt.hc})),n.d(e,"M",(function(){return Yt.U})),n.d(e,"N",(function(){return Yt.V})),n.d(e,"P",(function(){return Yt.X})),n.d(e,"O",(function(){return Yt.W})),n.d(e,"Q",(function(){return Yt.Y})),n.d(e,"R",(function(){return Yt.Z})),n.d(e,"S",(function(){return Yt.ab})),n.d(e,"T",(function(){return Yt.bb})),n.d(e,"U",(function(){return Yt.cb})),n.d(e,"V",(function(){return Yt.db})),n.d(e,"W",(function(){return Yt.eb})),n.d(e,"X",(function(){return Yt.fb})),n.d(e,"Z",(function(){return Yt.hb})),n.d(e,"db",(function(){return Yt.lb})),n.d(e,"cb",(function(){return Yt.kb})),n.d(e,"eb",(function(){return Yt.mb})),n.d(e,"fb",(function(){return Yt.nb})),n.d(e,"hb",(function(){return Yt.pb})),n.d(e,"gb",(function(){return Yt.ob})),n.d(e,"ib",(function(){return Yt.qb})),n.d(e,"jb",(function(){return Yt.rb})),n.d(e,"kb",(function(){return Yt.sb})),n.d(e,"lb",(function(){return Yt.tb})),n.d(e,"ob",(function(){return Yt.vb})),n.d(e,"pb",(function(){return Yt.wb})),n.d(e,"qb",(function(){return Yt.xb})),n.d(e,"rb",(function(){return Yt.yb})),n.d(e,"sb",(function(){return Yt.zb})),n.d(e,"tb",(function(){return Yt.Ab})),n.d(e,"ub",(function(){return Yt.Bb})),n.d(e,"vb",(function(){return Yt.Cb})),n.d(e,"wb",(function(){return Yt.Db})),n.d(e,"nb",(function(){return Yt.ub})),n.d(e,"xb",(function(){return Yt.Eb})),n.d(e,"zb",(function(){return Yt.Ib})),n.d(e,"yb",(function(){return Yt.Fb})),n.d(e,"Ab",(function(){return Yt.Jb})),n.d(e,"Bb",(function(){return Yt.Kb})),n.d(e,"Cb",(function(){return Yt.Lb})),n.d(e,"Db",(function(){return Yt.Mb})),n.d(e,"Eb",(function(){return Yt.Nb})),n.d(e,"Fb",(function(){return Yt.Pb})),n.d(e,"Gb",(function(){return Yt.Qb})),n.d(e,"Jb",(function(){return Yt.Ub})),n.d(e,"Hb",(function(){return Yt.Rb})),n.d(e,"Ib",(function(){return Yt.Tb})),n.d(e,"Lb",(function(){return Yt.Wb})),n.d(e,"Kb",(function(){return Yt.Vb})),n.d(e,"Mb",(function(){return Yt.Xb})),n.d(e,"Nb",(function(){return Yt.Yb})),n.d(e,"Ob",(function(){return Yt.Zb})),n.d(e,"Pb",(function(){return Yt.ac})),n.d(e,"Qb",(function(){return Yt.bc})),n.d(e,"Rb",(function(){return Yt.fc})),n.d(e,"Sb",(function(){return Yt.gc})),n.d(e,"Ub",(function(){return Yt.ic})),n.d(e,"Vb",(function(){return Yt.jc})),n.d(e,"Xb",(function(){return Yt.lc})),n.d(e,"Zb",(function(){return Yt.nc})),n.d(e,"Yb",(function(){return Yt.mc})),n.d(e,"Wb",(function(){return Yt.kc})),n.d(e,"ac",(function(){return Yt.oc})),n.d(e,"cc",(function(){return Yt.qc})),n.d(e,"dc",(function(){return Yt.rc})),n.d(e,"ec",(function(){return Yt.sc})),n.d(e,"fc",(function(){return Yt.tc})),n.d(e,"gc",(function(){return Yt.uc})),n.d(e,"hc",(function(){return Yt.vc})),n.d(e,"mc",(function(){return Yt.Ac})),n.d(e,"kc",(function(){return Yt.yc})),n.d(e,"lc",(function(){return Yt.zc})),n.d(e,"jc",(function(){return Yt.xc})),n.d(e,"ic",(function(){return Yt.wc})),n.d(e,"oc",(function(){return Yt.Cc})),n.d(e,"sc",(function(){return Yt.Kc})),n.d(e,"zc",(function(){return Yt.Uc})),n.d(e,"pc",(function(){return Yt.Dc})),n.d(e,"rc",(function(){return Yt.Jc})),n.d(e,"nc",(function(){return Yt.Bc})),n.d(e,"qc",(function(){return Yt.Ic})),n.d(e,"uc",(function(){return Yt.Mc})),n.d(e,"tc",(function(){return Yt.Lc})),n.d(e,"wc",(function(){return Yt.Pc})),n.d(e,"xc",(function(){return Yt.Qc})),n.d(e,"yc",(function(){return Yt.Tc})),n.d(e,"Ac",(function(){return Yt.Vc})),n.d(e,"Bc",(function(){return Yt.Wc})),n.d(e,"Ec",(function(){return Yt.Yc})),n.d(e,"Fc",(function(){return Yt.Zc})),n.d(e,"Gc",(function(){return Yt.ad})),n.d(e,"Hc",(function(){return Yt.bd})),n.d(e,"Ic",(function(){return Yt.dd})),n.d(e,"Jc",(function(){return Yt.fd})),n.d(e,"vc",(function(){return Yt.Oc})),n.d(e,"Y",(function(){return Yt.gb})),n.d(e,"bc",(function(){return Yt.pc})),n.d(e,"Kc",(function(){return Yt.gd})),n.d(e,"ab",(function(){return Yt.ib})),n.d(e,"bb",(function(){return Yt.jb}));var r={};n.r(r),n.d(r,"copyModel",(function(){return tt})),n.d(r,"listModels",(function(){return Q})),n.d(r,"moveModel",(function(){return et})),n.d(r,"removeModel",(function(){return X})),n.d(r,"browserFiles",(function(){return $t})),n.d(r,"browserHTTPRequest",(function(){return Vt})),n.d(r,"CompositeArrayBuffer",(function(){return v.a})),n.d(r,"concatenateArrayBuffers",(function(){return y.d})),n.d(r,"decodeWeights",(function(){return y.e})),n.d(r,"encodeWeights",(function(){return y.f})),n.d(r,"fromMemory",(function(){return qt})),n.d(r,"fromMemorySync",(function(){return Kt})),n.d(r,"getLoadHandlers",(function(){return N})),n.d(r,"getModelArtifactsForJSON",(function(){return y.g})),n.d(r,"getModelArtifactsForJSONSync",(function(){return y.h})),n.d(r,"getModelArtifactsInfoForJSON",(function(){return y.i})),n.d(r,"getSaveHandlers",(function(){return x})),n.d(r,"getWeightSpecs",(function(){return y.k})),n.d(r,"http",(function(){return Pt})),n.d(r,"isHTTPScheme",(function(){return Lt})),n.d(r,"loadWeights",(function(){return Ct})),n.d(r,"registerLoadRouter",(function(){return w})),n.d(r,"registerSaveRouter",(function(){return j})),n.d(r,"weightsLoaderFactory",(function(){return Ft})),n.d(r,"withSaveHandler",(function(){return Ht})),n.d(r,"withSaveHandlerSync",(function(){return Zt}));var o={};n.r(o),n.d(o,"fromPixelsAsync",(function(){return oe})),n.d(o,"toPixels",(function(){return ce})),n.d(o,"draw",(function(){return ue})),n.d(o,"fromPixels",(function(){return de}));var c={};n.r(c),n.d(c,"assertParamsValid",(function(){return le})),n.d(c,"maskToAxes",(function(){return pe})),n.d(c,"computeOutShape",(function(){return he})),n.d(c,"stridesWithElidedDims",(function(){return fe})),n.d(c,"getNormalizedAxes",(function(){return ge})),n.d(c,"startIndicesWithElidedDims",(function(){return ye})),n.d(c,"stopIndicesWithElidedDims",(function(){return Oe})),n.d(c,"stridesForAxis",(function(){return je})),n.d(c,"startForAxis",(function(){return we})),n.d(c,"stopForAxis",(function(){return xe})),n.d(c,"isSliceContinous",(function(){return Ne})),n.d(c,"computeFlatOffset",(function(){return ve})),n.d(c,"parseSliceParams",(function(){return Se})),n.d(c,"sliceInfo",(function(){return Te}));var d={};n.r(d),n.d(d,"segOpComputeOptimalWindowSize",(function(){return Cn})),n.d(d,"computeOutShape",(function(){return Fn})),n.d(d,"collectGatherOpShapeInfo",(function(){return Bn}));var l={};n.r(l),n.d(l,"axesAreInnerMostDims",(function(){return Ae.b})),n.d(l,"combineLocations",(function(){return Ae.c})),n.d(l,"computeOutAndReduceShapes",(function(){return Ae.d})),n.d(l,"expandShapeToKeepDim",(function(){return Ae.e})),n.d(l,"assertAxesAreInnerMostDims",(function(){return Ae.a})),n.d(l,"getAxesPermutation",(function(){return Ae.f})),n.d(l,"getUndoAxesPermutation",(function(){return Ae.h})),n.d(l,"getInnerMostAxes",(function(){return Ae.g})),n.d(l,"getBroadcastDims",(function(){return Jt.getBroadcastDims})),n.d(l,"getReductionAxes",(function(){return Jt.getReductionAxes})),n.d(l,"assertAndGetBroadcastShape",(function(){return Jt.assertAndGetBroadcastShape})),n.d(l,"assertParamsConsistent",(function(){return $e})),n.d(l,"computeOutShape",(function(){return Me})),n.d(l,"computeDilation2DInfo",(function(){return Re.e})),n.d(l,"computePool2DInfo",(function(){return Re.f})),n.d(l,"computePool3DInfo",(function(){return Re.g})),n.d(l,"computeConv2DInfo",(function(){return Re.b})),n.d(l,"computeConv3DInfo",(function(){return Re.c})),n.d(l,"computeDefaultPad",(function(){return Re.d})),n.d(l,"tupleValuesAreOne",(function(){return Re.k})),n.d(l,"eitherStridesOrDilationsAreOne",(function(){return Re.i})),n.d(l,"stridesOrDilationsArePositive",(function(){return Re.j})),n.d(l,"convertConv2DDataFormat",(function(){return Re.h})),n.d(l,"checkPadOnDimRoundingMode",(function(){return Re.a})),n.d(l,"getFusedDyActivation",(function(){return Ce.c})),n.d(l,"getFusedBiasGradient",(function(){return Ce.b})),n.d(l,"applyActivation",(function(){return Ce.a})),n.d(l,"shouldFuse",(function(){return Ce.d})),n.d(l,"RowPartitionType",(function(){return De})),n.d(l,"combineRaggedTensorToTensorShapes",(function(){return Fe})),n.d(l,"getRowPartitionTypesHelper",(function(){return Be})),n.d(l,"getRaggedRank",(function(){return Le})),n.d(l,"validateDefaultValueShape",(function(){return ze})),n.d(l,"PARALLELIZE_THRESHOLD",(function(){return Pe})),n.d(l,"computeOptimalWindowSize",(function(){return Ve})),n.d(l,"slice_util",(function(){return c})),n.d(l,"upcastType",(function(){return Ie.d})),n.d(l,"getImageCenter",(function(){return Ue})),n.d(l,"getReshaped",(function(){return We})),n.d(l,"getPermuted",(function(){return Ge})),n.d(l,"getReshapedPermuted",(function(){return qe})),n.d(l,"getSliceBeginCoords",(function(){return Ke})),n.d(l,"getSliceSize",(function(){return He})),n.d(l,"prepareAndValidate",(function(){return Ze})),n.d(l,"validateUpdateShape",(function(){return Je.c})),n.d(l,"validateInput",(function(){return Je.b})),n.d(l,"calculateShapes",(function(){return Je.a})),n.d(l,"SELU_SCALEALPHA",(function(){return Ye})),n.d(l,"SELU_SCALE",(function(){return Qe})),n.d(l,"ERF_P",(function(){return Xe})),n.d(l,"ERF_A1",(function(){return tn})),n.d(l,"ERF_A2",(function(){return en})),n.d(l,"ERF_A3",(function(){return nn})),n.d(l,"ERF_A4",(function(){return rn})),n.d(l,"ERF_A5",(function(){return an})),n.d(l,"warn",(function(){return sn.b})),n.d(l,"log",(function(){return sn.a})),n.d(l,"mergeRealAndImagArrays",(function(){return on})),n.d(l,"splitRealAndImagArrays",(function(){return cn})),n.d(l,"complexWithEvenIndex",(function(){return un})),n.d(l,"complexWithOddIndex",(function(){return dn})),n.d(l,"getComplexWithIndex",(function(){return ln})),n.d(l,"assignToTypedArray",(function(){return pn})),n.d(l,"exponents",(function(){return hn})),n.d(l,"exponent",(function(){return fn})),n.d(l,"decodeEinsumEquation",(function(){return gn})),n.d(l,"getEinsumPermutation",(function(){return yn})),n.d(l,"checkEinsumDimSizes",(function(){return On})),n.d(l,"getEinsumComputePath",(function(){return jn})),n.d(l,"isIdentityPermutation",(function(){return wn})),n.d(l,"prepareSplitSize",(function(){return Nn})),n.d(l,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(function(){return vn})),n.d(l,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(function(){return Sn})),n.d(l,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(function(){return Tn})),n.d(l,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(function(){return kn})),n.d(l,"getSparseReshapeNegativeOutputDimErrorMessage",(function(){return En})),n.d(l,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(function(){return In})),n.d(l,"getSparseReshapeInputOutputMultipleErrorMessage",(function(){return _n})),n.d(l,"getSparseReshapeInputOutputMismatchErrorMessage",(function(){return An})),n.d(l,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(function(){return $n})),n.d(l,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(function(){return Mn})),n.d(l,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(function(){return Dn})),n.d(l,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(function(){return Rn})),n.d(l,"segment_util",(function(){return d})),n.d(l,"fromUint8ToStringArray",(function(){return Ln})),n.d(l,"fromStringArrayToUint8",(function(){return zn}));var h={};n.r(h),n.d(h,"nonMaxSuppressionV3Impl",(function(){return Pn.a})),n.d(h,"nonMaxSuppressionV4Impl",(function(){return Pn.b})),n.d(h,"nonMaxSuppressionV5Impl",(function(){return Pn.c})),n.d(h,"whereImpl",(function(){return Vn.a}));var f=n(890),m=(n(962),n(900)),y=n(912);class O{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==O.instance&&(O.instance=new O),O.instance}static registerSaveRouter(t){O.getInstance().saveRouters.push(t)}static registerLoadRouter(t){O.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return O.getHandlers(t,"save")}static getLoadHandlers(t,e){return O.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?O.getInstance().loadRouters:O.getInstance().saveRouters).forEach((e=>{const o=e(t,n);null!==o&&r.push(o)})),r}}const j=t=>O.registerSaveRouter(t),w=t=>O.registerLoadRouter(t),x=t=>O.getSaveHandlers(t),N=(t,e)=>O.getLoadHandlers(t,e);var v=n(931);const S="tensorflowjs",T="models_store",k="model_info_store";function E(){if(!Object(m.b)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function I(t){const e=t.result;e.createObjectStore(T,{keyPath:"modelPath"}),e.createObjectStore(k,{keyPath:"modelPath"})}class _{constructor(t){if(this.indexedDB=E(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(S,1);r.onupgradeneeded=()=>I(r),r.onsuccess=()=>{const o=r.result;if(null==e){const e=o.transaction(T,"readonly"),r=e.objectStore(T).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return o.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(o.close(),n(r.error)),e.oncomplete=()=>o.close()}else{e.weightData=v.a.join(e.weightData);const r=Object(y.i)(e),c=o.transaction(k,"readwrite");let d,l,h=c.objectStore(k);try{d=h.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(t){return n(t)}d.onsuccess=()=>{l=o.transaction(T,"readwrite");const d=l.objectStore(T);let f;try{f=d.put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r})}catch(t){return n(t)}f.onsuccess=()=>t({modelArtifactsInfo:r}),f.onerror=t=>{h=c.objectStore(k);const e=h.delete(this.modelPath);e.onsuccess=()=>(o.close(),n(f.error)),e.onerror=t=>(o.close(),n(f.error))}},d.onerror=t=>(o.close(),n(d.error)),c.oncomplete=()=>{null==l?o.close():l.oncomplete=()=>o.close()}}},r.onerror=t=>n(r.error)}))}}_.URL_SCHEME="indexeddb://";const A=t=>{return Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(_.URL_SCHEME)?(e=t.slice(_.URL_SCHEME.length),new _(e)):null;var e};O.registerSaveRouter(A),O.registerLoadRouter(A);class ${constructor(){this.indexedDB=E()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(S,1);n.onupgradeneeded=()=>I(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(k,"readonly"),c=o.objectStore(k).getAll();c.onsuccess=()=>{const e={};for(const t of c.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},c.onerror=t=>(r.close(),e(c.error)),o.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(path){var t;return path=(t=path).startsWith(_.URL_SCHEME)?t.slice(_.URL_SCHEME.length):t,new Promise(((t,e)=>{const n=this.indexedDB.open(S,1);n.onupgradeneeded=()=>I(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(k,"readwrite"),c=o.objectStore(k),d=c.get(path);let l;d.onsuccess=()=>{if(null==d.result)return r.close(),e(new Error(`Cannot find model with path '${path}' in IndexedDB.`));{const n=c.delete(path),o=()=>{l=r.transaction(T,"readwrite");const n=l.objectStore(T).delete(path);n.onsuccess=()=>t(d.result.modelArtifactsInfo),n.onerror=t=>e(d.error)};n.onsuccess=o,n.onerror=t=>(o(),r.close(),e(d.error))}},d.onerror=t=>(r.close(),e(d.error)),o.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},n.onerror=t=>e(n.error)}))}}var M=n(899);const D="/",R="tensorflowjs_models",C="info",F="model_topology",B="weight_specs",L="weight_data",z="model_metadata";function P(path){return{info:[R,path,C].join(D),topology:[R,path,F].join(D),weightSpecs:[R,path,B].join(D),weightData:[R,path,L].join(D),modelMetadata:[R,path,z].join(D)}}function V(t){for(const e of Object.values(t))window.localStorage.removeItem(e)}function U(t){const e=t.split(D);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(D)}class W{constructor(t){if(!Object(m.b)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=P(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Object(y.i)(t),o=v.a.join(t.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(y.a)(o));const c={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:null!=t.signature?t.signature:void 0,userDefinedMetadata:null!=t.userDefinedMetadata?t.userDefinedMetadata:void 0,modelInitializer:null!=t.modelInitializer?t.modelInitializer:void 0,initializerSignature:null!=t.initializerSignature?t.initializerSignature:void 0,trainingConfig:null!=t.trainingConfig?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(c)),{modelArtifactsInfo:r}}catch(t){throw V(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const o=this.LS.getItem(this.keys.modelMetadata);if(null!=o){const t=JSON.parse(o);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,null!=t.signature&&(e.signature=t.signature),null!=t.userDefinedMetadata&&(e.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(e.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(e.initializerSignature=t.initializerSignature),null!=t.trainingConfig&&(e.trainingConfig=t.trainingConfig)}const c=this.LS.getItem(this.keys.weightData);if(null==c)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=Object(y.b)(c),e}}W.URL_SCHEME="localstorage://";const G=t=>{return Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(W.URL_SCHEME)?(e=t.slice(W.URL_SCHEME.length),new W(e)):null;var e};O.registerSaveRouter(G),O.registerLoadRouter(G);class K{constructor(){Object(M.c)(Object(m.b)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Object(M.c)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=R+D,n=D+C;for(let i=0;i<this.LS.length;++i){const r=this.LS.key(i);if(r.startsWith(e)&&r.endsWith(n)){t[U(r)]=JSON.parse(this.LS.getItem(r))}}return t}async removeModel(path){var t;const e=P(path=(t=path).startsWith(W.URL_SCHEME)?t.slice(W.URL_SCHEME.length):t);if(null==this.LS.getItem(e.info))throw new Error(`Cannot find model at path '${path}'`);const n=JSON.parse(this.LS.getItem(e.info));return V(e),n}}const H="://";class Z{constructor(){this.managers={}}static getInstance(){return null==Z.instance&&(Z.instance=new Z),Z.instance}static registerManager(t,e){Object(M.c)(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith(H)&&(t=t.slice(0,t.indexOf(H))),Object(M.c)(t.length>0,(()=>"scheme must not be an empty string."));const n=Z.getInstance();Object(M.c)(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=Z.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(Z.getInstance().managers)}}function J(t){if(-1===t.indexOf(H))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Z.getSchemes().join(",")}`);return{scheme:t.split(H)[0],path:t.split(H)[1]}}async function Y(t,e,n=!1){Object(M.c)(t!==e,(()=>`Old path and new path are the same: '${t}'`));const r=O.getLoadHandlers(t);Object(M.c)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${t}.`)),Object(M.c)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`));const o=r[0],c=O.getSaveHandlers(e);Object(M.c)(c.length>0,(()=>`Copying failed because no save handler is found for destination URL ${e}.`)),Object(M.c)(c.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`));const d=c[0],l=J(t).scheme,h=J(t).path,f=l===J(t).scheme,m=await o.load();n&&f&&await Z.getManager(l).removeModel(h);const y=await d.save(m);return n&&!f&&await Z.getManager(l).removeModel(h),y.modelArtifactsInfo}async function Q(){const t=Z.getSchemes(),e={};for(const n of t){const t=await Z.getManager(n).listModels();for(const path in t){e[n+H+path]=t[path]}}return e}async function X(t){const e=J(t);return Z.getManager(e.scheme).removeModel(e.path)}async function tt(t,e){return Y(t,e,!1)}async function et(t,e){return Y(t,e,!0)}var nt=n(995);class at{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(path,t){return fetch(path,t)}now(){return performance.now()}encode(text,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(text)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){"undefined"!=typeof window&&Object(m.b)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(t),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(t=>{if(t.source===window&&t.data.name===this.messageName){t.stopPropagation();(0,this.functionRefs[t.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(t,e)}isTypedArray(a){return Object(nt.a)(a)}}if(Object(m.b)().get("IS_BROWSER")){Object(m.b)().setPlatform("browser",new at);try{Z.registerManager(W.URL_SCHEME,new K)}catch(t){}try{Z.registerManager(_.URL_SCHEME,new $)}catch(t){}}n(1028);var st=n(928),ot=n(905),it=n(949),ct=n(979),ut=n(909);Object(f.b)();const lt={buffer:st.a,cast:ot.a,clone:it.a,print:ct.a};Object(ut.e)(lt);var pt=n(913),ht=n(897),div=n(907),ft=n(895),mt=n(950),bt=n(930),gt=n(929),yt=n(910),Ot=n(903);class jt{constructor(){this.classNameMap={}}static getMap(){return null==jt.instance&&(jt.instance=new jt),jt.instance}static register(t){jt.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function wt(t){Object(M.c)(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),Object(M.c)("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),Object(M.c)(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),jt.register(t)}class xt extends class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}{minimize(t,e=!1,n){const{value:r,grads:o}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:o[t.name]})));this.applyGradients(t)}else this.applyGradients(o);return Object(pt.b)(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return Object(yt.b)(t,e)}dispose(){null!=this.iterations_&&Object(pt.b)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Object(Ot.a)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(xt,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});var Nt=n(951);var vt=n(964),sub=n(901);var St=n(946),Tt=n(981);class kt extends xt{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,i)=>{const n=Array.isArray(t)?t[i].tensor:t[e];if(null==n)return;const r=f.a.registeredVariables[e];Object(pt.g)((()=>{const t=Object(ht.a)(Object(ft.a)(this.c,n),r);r.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Object(pt.e)(Object(Ot.a)(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}const Et=[class extends xt{static get className(){return"Adadelta"}constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=f.a.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,i)=>{const n=f.a.registeredVariables[e];null==this.accumulatedGrads[i]&&(this.accumulatedGrads[i]={originalName:`${e}/accum_grad`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(false)))}),null==this.accumulatedUpdates[i]&&(this.accumulatedUpdates[i]={originalName:`${e}/accum_var`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(false)))});const r=Array.isArray(t)?t[i].tensor:t[e];if(null==r)return;const o=this.accumulatedGrads[i].variable,c=this.accumulatedUpdates[i].variable;Object(pt.g)((()=>{const t=Object(ht.a)(Object(ft.a)(o,this.rho),Object(ft.a)(Object(bt.a)(r),1-this.rho)),e=Object(ft.a)(Object(div.a)(Object(mt.a)(Object(ht.a)(c,this.epsilon)),Object(mt.a)(Object(ht.a)(o,this.epsilon))),r),d=Object(ht.a)(Object(ft.a)(c,this.rho),Object(ft.a)(Object(bt.a)(e),1-this.rho));o.assign(t),c.assign(d);const l=Object(ht.a)(Object(ft.a)(e,-this.learningRate),n);n.assign(l)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Object(pt.b)(this.accumulatedGrads.map((t=>t.variable))),Object(pt.b)(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}},class extends xt{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,i)=>{const n=f.a.registeredVariables[e];if(null==this.accumulatedGrads[i]){const t=!1;this.accumulatedGrads[i]={originalName:`${e}/accumulator`,variable:Object(pt.g)((()=>Object(Nt.a)(n.shape,this.initialAccumulatorValue).variable(t)))}}const r=Array.isArray(t)?t[i].tensor:t[e];if(null==r)return;const o=this.accumulatedGrads[i].variable;Object(pt.g)((()=>{const t=Object(ht.a)(o,Object(bt.a)(r));o.assign(t);const e=Object(ht.a)(Object(ft.a)(Object(div.a)(r,Object(mt.a)(Object(ht.a)(t,f.a.backend.epsilon()))),-this.learningRate),n);n.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Object(pt.b)(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}},class extends xt{static get className(){return"Adam"}constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Object(pt.g)((()=>{this.accBeta1=Object(Ot.a)(e).variable(),this.accBeta2=Object(Ot.a)(n).variable()})),null==r&&(this.epsilon=f.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Object(pt.g)((()=>{const n=Object(sub.a)(1,this.accBeta1),r=Object(sub.a)(1,this.accBeta2);e.forEach(((e,i)=>{const o=f.a.registeredVariables[e];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${e}/m`,variable:Object(pt.g)((()=>Object(gt.a)(o).variable(false)))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${e}/v`,variable:Object(pt.g)((()=>Object(gt.a)(o).variable(false)))});const c=Array.isArray(t)?t[i].tensor:t[e];if(null==c)return;const d=this.accumulatedFirstMoment[i].variable,l=this.accumulatedSecondMoment[i].variable,h=Object(ht.a)(Object(ft.a)(d,this.beta1),Object(ft.a)(c,1-this.beta1)),m=Object(ht.a)(Object(ft.a)(l,this.beta2),Object(ft.a)(Object(bt.a)(c),1-this.beta2)),y=Object(div.a)(h,n),O=Object(div.a)(m,r);d.assign(h),l.assign(m);const j=Object(ht.a)(Object(ft.a)(Object(div.a)(y,Object(ht.a)(Object(mt.a)(O),this.epsilon)),-this.learningRate),o);o.assign(j)})),this.accBeta1.assign(Object(ft.a)(this.accBeta1,this.beta1)),this.accBeta2.assign(Object(ft.a)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Object(pt.b)(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Object(pt.b)(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),Object(pt.g)((()=>{this.accBeta1.assign(Object(vt.a)(this.beta1,this.iterations_+1)),this.accBeta2.assign(Object(vt.a)(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}},class extends xt{static get className(){return"Adamax"}constructor(t,e,n,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Object(pt.g)((()=>{this.iteration=Object(Ot.a)(0).variable(),this.accBeta1=Object(Ot.a)(e).variable()})),null==r&&(this.epsilon=f.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Object(pt.g)((()=>{const n=Object(sub.a)(1,this.accBeta1),r=Object(div.a)(-this.learningRate,Object(ht.a)(Object(ft.a)(this.iteration,this.decay),1));e.forEach(((e,i)=>{const o=f.a.registeredVariables[e];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${e}/m`,variable:Object(gt.a)(o).variable(false)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${e}/v`,variable:Object(gt.a)(o).variable(false)});const c=Array.isArray(t)?t[i].tensor:t[e];if(null==c)return;const d=this.accumulatedFirstMoment[i].variable,l=this.accumulatedWeightedInfNorm[i].variable,h=Object(ht.a)(Object(ft.a)(d,this.beta1),Object(ft.a)(c,1-this.beta1)),m=Object(ft.a)(l,this.beta2),y=Object(St.a)(c),O=Object(Tt.a)(m,y);d.assign(h),l.assign(O);const j=Object(ht.a)(Object(ft.a)(Object(div.a)(r,n),Object(div.a)(h,Object(ht.a)(O,this.epsilon))),o);o.assign(j)})),this.iteration.assign(Object(ht.a)(this.iteration,1)),this.accBeta1.assign(Object(ft.a)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Object(pt.b)(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Object(pt.b)(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}},class extends kt{static get className(){return"Momentum"}constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Object(Ot.a)(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,i)=>{const n=f.a.registeredVariables[e];if(null==this.accumulations[i]){const t=!1;this.accumulations[i]={originalName:`${e}/momentum`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(t)))}}const r=this.accumulations[i].variable,o=Array.isArray(t)?t[i].tensor:t[e];null!=o&&Object(pt.g)((()=>{let t;const e=Object(ht.a)(Object(ft.a)(this.m,r),o);t=this.useNesterov?Object(ht.a)(Object(ft.a)(this.c,Object(ht.a)(o,Object(ft.a)(e,this.m))),n):Object(ht.a)(Object(ft.a)(this.c,e),n),r.assign(e),n.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Object(pt.b)(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}},class extends xt{static get className(){return"RMSProp"}constructor(t,e=.9,n=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=f.a.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,i)=>{const n=f.a.registeredVariables[e],r=!1;null==this.accumulatedMeanSquares[i]&&(this.accumulatedMeanSquares[i]={originalName:`${e}/rms`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(r)))}),null==this.accumulatedMoments[i]&&(this.accumulatedMoments[i]={originalName:`${e}/momentum`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(r)))}),null==this.accumulatedMeanGrads[i]&&this.centered&&(this.accumulatedMeanGrads[i]={originalName:`${e}/mg`,variable:Object(pt.g)((()=>Object(gt.a)(n).variable(r)))});const o=Array.isArray(t)?t[i].tensor:t[e];if(null==o)return;const c=this.accumulatedMeanSquares[i].variable,d=this.accumulatedMoments[i].variable;Object(pt.g)((()=>{const t=Object(ht.a)(Object(ft.a)(c,this.decay),Object(ft.a)(Object(bt.a)(o),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[i].variable,r=Object(ht.a)(Object(ft.a)(e,this.decay),Object(ft.a)(o,1-this.decay)),l=Object(div.a)(Object(ft.a)(o,this.learningRate),Object(mt.a)(Object(sub.a)(t,Object(ht.a)(Object(bt.a)(r),this.epsilon)))),h=Object(ht.a)(Object(ft.a)(d,this.momentum),l);c.assign(t),e.assign(r),d.assign(h);const f=Object(sub.a)(n,h);n.assign(f)}else{const t=Object(ht.a)(Object(ft.a)(c,this.decay),Object(ft.a)(Object(bt.a)(o),1-this.decay)),e=Object(ht.a)(Object(ft.a)(d,this.momentum),Object(div.a)(Object(ft.a)(o,this.learningRate),Object(mt.a)(Object(ht.a)(t,this.epsilon))));c.assign(t),d.assign(e);const r=Object(sub.a)(n,e);n.assign(r)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Object(pt.b)(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Object(pt.b)(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Object(pt.b)(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}},kt];function It(t){return new Promise((t=>setTimeout(t))).then(t)}class _t{constructor(t){if(!Object(m.b)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(_t.URL_SCHEME)&&(t=t.slice(_t.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelJsonFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=v.a.join(t.weightData),n=window.URL.createObjectURL(new Blob([e],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const e=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r=Object(y.j)(t,e),o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),c=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(c.download=this.modelJsonFileName,c.href=o,await It((()=>c.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=n,await It((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Object(y.i)(t)}}}}_t.URL_SCHEME="downloads://";class At{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise(((t,e)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),o=r.modelTopology;if(null==o)return void e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void t({modelTopology:o});const c=Object(y.g)(r,(t=>this.loadWeights(t)));t(c)},n.onerror=t=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(t){const e=[],n=[];for(const r of t)e.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(t),o=n.map((path=>this.loadWeightsFile(path,r[path])));return Promise.all(o).then((t=>[e,t]))}loadWeightsFile(path,t){return new Promise(((e,n)=>{const r=new FileReader;r.onload=t=>{const n=t.target.result;e(n)},r.onerror=t=>n(`Failed to weights data from file of path '${path}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(t){const e=[],n=this.weightsFiles.map((t=>Object(y.c)(t.name))),r={};for(const o of t)o.paths.forEach((path=>{const t=Object(y.c)(path);if(-1!==e.indexOf(t))throw new Error(`Duplicate file basename found in weights manifest: '${t}'`);if(e.push(t),-1===n.indexOf(t))throw new Error(`Weight file with basename '${t}' is not provided.`);r[path]=this.weightsFiles[n.indexOf(t)]}));if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function $t(t){return new At(t)}function Mt(t,e,n,r){!function(t){Object(M.c)(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){Object(M.c)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${t}`)),Object(M.c)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${e}`)),Object(M.c)(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ${e}`))}(n=null==n?0:n,r=null==r?1:r);let o=0;return Promise.all(t.map((c=>(c.then((c=>{const d=n+ ++o/t.length*(r-n);return e(d),c})),c))))}O.registerSaveRouter((t=>Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(_t.URL_SCHEME)?function(t="model"){return new _t(t)}(t.slice(_t.URL_SCHEME.length)):null));var Dt=n(996);async function Rt(t,e){null==e&&(e={});const n=null==e.fetchFunc?Object(m.b)().platform.fetch:e.fetchFunc,r=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),o=(null==e.onProgress?await Promise.all(r):await Mt(r,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(o):await Mt(o,e.onProgress,.5,1)}async function Ct(t,e="",n,r){return Ft((t=>Rt(t,{requestInit:r})))(t,e,n)}function Ft(t){return async(e,n="",r)=>{const o=e.map((()=>!1)),c={},d=null!=r?r.map((()=>!1)):[],l=[];if(e.forEach(((t,e)=>{let n=0;t.weights.forEach((t=>{const h="quantization"in t?t.quantization.dtype:t.dtype,f=Dt.a[h]*M.O(t.shape),m=()=>{o[e]=!0,null==c[e]&&(c[e]=[]),c[e].push({manifestEntry:t,groupOffset:n,sizeBytes:f})};null!=r?r.forEach(((e,n)=>{e===t.name&&(m(),d[n]=!0)})):m(),l.push(t.name),n+=f}))})),!d.every((t=>t))){const t=r.filter(((t,i)=>!d[i]));throw new Error(`Could not find weights in manifest with names: ${t.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const h=o.reduce(((t,e,i)=>(e&&t.push(i),t)),[]),f=[];h.forEach((i=>{e[i].paths.forEach((t=>{const e=n+(n.endsWith("/")?"":"/")+t;f.push(e)}))}));const m=await t(f),O={};let j=0;return h.forEach((i=>{const t=e[i].paths.length,n=new v.a(m.slice(j,j+t));c[i].forEach((t=>{const e=n.slice(t.groupOffset,t.groupOffset+t.sizeBytes),r=Object(y.e)(e,[t.manifestEntry]);for(const t in r)O[t]=r[t]})),j+=t})),O}}class Bt{constructor(path,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Object(M.c)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Object(m.b)().platform.fetch,Object(M.c)(null!=path&&path.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(path)&&Object(M.c)(2===path.length,(()=>`URL paths for http must have a length of 2, (actual length is ${path.length}).`)),this.path=path,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r=Object(y.j)(t,n);if(e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData){const n=v.a.join(t.weightData);e.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const o=await this.fetch(this.path,e);if(o.ok)return{modelArtifactsInfo:Object(y.i)(t),responses:[o]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`)}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Object(y.g)(e,(t=>this.loadWeights(t)))}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),o=n>e?t.substring(n):"";return[r+"/",o]}(e),o=this.weightPathPrefix||n,c=Object(y.k)(t),d=[],l=[];for(const e of t)for(const path of e.paths)null!=this.weightUrlConverter?l.push(this.weightUrlConverter(path)):d.push(o+path+r);this.weightUrlConverter&&d.push(...await Promise.all(l));return[c,await Rt(d,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})]}}function Lt(t){return null!=t.match(Bt.URL_SCHEME_REGEX)}Bt.URL_SCHEME_REGEX=/^https?:\/\//;const zt=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>Lt(t))):Lt(t),n)return Pt(t,e)}return null};function Pt(path,t){return new Bt(path,t)}function Vt(path,t){return Pt(path,t)}O.registerSaveRouter(zt),O.registerLoadRouter(zt);class Ut{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class Wt{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class Gt{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function qt(t,e,n,r){const o=arguments;return new Gt(Kt(...o))}function Kt(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Ut(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ut({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ut({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})}function Ht(t){return new Wt(t)}function Zt(t){return new Wt(t)}var Jt=n(898),Yt=n(891),Qt=n(969),Xt=n(889),te=n(888),ee=n(989);let ne,re=!1;function ae(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,o=!1,c=!1,d=!1,l=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)c=!0;else if(null!=t.getContext)d=!0;else{if(!("undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);l=!0}if(null!=Object(Qt.b)(Yt.gb,f.a.backendName)){const n={pixels:t},r={numChannels:e};return f.a.runKernel(Yt.gb,n,r)}const[h,m]=o?[t.videoWidth,t.videoHeight]:[t.width,t.height];let y,O;if(d)y=t.getContext("2d").getImageData(0,0,h,m).data;else if(r||n)y=t.data;else if(c||o||l){if(null==ne)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");ne=new OffscreenCanvas(1,1).getContext("2d")}else ne=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});ne.canvas.width=h,ne.canvas.height=m,ne.drawImage(t,0,0,h,m),y=ne.getImageData(0,0,h,m).data}if(4===e)O=new Int32Array(y);else{const t=h*m;O=new Int32Array(t*e);for(let i=0;i<t;i++)for(let t=0;t<e;++t)O[i*e+t]=y[4*i+t]}const j=[m,h,e];return Object(ee.a)(O,j,"int32")}function se(t){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(t instanceof ImageBitmap)&&function(t){return null!=t&&0!==t.width&&0!==t.height}(t)&&!function(t){return null!=t&&t.data instanceof Uint8Array}(t)}async function oe(t,e=3){let n=null;if(Object(m.b)().getBool("WRAP_TO_IMAGEBITMAP")&&se(t)){let e;try{e=await createImageBitmap(t,{premultiplyAlpha:"none"})}catch(t){e=null}n=null!=e&&e.width===t.width&&e.height===t.height?e:t}else n=t;return ae(n,e)}function ie(img){if(2!==img.rank&&3!==img.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);const t=2===img.rank?1:img.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==img.dtype&&"int32"!==img.dtype)throw new Error(`Unsupported type for toPixels: ${img.dtype}. Please use float32 or int32 tensors.`)}async function ce(img,canvas){let t=Object(Xt.a)(img,"img","toPixels");if(!(img instanceof ut.a)){const e=t;t=Object(ot.a)(e,"int32"),e.dispose()}ie(t);const[e,n]=t.shape.slice(0,2),r=2===t.rank?1:t.shape[2],data=await t.data(),o="float32"===t.dtype?255:1,c=new Uint8ClampedArray(n*e*4);for(let i=0;i<e*n;++i){const e=[0,0,0,255];for(let n=0;n<r;n++){const c=data[i*r+n];if("float32"===t.dtype){if(c<0||c>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${c}.`)}else if("int32"===t.dtype&&(c<0||c>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${c}.`);1===r?(e[0]=c*o,e[1]=c*o,e[2]=c*o):e[n]=c*o}const n=4*i;c[n+0]=Math.round(e[0]),c[n+1]=Math.round(e[1]),c[n+2]=Math.round(e[2]),c[n+3]=Math.round(e[3])}if(null!=canvas){re||(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),re=!0),canvas.width=n,canvas.height=e;const t=canvas.getContext("2d"),r=new ImageData(c,n,e);t.putImageData(r,0,0)}return t!==img&&t.dispose(),c}function ue(image,canvas,t){let e=Object(Xt.a)(image,"img","draw");if(!(image instanceof ut.a)){const t=e;e=Object(ot.a)(t,"int32"),t.dispose()}ie(e),function(t){const e=(null==t?void 0:t.alpha)||1;if(e>1||e<0)throw new Error(`Alpha value ${e} is suppoed to be in range [0 - 1].`)}(null==t?void 0:t.imageOptions);const n={image:e},r={canvas:canvas,options:t};f.a.runKernel(Yt.T,n,r)}const de=Object(te.b)({fromPixels_:ae});function le(input,t,e){const n=input.shape.length;M.c(n===t.length,(()=>`Error in slice${n}D: Length of begin ${t} must match the rank of the array (${n}).`)),M.c(n===e.length,(()=>`Error in slice${n}D: Length of size ${e} must match the rank of the array (${n}).`));for(let i=0;i<n;++i)M.c(t[i]+e[i]<=input.shape[i],(()=>`Error in slice${n}D: begin[${i}] + size[${i}] (${t[i]+e[i]}) would overflow input.shape[${i}] (${input.shape[i]})`))}function pe(mask){const t=[];let e=0;for(;mask>0;)1&mask&&t.push(e),mask/=2,e++;return t}function he(t,e,n){const r=[];for(let o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function fe(t,e,n,r){const o=[...t];for(let i=o.length;i<r.length;i++)o.push(1);for(let i=0;i<n;i++)0===i?o[e]=1:(o.splice(e,0,1),o.pop());return o}function me(t,e,n){return n<=t?n:n-(e-1)}function be(t,e){const n=[];for(let i=0;i<t;i++)n.push(e+i);return n}function ge(t,e,n,r,o,c,d,l,h){const f=t.length;let m=new Array(f),y=new Array(f),O=new Array(f);if(e.length&&n>0){const h=e[0],f=n+1;m=ye(d,h,f,r,t),y=Oe(l,h,f,o,t),O=fe(c,h,f,t)}else for(let e=0;e<f;e++)m[e]=we(d,r,c,t,e,h),y[e]=xe(l,o,c,t,e,h),O[e]=je(c,e,h);return{begin:m,end:y,strides:O}}function ye(t,e,n,r,o){const c=[...o],d=be(n,e);for(let o=0;o<c.length;o++)if(d.indexOf(o)>-1)c[o]=0;else{const d=me(e,n,o);let l=r[d];t&1<<d&&(l=0),c[o]=l}return c}function Oe(t,e,n,r,o){const c=[...o],d=be(n,e);for(let o=0;o<c.length;o++)if(d.indexOf(o)>-1)c[o]=Number.MAX_SAFE_INTEGER;else{const d=me(e,n,o);let l=r[d];t&1<<d&&(l=Number.MAX_SAFE_INTEGER),c[o]=l}for(let i=0;i<c.length;i++){const t=o[i];c[i]<0&&(c[i]+=t),c[i]=M.j(0,c[i],o[i])}return c}function je(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function we(t,e,n,r,o,c){let d=e[o];const l=n[o]||1;(t&1<<o||c&1<<o||null==d)&&(d=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const h=r[o];return d<0&&(d+=h),d=M.j(0,d,h-1),d}function xe(t,e,n,r,o,c){let d=e[o];const l=n[o]||1;(t&1<<o||c&1<<o||null==d)&&(d=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const h=r[o];return d<0&&(d+=h),d=l>0?M.j(0,d,h):M.j(-1,d,h-1),d}function Ne(t,e,n){let r=n.length;for(let i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(let i=r+1;i<n.length;i++)if(e[i]>0||n[i]!==t[i])return!1;return!0}function ve(t,e){let n=t.length>0?t[t.length-1]:1;for(let i=0;i<t.length-1;i++)n+=t[i]*e[i];return n}function Se(t,e,n){let r;const o=t.shape.length;let c;return r="number"==typeof e?[e,...new Array(o-1).fill(0)]:e.length<o?e.concat(new Array(o-e.length).fill(0)):e.slice(),r.forEach((t=>{M.c(-1!==t,(()=>"slice() does not support negative begin indexing."))})),c=null==n?new Array(o).fill(-1):"number"==typeof n?[n,...new Array(o-1).fill(-1)]:n.length<o?n.concat(new Array(o-n.length).fill(-1)):n,c=c.map(((e,i)=>e>=0?e:(M.c(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${i}.`)),t.shape[i]-r[i]))),[r,c]}function Te(t,e,n,r,o,c,d,l,h){let f;if(null==r?(f=new Array(e.length),f.fill(1)):f=r,null!=d&&0!=(d&d-1))throw new Error("Multiple ellipses in slice is not allowed.");let m=!1;const y={dims:f.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:n.slice(),strides:f.slice(),beginMask:o,endMask:c,ellipsisMask:d,newAxisMask:l,shrinkAxisMask:h};for(let i=0;i<y.dims;i++)m&&0!=(1<<i&l)&&y.numAddAxisAfterEllipsis++,1<<i&d&&(m=!0);m||(y.ellipsisMask|=1<<y.dims,y.dims++);const O={dims:t.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(t,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let n=0;e.beginValid=null!=t.begin,e.endValid=null!=t.end,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let i=0;i<t.dims;i++)if(1<<i&t.ellipsisMask){const r=Math.min(e.dims-(t.dims-i)+1+t.numAddAxisAfterEllipsis,e.dims);for(;n<r;n++)e.begin[n]=0,e.end[n]=0,e.strides[n]=1,e.beginMask|=1<<n,e.endMask|=1<<n,e.finalShapeGatherIndices.push(n),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[n]=i}else if(1<<i&t.newAxisMask)e.finalShapeGatherIndices.push(-2),e.finalShapeGatherIndicesSparse.push(-1);else{if(n===e.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${e.dims} dims, ${e.begin.length}.`);null!=t.begin&&(e.begin[n]=t.begin[i]),null!=t.end&&(e.end[n]=t.end[i]),e.strides[n]=t.strides[i],t.beginMask&1<<i&&(e.beginMask|=1<<n),t.endMask&1<<i&&(e.endMask|=1<<n),t.shrinkAxisMask&1<<i?(e.finalShapeGatherIndices.push(-1),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<n):(e.finalShapeGatherIndices.push(n),e.finalShapeGatherIndicesSparse.push(i)),e.inputShapeGatherIndicesSparse[n]=i,n++}}(y,O);let j=!0,w=!0,x=!0;const N=[],v=[];for(let i=0;i<t.length;++i){if(0===O.strides[i])throw Error(`strides[${i}] must be non-zero`);const e=!!(O.shrinkAxisMask&1<<i),n=t[i];if(-1===n){N.push(e?1:-1);continue}const r=[O.beginMask&1<<i,O.endMask&1<<i],o=[O.strides[i]>0?0:-1,O.strides[i]>0?n:n-1];if(e&&O.strides[i]<=0)throw Error("only stride 1 allowed on non-range indexing.");x=x&&1===O.strides[i];const c=!!(O.beginMask&1<<i&&O.endMask&1<<i);if(O.beginValid&&O.endValid){if(e){const t=O.begin[i]<0?n+O.begin[i]:O.begin[i];if(O.begin[i]=t,O.end[i]=O.begin[i]+1,t<0||t>=n)throw Error(`slice index ${O.begin[i]} of dimension ${i} out of bounds.`)}else O.begin[i]=ke(O.begin[i],0,O.strides[i],n,r,o),O.end[i]=ke(O.end[i],1,O.strides[i],n,r,o);const t=1===O.strides[i]&&0===O.begin[i]&&O.end[i]===n;j=j&&t,w=w&&(0===i&&1===O.strides[i]||t)}else j=j&&1===O.strides[i]&&c,w=w&&(0===i&&1===O.strides[i]||c);let d,l=!1;if(O.beginValid&&O.endValid?(d=O.end[i]-O.begin[i],l=!0):e?(d=1,l=!0):c&&n>=0&&(d=O.strides[i]<0?-n:n,l=!0),l){let t;t=0===d||d<0!=O.strides[i]<0?0:Math.trunc(d/O.strides[i])+(d%O.strides[i]!=0?1:0),N.push(t)}else N.push(-1)}for(let t=0;t<O.finalShapeGatherIndices.length;++t){const e=O.finalShapeGatherIndices[t];e>=0?v.push(N[e]):-2===e&&v.push(1)}return{finalShapeSparse:v.filter(((t,i)=>-2!==O.finalShapeGatherIndices[i])),finalShape:v,isIdentity:j,sliceDim0:w,isSimpleSlice:x,begin:O.begin,end:O.end,strides:O.strides}}function ke(t,e,n,r,o,c){if(o[e])return n>0?c[e]:c[e+1&1];{const e=t<0?r+t:t;return e<c[0]?c[0]:e>c[1]?c[1]:e}}var Ee=n(892),Ie=n(927),_e=n(955),Ae=n(952);function $e(t,e){const n=t[0].length;t.forEach(((t,i)=>{M.c(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${i}] must be the same as the rank of the rest (${n})`))})),M.c(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,i)=>{for(let o=0;o<n;o++)M.c(o===e||t[o]===r[o],(()=>`Error in concat${n}D: Shape of tensors[${i}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${i}.`))}))}function Me(t,e){const n=t[0].slice();for(let i=1;i<t.length;i++)n[e]+=t[i][e];return n}var De,Re=n(908),Ce=n(947);function Fe(t,e,n){let r=new Array;if(null==n&&null==e)return r;if(null==e)for(;r.length<t+n.length;)r.push(-1);else r=e.slice();if(null==n)return r;if(t+n.length!==r.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${t+n.length}, but shape.rank = ${r.length}`);for(let i=1;i<n.length;++i){const o=n[i],c=r[r.length-n.length+i],d=r[c];if(o>=0)if(d>=0){if(d!==o)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${i+t}] = ${o} but shape[${i+t}] = ${d}`)}else r[c]=o}return r}function Be(t){const e={FIRST_DIM_SIZE:De.FIRST_DIM_SIZE,VALUE_ROWIDS:De.VALUE_ROWIDS,ROW_LENGTHS:De.ROW_LENGTHS,ROW_SPLITS:De.ROW_SPLITS,ROW_LIMITS:De.ROW_LIMITS,ROW_STARTS:De.ROW_STARTS},n=[];for(const r of t){if(!(r in e))break;n.push(e[r])}return n}function Le(t){return 0===t.length?0:t[0]===De.FIRST_DIM_SIZE?t.length-1:t.length}function ze(t,e){if(null==t||null==e)return;const n=t.length,r=e.length;if(n>=r)throw new Error(`defaultValue.shape=${t} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let i=0;i<Math.min(n,r-1);++i){const n=t[i],r=e[i+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${t}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${i-t.length}] = ${n} but ragged tensor input.flatValues.shape[${i-t.length}] = ${r}`)}}!function(t){t[t.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",t[t.VALUE_ROWIDS=1]="VALUE_ROWIDS",t[t.ROW_LENGTHS=2]="ROW_LENGTHS",t[t.ROW_SPLITS=3]="ROW_SPLITS",t[t.ROW_LIMITS=4]="ROW_LIMITS",t[t.ROW_STARTS=5]="ROW_STARTS"}(De||(De={}));const Pe=30;function Ve(t){return t<=Pe?t:Object(M.G)(t,Math.floor(Math.sqrt(t)))}function Ue(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function We(t,e,n,r=!0){let o=[];if(r)o=o.concat(e.slice(0)),o.push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);const n=e.length;for(let i=0;i<n;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(n+1))}return o}function Ge(t,e,n=!0){const r=[];if(n){r.push(e);for(let i=e+1;i<t;++i)i<=2*e?(r.push(i),r.push(i-(e+1))):r.push(i)}else{const n=[],o=[];for(let i=1;i<t;++i)i>=2*e+1||i%2==1?o.push(i):n.push(i);r.push(...n),r.push(0),r.push(...o)}return r}function qe(t,e,n,r=!0){const o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(let i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function Ke(t,e){const n=[0];for(let i=0;i<e;++i)n.push(t[i][0]);return n}function He(t,e,n){const r=t.slice(0,1);for(let i=0;i<n;++i)r.push(t[i+1]-e[i][0]-e[i][1]);return r}function Ze(t,e){const n=t.shape.length,r=e.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${n}`);if(0===Object(M.O)(t.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const o=e.shape,c=o[o.length-1];let d=1;for(let i=0;i<o.length-1;++i)d*=o[i];const l=t.shape,h=o.slice();h.pop();let f=1;for(let i=c;i<n;++i)f*=l[i],h.push(l[i]);const m=[...Object(M.k)(t.shape).map((t=>t/f)),1].slice(0,c);return[h,d,f,m]}var Je=n(954);const Ye=1.7580993408473768,Qe=1.0507009873554805,Xe=.3275911,tn=.254829592,en=-.284496736,nn=1.421413741,rn=-1.453152027,an=1.061405429;var sn=n(968);function on(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let i=0;i<n.length;i+=2)n[i]=t[i/2],n[i+1]=e[i/2];return n}function cn(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let i=0;i<t.length;i+=2)e[i/2]=t[i],n[i/2]=t[i+1];return{real:e,imag:n}}function un(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let i=0;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}function dn(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let i=2;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}function ln(t,e){return{real:t[2*e],imag:t[2*e+1]}}function pn(data,t,e,n){data[2*n]=t,data[2*n+1]=e}function hn(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let i=0;i<Math.ceil(t/2);i++){const o=(e?2:-2)*Math.PI*(i/t);n[i]=Math.cos(o),r[i]=Math.sin(o)}return{real:n,imag:r}}function fn(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}const mn="->",bn=/->/g;function gn(t,e){const n=((t=t.replace(/\s/g,"")).length-t.replace(bn,"").length)/mn.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,o]=t.split(mn);Object(M.c)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const c=r.split(","),d=c.length;if(e!==d)throw new Error(`Expected ${d} input tensors, received ${e}`);if(d>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const l=[];for(let i=0;i<o.length;++i){const t=o[i];if(!c.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===l.indexOf(t)&&l.push(t)}for(let i=0;i<r.length;++i){const t=r[i];-1===l.indexOf(t)&&","!==t&&l.push(t)}const h=new Array(c.length);for(let i=0;i<d;++i){if(new Set(c[i].split("")).size!==c[i].length)throw new Error(`Found duplicate axes in input component ${c[i]}. Support for duplicate axes in input is not implemented yet.`);h[i]=[];for(let t=0;t<c[i].length;++t)h[i].push(l.indexOf(c[i][t]))}const f=l.length,m=[];for(let i=o.length;i<f;++i)m.push(i);return{allDims:l,summedDims:m,idDims:h}}function yn(t,e){let n=new Array(t);n.fill(-1);for(let i=0;i<e.length;++i)n[e[i]]=i;const r=[];for(let i=0;i<t;++i)-1===n[i]&&r.push(i);return n=n.filter((t=>-1!==t)),{permutationIndices:n,expandDims:r}}function On(t,e,n){const r=new Array(t);for(let i=0;i<n.length;++i){const t=n[i].shape;for(let n=0;n<e[i].length;++n)void 0===r[e[i][n]]?r[e[i][n]]=t[n]:Object(M.c)(r[e[i][n]]===t[n],(()=>`Expected dimension ${r[e[i][n]]} at axis ${n} of input shaped ${JSON.stringify(t)}, but got dimension ${t[n]}`))}}function jn(t,e){const path=t,n=[];let r=0;0===t.length&&path.push(-1),r=t.length+1;for(let i=0;i<r;++i)n.push([]);const o=[];for(let i=0;i<path.length;++i){const t=xn(e,path[i]);for(const e of t)-1===o.indexOf(e)&&(n[i].push(e),o.push(e))}return{path:path,steps:n}}function wn(t){return t.every(((t,e)=>t===e))}function xn(t,e){const n=[];for(let i=0;i<t.length;++i)0!==t[i].length&&-1===t[i].indexOf(e)&&-1!==e||n.push(i);return n}function Nn(t,e,n=0){let r=[];if("number"==typeof e)Object(M.c)(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(e).fill(t.shape[n]/e);else{const o=e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0);Object(M.c)(o<=1,(()=>"There should be only one negative value in split array."));const c=e.indexOf(-1);if(-1!==c){const r=e.reduce(((a,b)=>b>0?a+b:a));e[c]=t.shape[n]-r}Object(M.c)(t.shape[n]===e.reduce(((a,b)=>a+b)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=e}return r}function vn(t){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${t}`}function Sn(t,e){return`indices(${t}, 0) is invalid: ${e} < 0`}function Tn(t,e,n){return`indices(${t}, 0) is invalid: ${e} >= ${n}`}function kn(t,e){return`only one output dimension may be -1, not both ${t} and ${e}`}function En(t,e){return`size ${t} must be non-negative, not ${e}`}function In(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function _n(t,e){return`Input to reshape is a SparseTensor with ${Object(M.O)(t)}\n  dense values, but the requested shape requires a multiple of ${Object(M.O)(e)}. inputShape=${t} outputShape= ${e}`}function An(t,e){return`Input to reshape is a tensor with ${Object(M.O)(t)} dense values, but the requested shape has ${Object(M.O)(e)}. inputShape=${t} outputShape=${e}`}function $n(){return"segment ids must be >= 0"}function Mn(){return"segment ids are not increasing"}function Dn(t,e){return`Segment id ${t} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function Rn(t,e,n){return`Bad: indices[${t}] == ${e} out of range [0, ${n})`}function Cn(t,e){let n,r=!1;for(t<=Pe?(n=t,r=!0):n=Object(M.G)(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Object(M.G)(t,n+1);return n}function Fn(t,e,n){const r=[],o=t.length;for(let c=0;c<o;c++)c!==e?r.push(t[c]):r.push(n);return r}function Bn(t,e,n,r){const o=e.shape.length,c=t.shape.length;if(0!==r&&(r<-o||r>o))throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${r}`);if(r<0&&(r+=o),r>c)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${c}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let i=0;i<r;++i)if(t.shape[i]!==e.shape[i])throw new Error(`x.shape[${i}]: ${t.shape[i]} should be equal to indices.shape[${i}]: ${e.shape[i]}.`);const d=t.shape[n],l=[];let h=1,f=1,m=1;for(let i=0;i<r;++i)l.push(t.shape[i]),h*=t.shape[i];for(let i=r;i<n;i++)l.push(t.shape[i]),f*=t.shape[i];for(let i=r;i<o;i++)l.push(e.shape[i]);for(let i=n+1;i<c;i++)l.push(t.shape[i]),m*=t.shape[i];return{batchSize:h,sliceSize:m,outerSize:f,dimSize:d,outputShape:l}}function Ln(t){try{return t.map((t=>Object(Ee.decodeString)(t)))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function zn(t){return t.map((s=>Object(Ee.encodeString)(s)))}var Pn=n(948),Vn=n(990),Un=n(970);!function(){for(const t of Et)wt(t)}()},907:function(t,e,n){"use strict";n.d(e,"a",(function(){return div}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(980),h=n(888);const div=Object(h.b)({div_:function(a,b){let t=Object(d.a)(a,"a","div"),e=Object(d.a)(b,"b","div");if([t,e]=Object(c.c)(t,e),"int32"===t.dtype&&"int32"===e.dtype)return Object(l.a)(t,e);const n={a:t,b:e};return r.a.runKernel(o.hc,n,{})}})},908:function(t,e,n){"use strict";n.d(e,"e",(function(){return o})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"c",(function(){return h})),n.d(e,"d",(function(){return f})),n.d(e,"k",(function(){return w})),n.d(e,"i",(function(){return x})),n.d(e,"j",(function(){return N})),n.d(e,"h",(function(){return v})),n.d(e,"a",(function(){return S}));var r=n(899);function o(t,e,n,r,o="NHWC",c){return l(t,[...e,t[3]],n,c,r,null,null,v(o))}function c(t,e,n,r,o,c,d="channelsLast"){const[h,f]=m(e);let y;if("channelsLast"===d)y=[h,f,t[3],t[3]];else{if("channelsFirst"!==d)throw new Error(`Unknown dataFormat ${d}`);y=[h,f,t[1],t[1]]}return l(t,y,n,r,o,c,!1,d)}function d(t,e,n,r,o,c,d="NDHWC"){const[l,f,m]=y(e);let O,j;if("NDHWC"===d)j="channelsLast",O=[l,f,m,t[4],t[4]];else{if("NCDHW"!==d)throw new Error(`Unknown dataFormat ${d}`);j="channelsFirst",O=[l,f,m,t[1],t[1]]}return h(t,O,n,r,o,!1,j,c)}function l(t,e,n,r,o,c,d=!1,l="channelsLast"){let[h,y,w,x]=[-1,-1,-1,-1];if("channelsLast"===l)[h,y,w,x]=t;else{if("channelsFirst"!==l)throw new Error(`Unknown dataFormat ${l}`);[h,x,y,w]=t}const[N,v,,S]=e,[T,k]=m(n),[E,I]=m(r),_=O(N,E),A=O(v,I),{padInfo:$,outHeight:M,outWidth:D}=function(t,e,n,r,o,c,d,l,h){let m,y,O;if("number"==typeof t){m={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const o=function(t,e,n,r,o){null==r&&(r=f(t,e,n));const c=t[0],d=t[1],l=j((c-e+2*r)/n+1,o),h=j((d-e+2*r)/n+1,o);return[l,h]}([e,n],c,r,t,l);y=o[0],O=o[1]}else if("same"===t){y=Math.ceil(e/r),O=Math.ceil(n/o);const t=Math.max(0,(y-1)*r+c-e),l=Math.max(0,(O-1)*o+d-n),h=Math.floor(t/2),f=t-h,j=Math.floor(l/2);m={top:h,bottom:f,left:j,right:l-j,type:"SAME"}}else if("valid"===t)m={top:0,bottom:0,left:0,right:0,type:"VALID"},y=Math.ceil((e-c+1)/r),O=Math.ceil((n-d+1)/o);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const f="channelsLast"===h?t[1][0]:t[2][0],w="channelsLast"===h?t[1][1]:t[2][1],x="channelsLast"===h?t[2][0]:t[3][0],N="channelsLast"===h?t[2][1]:t[3][1];m={top:f,bottom:w,left:x,right:N,type:0===f&&0===w&&0===x&&0===N?"VALID":"EXPLICIT"},y=j((e-c+f+w)/r+1,l),O=j((n-d+x+N)/o+1,l)}}return{padInfo:m,outHeight:y,outWidth:O}}(o,y,w,T,k,_,A,c,l),R=d?S*x:S;let C;return"channelsFirst"===l?C=[h,R,M,D]:"channelsLast"===l&&(C=[h,M,D,R]),{batchSize:h,dataFormat:l,inHeight:y,inWidth:w,inChannels:x,outHeight:M,outWidth:D,outChannels:R,padInfo:$,strideHeight:T,strideWidth:k,filterHeight:N,filterWidth:v,effectiveFilterHeight:_,effectiveFilterWidth:A,dilationHeight:E,dilationWidth:I,inShape:t,outShape:C,filterShape:e}}function h(t,e,n,r,o,c=!1,d="channelsLast",l){let[h,m,w,x,N]=[-1,-1,-1,-1,-1];if("channelsLast"===d)[h,m,w,x,N]=t;else{if("channelsFirst"!==d)throw new Error(`Unknown dataFormat ${d}`);[h,N,m,w,x]=t}const[v,S,T,,k]=e,[E,I,_]=y(n),[A,$,M]=y(r),D=O(v,A),R=O(S,$),C=O(T,M),{padInfo:F,outDepth:B,outHeight:L,outWidth:z}=function(t,e,n,r,o,c,d,l,h,m,y){let O,w,x,N;"valid"===t&&(t=0);if("number"==typeof t){O={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const v=function(t,e,n,r,o,c){null==o&&(o=f(t,e[0],r[0]));const d=[0,0,0,n];for(let n=0;n<3;n++)t[n]+2*o>=e[n]&&(d[n]=j((t[n]-e[n]+2*o)/r[n]+1,c));return d}([e,n,r,1],[l,h,m],1,[o,c,d],t,y);w=v[0],x=v[1],N=v[2]}else{if("same"!==t)throw Error(`Unknown padding parameter: ${t}`);{w=Math.ceil(e/o),x=Math.ceil(n/c),N=Math.ceil(r/d);const t=(w-1)*o+l-e,f=(x-1)*c+h-n,y=(N-1)*d+m-r,j=Math.floor(t/2),v=t-j,S=Math.floor(f/2),T=f-S,k=Math.floor(y/2);O={top:S,bottom:T,left:k,right:y-k,front:j,back:v,type:"SAME"}}}return{padInfo:O,outDepth:w,outHeight:x,outWidth:N}}(o,m,w,x,E,I,_,D,R,C,l),P=c?k*N:k;let V;return"channelsFirst"===d?V=[h,P,B,L,z]:"channelsLast"===d&&(V=[h,B,L,z,P]),{batchSize:h,dataFormat:d,inDepth:m,inHeight:w,inWidth:x,inChannels:N,outDepth:B,outHeight:L,outWidth:z,outChannels:P,padInfo:F,strideDepth:E,strideHeight:I,strideWidth:_,filterDepth:v,filterHeight:S,filterWidth:T,effectiveFilterDepth:D,effectiveFilterHeight:R,effectiveFilterWidth:C,dilationDepth:A,dilationHeight:$,dilationWidth:M,inShape:t,outShape:V,filterShape:e}}function f(t,e,n,r=1){const o=O(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function m(param){return"number"==typeof param?[param,param,param]:2===param.length?[param[0],param[1],1]:param}function y(param){return"number"==typeof param?[param,param,param]:param}function O(t,e){return e<=1?t:t+(t-1)*(e-1)}function j(t,e){if(!e)return Math.trunc(t);switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function w(param){const[t,e,n]=m(param);return 1===t&&1===e&&1===n}function x(t,e){return w(t)||w(e)}function N(t){return m(t).every((t=>t>0))}function v(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error(`Unknown dataFormat ${t}`)}function S(t,e,n){if(null!=n){if("string"==typeof e)throw Error(`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`);if("number"==typeof e)r.c(r.w(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`));else{if("object"!=typeof e)throw Error(`Error in ${t}: Unknown padding parameter: ${e}`);e.forEach((p=>{p.forEach((e=>{r.c(r.w(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`))}))}))}}}},909:function(t,e,n){"use strict";n.d(e,"b",(function(){return y})),n.d(e,"f",(function(){return x})),n.d(e,"e",(function(){return N})),n.d(e,"d",(function(){return v})),n.d(e,"a",(function(){return S})),n.d(e,"c",(function(){return T}));var r=n(975),o=n(899);function c(t,e,n,r){const c=Object(o.k)(e),l=function(t,e,n,r){const c=Object(o.O)(e),l=r[r.length-1],h=new Array(l).fill(0),m=e.length,y="complex64"===n?f(t):t;if(m>1)for(let t=0;t<c/l;t++){const e=t*l;for(let t=0;t<l;t++)h[t]=Math.max(h[t],d(y[e+t],0,n).length)}return h}(t,e,n,c),m=e.length,y=h(t,e,n,c,l),O=["Tensor"];return r&&(O.push(`  dtype: ${n}`),O.push(`  rank: ${m}`),O.push(`  shape: [${e}]`),O.push("  values:")),O.push(y.map((t=>"    "+t)).join("\n")),O.join("\n")}function d(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:Object(o.A)(t)?`'${t}'`:"bool"===n?l(t):parseFloat(t.toFixed(7)).toString(),Object(o.L)(r,e)}function l(t){return 0===t?"false":"true"}function h(t,e,n,r,o,c=!0){const m="complex64"===n?2:1,y=e[0],O=e.length;if(0===O){if("complex64"===n){return[d(f(t)[0],0,n)]}return"bool"===n?[l(t[0])]:[t[0].toString()]}if(1===O){if(y>20){const e=3*m;let r=Array.from(t.slice(0,e)),c=Array.from(t.slice((y-3)*m,y*m));return"complex64"===n&&(r=f(r),c=f(c)),["["+r.map(((t,i)=>d(t,o[i],n))).join(", ")+", ..., "+c.map(((t,i)=>d(t,o[y-3+i],n))).join(", ")+"]"]}return["["+("complex64"===n?f(t):Array.from(t)).map(((t,i)=>d(t,o[i],n))).join(", ")+"]"]}const j=e.slice(1),w=r.slice(1),x=r[0]*m,N=[];if(y>20){for(let i=0;i<3;i++){const e=i*x,r=e+x;N.push(...h(t.slice(e,r),j,n,w,o,!1))}N.push("...");for(let i=y-3;i<y;i++){const e=i*x,r=e+x;N.push(...h(t.slice(e,r),j,n,w,o,i===y-1))}}else for(let i=0;i<y;i++){const e=i*x,r=e+x;N.push(...h(t.slice(e,r),j,n,w,o,i===y-1))}const v=2===O?",":"";N[0]="["+(y>0?N[0]+v:"");for(let i=1;i<N.length-1;i++)N[i]=" "+N[i]+v;let S=",\n";for(let i=2;i<O;i++)S+="\n";return N[N.length-1]=" "+N[N.length-1]+"]"+(c?"":S),N}function f(t){const e=[];for(let i=0;i<t.length;i+=2)e.push([t[i],t[i+1]]);return e}var m=n(892);class y{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=o.O(t),null!=n){const t=n.length;o.c(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||o.o(e,this.size),this.strides=Object(o.k)(t)}set(t,...e){0===e.length&&(e=[0]),o.c(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let i=0;for(const e of t){if(e<0||e>=this.shape[i]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}i++}let e=t[t.length-1];for(let i=0;i<t.length-1;++i)e+=this.strides[i]*t[i];return this.values[e]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let i=0;i<t.length-1;++i)e+=this.strides[i]*t[i];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let i=0;i<e.length-1;++i)e[i]=Math.floor(t/this.strides[i]),t-=e[i]*this.strides[i];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return O().makeTensor(this.values,this.shape,this.dtype)}}let O=null,j=null,w=null;function x(t){O=t}function N(t){j=t}function v(t){w=t}class S{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=o.O(t),this.strides=Object(o.k)(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return j.buffer(this.shape,this.dtype,t)}bufferSync(){return j.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Object(o.U)(this.shape,t,"complex64"===this.dtype)}arraySync(){return Object(o.U)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const data=O().read(this.dataId);if("string"===this.dtype){const t=await data;try{return t.map((b=>m.decodeString(b)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return data}dataToGPU(t){return this.throwIfDisposed(),O().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const data=O().readSync(this.dataId);if("string"===this.dtype)try{return data.map((b=>m.decodeString(b)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return data}async bytes(){this.throwIfDisposed();const data=await O().read(this.dataId);return"string"===this.dtype?data:new Uint8Array(data.buffer)}dispose(){this.isDisposed||(O().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return j.print(this,t)}clone(){return this.throwIfDisposed(),j.clone(this)}toString(t=!1){return c(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),j.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),O().makeVariable(this,t,e,n)}}Object.defineProperty(S,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}),Object(r.a)("Tensor",(()=>S));class T extends S{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!o.a(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);O().disposeTensor(this),this.dataId=t.dataId,O().incRef(this,null)}dispose(){O().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(T,Symbol.hasInstance,{value:t=>t instanceof S&&null!=t.assign&&t.assign instanceof Function})},910:function(t,e,n){"use strict";n.d(e,"a",(function(){return l})),n.d(e,"b",(function(){return d}));var r=n(890),o=n(909),c=(n(889),n(899));function d(t,e){c.c(c.v(t),(()=>"The f passed in variableGrads(f) must be a function")),c.c(null==e||Array.isArray(e)&&e.every((t=>t instanceof o.c)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in r.a.registeredVariables)e.push(r.a.registeredVariables[t])}const d=n?e.filter((t=>!t.trainable)):null,l=e.length;e=e.filter((t=>t.trainable)),c.c(e.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${l} variables is trainable.`));const{value:h,grads:f}=r.a.gradients(t,e,null,!0);c.c(f.some((g=>null!=g)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),c.c(0===h.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${h.rank} tensor`));const m={};return e.forEach(((t,i)=>{null!=f[i]&&(m[t.name]=f[i])})),null!=d&&d.forEach((t=>m[t.name]=null)),{value:h,grads:m}}function l(t){return r.a.customGrad(t)}},912:function(t,e,n){"use strict";(function(t){n.d(e,"f",(function(){return h})),n.d(e,"e",(function(){return f})),n.d(e,"a",(function(){return j})),n.d(e,"b",(function(){return w})),n.d(e,"d",(function(){return x})),n.d(e,"c",(function(){return N})),n.d(e,"j",(function(){return v})),n.d(e,"h",(function(){return S})),n.d(e,"g",(function(){return T})),n.d(e,"i",(function(){return k})),n.d(e,"k",(function(){return E}));var r=n(933),o=n(963),c=n(899),d=n(996),l=n(931);async function h(t,e){const n=[],r=[],o=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let i=0;i<o.length;++i){const c=o[i],d=Array.isArray(t)?t[i].tensor:t[c];if("float32"!==d.dtype&&"int32"!==d.dtype&&"bool"!==d.dtype&&"string"!==d.dtype&&"complex64"!==d.dtype)throw new Error(`Unsupported dtype in weight '${c}': ${d.dtype}`);const l={name:c,shape:d.shape,dtype:d.dtype};if("string"===d.dtype){const t=new Promise((async t=>{const e=await d.bytes(),n=e.reduce(((p,t)=>p+t.length),0)+4*e.length,r=new Uint8Array(n);let o=0;for(let i=0;i<e.length;i++){const t=e[i],n=new Uint8Array(new Uint32Array([t.length]).buffer);r.set(n,o),o+=4,r.set(t,o),o+=t.length}t(r)}));r.push(t)}else r.push(d.data());null!=e&&(l.group=e),n.push(l)}return{data:m(await Promise.all(r)),specs:n}}function f(t,e){const n=new l.a(t),h={};let f,m=0;for(const t of e){const e=t.name,l=t.dtype,y=t.shape,O=Object(c.O)(y);let j;if("quantization"in t){const r=t.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r)||!("scale"in r))throw new Error(`Weight ${t.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==r.dtype)throw new Error(`Weight ${t.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${t.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${l}.`)}const o=d.a[r.dtype],c=n.slice(m,m+O*o),h="uint8"===r.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===l)if("uint8"===r.dtype||"uint16"===r.dtype){j=new Float32Array(h.length);for(let i=0;i<h.length;i++){const t=h[i];j[i]=t*r.scale+r.min}}else{if("float16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type float32.`);void 0===f&&(f=I()),j=f(h)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${e}': ${l}`);if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);j=new Int32Array(h.length);for(let i=0;i<h.length;i++){const t=h[i];j[i]=Math.round(t*r.scale+r.min)}}m+=O*o}else if("string"===l){const e=Object(c.O)(t.shape);j=[];for(let i=0;i<e;i++){const t=new Uint32Array(n.slice(m,m+4))[0];m+=4;const e=new Uint8Array(n.slice(m,m+t));j.push(e),m+=t}}else{const t=d.a[l],c=n.slice(m,m+O*t);if("float32"===l)j=new Float32Array(c);else if("int32"===l)j=new Int32Array(c);else if("bool"===l)j=new Uint8Array(c);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${e}': ${l}`);{j=new Float32Array(c);const t=new Float32Array(j.length/2),image=new Float32Array(j.length/2);for(let i=0;i<t.length;i++)t[i]=j[2*i],image[i]=j[2*i+1];const n=Object(o.a)(t,y,"float32"),d=Object(o.a)(image,y,"float32");h[e]=Object(r.a)(n,d),n.dispose(),d.dispose()}}m+=O*t}"complex64"!==l&&(h[e]=Object(o.a)(j,y,l))}return h}function m(t){if(null===t)throw new Error(`Invalid input value: ${JSON.stringify(t)}`);let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${t.constructor.name}`)}));const r=new Uint8Array(e);let o=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}const y=void 0!==t&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function O(e){return y?t.byteLength(e,"utf8"):new Blob([e]).size}function j(e){if(y)return t.from(e).toString("base64");const n=new Uint8Array(e);let s="";for(let i=0,t=n.length;i<t;i++)s+=String.fromCharCode(n[i]);return btoa(s)}function w(e){if(y){const n=t.from(e,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const s=atob(e),n=new Uint8Array(s.length);for(let i=0;i<s.length;++i)n.set([s.charCodeAt(i)],i);return n.buffer}function x(t){return l.a.join(t)}function N(path){for(path=path.trim();path.endsWith("/");)path=path.slice(0,path.length-1);const t=path.split("/");return t[t.length-1]}function v(t,e){const n={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e};return null!=t.signature&&(n.signature=t.signature),null!=t.userDefinedMetadata&&(n.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(n.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(n.initializerSignature=t.initializerSignature),null!=t.trainingConfig&&(n.trainingConfig=t.trainingConfig),n}function S(t,e,n){const r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy};if(null!=t.trainingConfig&&(r.trainingConfig=t.trainingConfig),null!=t.weightsManifest){if(!e)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=e,r.weightData=n}return null!=t.signature&&(r.signature=t.signature),null!=t.userDefinedMetadata&&(r.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(r.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(r.initializerSignature=t.initializerSignature),r}async function T(t,e){let n,r;return null!=t.weightsManifest&&([n,r]=await e(t.weightsManifest)),S(t,n,r)}function k(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:O(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:O(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:new l.a(t.weightData).byteLength}}function E(t){const e=[];for(const n of t)e.push(...n.weights);return e}function I(){const t=function(){const t=i=>{let t=i<<13,e=0;for(;0==(8388608&t);)e-=8388608,t<<=1;return t&=-8388609,e+=947912704,t|e},e=new Uint32Array(2048);e[0]=0;for(let i=1;i<1024;i++)e[i]=t(i);for(let i=1024;i<2048;i++)e[i]=939524096+(i-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let i=1;i<31;i++)t[i]=i<<23;for(let i=33;i<63;i++)t[i]=2147483648+(i-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let i=0;i<64;i++)t[i]=1024;return t[0]=t[32]=0,t}();return r=>{const o=new ArrayBuffer(4*r.length),c=new Uint32Array(o);for(let o=0;o<r.length;o++){const d=r[o],l=t[n[d>>10]+(1023&d)]+e[d>>10];c[o]=l}return new Float32Array(o)}}}).call(this,n(166).Buffer)},913:function(t,e,n){"use strict";n.d(e,"c",(function(){return l})),n.d(e,"g",(function(){return h})),n.d(e,"b",(function(){return f})),n.d(e,"e",(function(){return m})),n.d(e,"d",(function(){return y})),n.d(e,"f",(function(){return O})),n.d(e,"a",(function(){return j}));var r=n(890),o=n(900),c=n(909),d=n(894);function l(){return r.a}function h(t,e){return r.a.tidy(t,e)}function f(t){Object(d.b)(t).forEach((t=>t.dispose()))}function m(t){return r.a.keep(t)}function y(){return r.a.backendName}function O(t,e,n=1){return r.a.registerBackend(t,e,n)}function j(){return r.a.backend}Object(c.d)((function(t){Object(o.b)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}))},914:function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},918:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(889),d=n(905),l=n(888);const h=Object(l.b)({sum_:function(t,e=null,n=!1){let l=Object(c.a)(t,"x","sum");"bool"===l.dtype&&(l=Object(d.a)(l,"int32"));const h={x:l},f={axis:e,keepDims:n};return r.a.runKernel(o.Uc,h,f)}})},919:function(t,e,n){"use strict";var r;n.d(e,"a",(function(){return r})),function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},927:function(t,e,n){"use strict";var r,o,c,d,l;n.d(e,"d",(function(){return f})),n.d(e,"c",(function(){return m})),n.d(e,"a",(function(){return y})),n.d(e,"b",(function(){return O})),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(r||(r={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(o||(o={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(c||(c={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(d||(d={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(l||(l={}));const h={float32:d,int32:o,bool:c,complex64:l};function f(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return h[t][e]}function m(t){return f(t,"int32")}function y(t){return null!=t&&"object"==typeof t&&"texture"in t&&t.texture instanceof WebGLTexture}function O(t){return"undefined"!=typeof GPUBuffer&&null!=t&&"object"==typeof t&&"buffer"in t&&t.buffer instanceof GPUBuffer}},928:function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(909),o=n(899);function c(t,e="float32",n){return e=e||"float32",o.d(t),new r.b(t,e,n)}},929:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({zerosLike_:function(t){const e={x:Object(c.a)(t,"x","zerosLike")};return r.a.runKernel(o.fd,e)}})},930:function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(890),o=n(889),c=n(888);const d=Object(c.b)({square_:function(t){const e=Object(o.a)(t,"x","square");return r.a.runKernel("Square",{x:e},{})}})},931:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(892);class o{static join(t){return new o(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t)return;if(t instanceof Array||(t=[t]),0===(t=t.map((t=>r.isTypedArray(t)?t.buffer:t))).length)return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let i=0;i<t.length;i++){const n=t[i];i!==t.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=e+n.byteLength;this.shards.push({buffer:n,start:e,end:r}),e=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const n=this.findShardForByte(t);if(-1===n)throw new Error(`Could not find start shard for byte ${t}`);const r=new ArrayBuffer(e-t),o=new Uint8Array(r);let c=0;for(let i=n;i<this.shards.length;i++){const n=this.shards[i],r=t+c-n.start,d=c,l=Math.min(e,n.end)-n.start,h=new Uint8Array(n.buffer,r,l-r);if(o.set(h,d),c+=h.length,e<n.end)break}return r}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(e){return t<e.start?-1:t>=e.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(t,e){let n=0,r=t.length;for(;n<=r;){const o=Math.floor((r-n)/2)+n,c=e(t[o]);if(0===c)return o;c<0?r=o:n=o+1}return-1}(this.shards,e);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}},932:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(927),c=n(899),d=n(892);function l(t,e,n,l){if(null==l)l=Object(c.s)(t);else if("complex64"===l)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Object(o.b)(t)||Object(o.a)(t)){if("float32"!==l&&"int32"!==l)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${l}.`);return r.a.backend.createTensorFromGPUData(t,e||n,l)}if(!Object(d.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Object(c.d)(e);const t=Object(c.O)(e),r=Object(c.O)(n);Object(c.c)(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let i=0;i<n.length;++i){const t=n[i],r=i!==n.length-1||t!==Object(c.O)(e.slice(i));Object(c.c)(n[i]===e[i]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return Object(d.isTypedArray)(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==l?Object(d.toTypedArray)(t,l):Object(d.flatten)(t,[],!0),r.a.makeTensor(t,e,l)}},933:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(889),d=n(899),l=n(888);const h=Object(l.b)({complex_:function(t,e){const n=Object(c.a)(t,"real","complex"),l=Object(c.a)(e,"imag","complex");d.f(n.shape,l.shape,`real and imag shapes, ${n.shape} and ${l.shape}, must match in call to tf.complex().`);const h={real:n,imag:l};return r.a.runKernel(o.z,h)}})},946:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({abs_:function(t){const e=Object(c.a)(t,"x","abs");if("complex64"===e.dtype){const t={x:e};return r.a.runKernel(o.A,t)}{const t={x:e};return r.a.runKernel(o.a,t)}}})},947:function(t,e,n){"use strict";n.d(e,"c",(function(){return w})),n.d(e,"b",(function(){return x})),n.d(e,"a",(function(){return N})),n.d(e,"d",(function(){return v}));var r=n(898),o=n(982),c=n(983),d=n(895),l=n(984),h=n(966),f=n(987),m=n(893),y=n(965),O=n(988),j=n(918);function w(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Object(d.a)(t,Object(O.a)(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function x(t,e){let n=e;const o=r.getReductionAxes(t.shape,e.shape);return o.length>0&&(n=Object(j.a)(n,o)),Object(m.a)(n,t.shape)}function N(t,e,n,r){if("linear"===e)return t;if("relu"===e)return Object(h.a)(t);if("elu"===e)return Object(o.a)(t);if("relu6"===e)return Object(f.a)(t);if("prelu"===e)return Object(l.a)(t,n);if("leakyrelu"===e)return Object(c.a)(t,r);if("sigmoid"===e)return Object(y.a)(t);throw new Error(`Unknown fused activation ${e}.`)}const v=(t,e)=>!(t>0)||"linear"===e},948:function(t,e,n){"use strict";function r(t,element,e){const n=function(t,e,n){return function(t,e,n){let r=0,o=t.length,c=0,d=!1;for(;r<o;){c=r+(o-r>>>1);const l=n(e,t[c]);l>0?r=c+1:(o=c,d=!l)}return d?r:-r-1}(t,e,n||o)}(t,element,e),r=n<0?-(n+1):n;t.splice(r,0,element)}function o(a,b){return a>b?1:a<b?-1:0}function c(t,e,n,r,o){return h(t,e,n,r,o,0)}function d(t,e,n,r,o,c){return h(t,e,n,r,o,0,!1,c,!0)}function l(t,e,n,r,o,c){return h(t,e,n,r,o,c,!0)}function h(t,e,n,o,c,d,l=!1,h=!1,O=!1){const j=[];for(let i=0;i<e.length;i++)e[i]>c&&j.push({score:e[i],boxIndex:i,suppressBeginIndex:0});j.sort(y);const w=d>0?-.5/d:0,x=[],N=[];for(;x.length<n&&j.length>0;){const e=j.pop(),{score:n,boxIndex:d,suppressBeginIndex:l}=e;if(n<c)break;let h=!1;for(let n=x.length-1;n>=l;--n){const r=f(t,d,x[n]);if(r>=o){h=!0;break}if(e.score=e.score*m(o,w,r),e.score<=c)break}e.suppressBeginIndex=x.length,h||(e.score===n?(x.push(d),N.push(e.score)):e.score>c&&r(j,e,y))}const v=x.length,S=n-v;h&&S>0&&(x.push(...new Array(S).fill(0)),N.push(...new Array(S).fill(0)));const T={selectedIndices:x};return l&&(T.selectedScores=N),O&&(T.validOutputs=v),T}function f(t,i,e){const n=t.subarray(4*i,4*i+4),r=t.subarray(4*e,4*e+4),o=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),d=Math.max(n[0],n[2]),l=Math.max(n[1],n[3]),h=Math.min(r[0],r[2]),f=Math.min(r[1],r[3]),m=Math.max(r[0],r[2]),y=Math.max(r[1],r[3]),O=(d-o)*(l-c),j=(m-h)*(y-f);if(O<=0||j<=0)return 0;const w=Math.max(o,h),x=Math.max(c,f),N=Math.min(d,m),v=Math.min(l,y),S=Math.max(N-w,0)*Math.max(v-x,0);return S/(O+j-S)}function m(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function y(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return d})),n.d(e,"c",(function(){return l}))},949:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({clone_:function(t){const e={x:Object(c.a)(t,"x","clone","string_or_numeric")};return r.a.runKernel(o.pb,e)}})},950:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({sqrt_:function(t){const e={x:Object(c.a)(t,"x","sqrt","float32")};return r.a.runKernel(o.Kc,e)}})},951:function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(890),o=n(891),c=n(899);function d(t,e,n){Object(c.d)(t);const d={shape:t,value:e,dtype:n=n||Object(c.s)(e)};return r.a.runKernel(o.cb,{},d)}},952:function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return c})),n.d(e,"d",(function(){return d})),n.d(e,"e",(function(){return l})),n.d(e,"a",(function(){return h})),n.d(e,"f",(function(){return f})),n.d(e,"h",(function(){return m})),n.d(e,"g",(function(){return y}));var r=n(899);function o(t,e){for(let i=0;i<t.length;++i)if(t[t.length-i-1]!==e-1-i)return!1;return!0}function c(t,e,n){const r=t.length+e.length,o=[];let c=0,d=0;for(let l=0;l<r;l++)-1===n.indexOf(l)?o.push(t[c++]):o.push(e[d++]);return o}function d(t,e){const n=[],r=t.length;for(let o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((e=>t[e]))]}function l(t,e){return c(t,e.map((t=>1)),e)}function h(t,e,n){r.c(o(e,n),(()=>`${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`))}function f(t,e){if(o(t,e))return null;const n=[];for(let i=0;i<e;++i)-1===t.indexOf(i)&&n.push(i);return t.forEach((t=>n.push(t))),n}function m(t){return t.map(((t,i)=>[i,t])).sort(((a,b)=>a[1]-b[1])).map((t=>t[0]))}function y(t,e){const n=[];for(let i=e-t;i<e;++i)n.push(i);return n}},953:function(t,e){(function(e){t.exports=e}).call(this,{})},954:function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return d}));var r=n(899);function o(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,c=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(c+` update.rank < ${o}. `);if(t.length<r+(n.rank-o))throw new Error(c+` Output shape length < ${r+(n.rank-o)}`);if(n.rank!==o+t.length-r)throw new Error(c+" update.rank != "+(o+t.length-r));for(let t=0;t<o;++t)if(n.shape[t]!==e.shape[t])throw new Error(c+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-o;++e)if(n.shape[e+o]!==t[e+r])throw new Error(c+` updates.shape[${e+o}] (${n.shape[e+o]}) != shape[${e+o}] (${t[e+o]})`)}function c(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}o(n,e,t)}function d(t,e,n){const o=e.shape.length,c=o>1?e.shape[o-1]:1,d=n.length;let l=1;for(let i=c;i<d;++i)l*=n[i];const h=c<1?1:c;return{sliceRank:c,numUpdates:Object(r.O)(e.shape)/h,sliceSize:l,strides:[...Object(r.k)(n.slice(0,c)),1],outputSize:Object(r.O)(n)}}},955:function(t,e,n){"use strict";n.d(e,"b",(function(){return o.a})),n.d(e,"c",(function(){return f})),n.d(e,"d",(function(){return m})),n.d(e,"e",(function(){return y.a})),n.d(e,"f",(function(){return j})),n.d(e,"g",(function(){return w})),n.d(e,"h",(function(){return x})),n.d(e,"i",(function(){return N})),n.d(e,"j",(function(){return v})),n.d(e,"k",(function(){return S})),n.d(e,"l",(function(){return T})),n.d(e,"m",(function(){return k})),n.d(e,"n",(function(){return I})),n.d(e,"o",(function(){return _})),n.d(e,"p",(function(){return D})),n.d(e,"q",(function(){return R})),n.d(e,"r",(function(){return U})),n.d(e,"w",(function(){return W})),n.d(e,"s",(function(){return G})),n.d(e,"t",(function(){return K})),n.d(e,"u",(function(){return H})),n.d(e,"v",(function(){return Z})),n.d(e,"x",(function(){return J})),n.d(e,"y",(function(){return Y})),n.d(e,"A",(function(){return Q})),n.d(e,"B",(function(){return X})),n.d(e,"C",(function(){return tt.a})),n.d(e,"D",(function(){return A.a})),n.d(e,"E",(function(){return et})),n.d(e,"F",(function(){return at})),n.d(e,"G",(function(){return C.a})),n.d(e,"H",(function(){return st.a})),n.d(e,"I",(function(){return F})),n.d(e,"J",(function(){return ot})),n.d(e,"K",(function(){return it})),n.d(e,"L",(function(){return ct})),n.d(e,"M",(function(){return ut})),n.d(e,"N",(function(){return pt})),n.d(e,"O",(function(){return lt})),n.d(e,"P",(function(){return ft})),n.d(e,"Q",(function(){return mt})),n.d(e,"R",(function(){return gt})),n.d(e,"S",(function(){return yt})),n.d(e,"T",(function(){return Ot})),n.d(e,"V",(function(){return jt})),n.d(e,"W",(function(){return wt})),n.d(e,"X",(function(){return xt})),n.d(e,"Y",(function(){return Nt})),n.d(e,"Z",(function(){return vt})),n.d(e,"ab",(function(){return St})),n.d(e,"bb",(function(){return Tt})),n.d(e,"cb",(function(){return div.a})),n.d(e,"db",(function(){return At})),n.d(e,"eb",(function(){return $t})),n.d(e,"gb",(function(){return Mt})),n.d(e,"hb",(function(){return Dt.a})),n.d(e,"jb",(function(){return Rt})),n.d(e,"kb",(function(){return Et})),n.d(e,"lb",(function(){return Ct})),n.d(e,"mb",(function(){return Kt})),n.d(e,"nb",(function(){return Ht})),n.d(e,"ob",(function(){return Zt})),n.d(e,"pb",(function(){return Jt})),n.d(e,"qb",(function(){return Qt})),n.d(e,"sb",(function(){return nt.a})),n.d(e,"tb",(function(){return Xt})),n.d(e,"ub",(function(){return te.a})),n.d(e,"wb",(function(){return ee})),n.d(e,"yb",(function(){return ne})),n.d(e,"zb",(function(){return re})),n.d(e,"Bb",(function(){return ae})),n.d(e,"Fb",(function(){return se})),n.d(e,"Gb",(function(){return oe})),n.d(e,"Hb",(function(){return ie})),n.d(e,"Ib",(function(){return ce.a})),n.d(e,"Jb",(function(){return ue})),n.d(e,"Kb",(function(){return de})),n.d(e,"Mb",(function(){return le})),n.d(e,"Nb",(function(){return pe})),n.d(e,"Ob",(function(){return he})),n.d(e,"Pb",(function(){return fe})),n.d(e,"Qb",(function(){return ye})),n.d(e,"Rb",(function(){return Oe})),n.d(e,"Sb",(function(){return je})),n.d(e,"Tb",(function(){return we})),n.d(e,"Ub",(function(){return xe})),n.d(e,"Vb",(function(){return Ne})),n.d(e,"Wb",(function(){return ve})),n.d(e,"Yb",(function(){return ke})),n.d(e,"Zb",(function(){return B})),n.d(e,"ac",(function(){return Bt})),n.d(e,"bc",(function(){return Ee})),n.d(e,"cc",(function(){return Ie})),n.d(e,"dc",(function(){return _e})),n.d(e,"ec",(function(){return Ae.a})),n.d(e,"fc",(function(){return $e})),n.d(e,"gc",(function(){return Ce})),n.d(e,"hc",(function(){return Lt})),n.d(e,"ic",(function(){return Fe})),n.d(e,"jc",(function(){return Be})),n.d(e,"kc",(function(){return Le})),n.d(e,"lc",(function(){return ze})),n.d(e,"nc",(function(){return L.a})),n.d(e,"oc",(function(){return Pe})),n.d(e,"pc",(function(){return Ve})),n.d(e,"qc",(function(){return be})),n.d(e,"sc",(function(){return Ue})),n.d(e,"tc",(function(){return We})),n.d(e,"uc",(function(){return De})),n.d(e,"vc",(function(){return Ge})),n.d(e,"xc",(function(){return qe})),n.d(e,"yc",(function(){return Ke})),n.d(e,"zc",(function(){return He})),n.d(e,"Ac",(function(){return Ze})),n.d(e,"Bc",(function(){return Je})),n.d(e,"Cc",(function(){return Ye})),n.d(e,"Dc",(function(){return Xe})),n.d(e,"Ec",(function(){return zt.a})),n.d(e,"Fc",(function(){return tn.a})),n.d(e,"Gc",(function(){return en.a})),n.d(e,"Hc",(function(){return nn})),n.d(e,"Ic",(function(){return rn})),n.d(e,"Jc",(function(){return an})),n.d(e,"Kc",(function(){return sn})),n.d(e,"Lc",(function(){return on})),n.d(e,"Mc",(function(){return pn})),n.d(e,"Nc",(function(){return hn})),n.d(e,"Oc",(function(){return fn})),n.d(e,"Pc",(function(){return mn})),n.d(e,"Qc",(function(){return bn})),n.d(e,"Rc",(function(){return gn})),n.d(e,"Sc",(function(){return yn})),n.d(e,"Tc",(function(){return On})),n.d(e,"Uc",(function(){return jn.a})),n.d(e,"Vc",(function(){return wn.a})),n.d(e,"Wc",(function(){return M.a})),n.d(e,"Xc",(function(){return xn})),n.d(e,"Yc",(function(){return Nn})),n.d(e,"Zc",(function(){return vn})),n.d(e,"ad",(function(){return Sn})),n.d(e,"bd",(function(){return Tn})),n.d(e,"dd",(function(){return kn})),n.d(e,"ed",(function(){return En})),n.d(e,"fd",(function(){return Pt.a})),n.d(e,"id",(function(){return In})),n.d(e,"jd",(function(){return _n})),n.d(e,"kd",(function(){return An})),n.d(e,"ld",(function(){return z.a})),n.d(e,"md",(function(){return $n})),n.d(e,"od",(function(){return Mn})),n.d(e,"pd",(function(){return Dn})),n.d(e,"qd",(function(){return P})),n.d(e,"rd",(function(){return Rn})),n.d(e,"sd",(function(){return Cn})),n.d(e,"td",(function(){return Fn})),n.d(e,"ud",(function(){return Bn})),n.d(e,"vd",(function(){return Ln})),n.d(e,"wd",(function(){return ge})),n.d(e,"xd",(function(){return Qe})),n.d(e,"rb",(function(){return zn})),n.d(e,"Ab",(function(){return Pn})),n.d(e,"Eb",(function(){return Vn})),n.d(e,"cd",(function(){return Wn})),n.d(e,"Bd",(function(){return Un})),n.d(e,"Cd",(function(){return Vt.a})),n.d(e,"Dd",(function(){return Ut.a})),n.d(e,"Ed",(function(){return Gn})),n.d(e,"Fd",(function(){return qn})),n.d(e,"Gd",(function(){return Kn})),n.d(e,"Hd",(function(){return Hn.a})),n.d(e,"Id",(function(){return Zn})),n.d(e,"Kd",(function(){return sub.a})),n.d(e,"Ld",(function(){return Wt.a})),n.d(e,"Md",(function(){return Jn})),n.d(e,"Nd",(function(){return V})),n.d(e,"Od",(function(){return Yn.a})),n.d(e,"Pd",(function(){return Xn})),n.d(e,"Qd",(function(){return er})),n.d(e,"Rd",(function(){return nr.a})),n.d(e,"Sd",(function(){return rr})),n.d(e,"Td",(function(){return ar})),n.d(e,"Ud",(function(){return sr})),n.d(e,"Vd",(function(){return ir})),n.d(e,"Wd",(function(){return Yt})),n.d(e,"Xd",(function(){return cr})),n.d(e,"Zd",(function(){return ur})),n.d(e,"ae",(function(){return dr})),n.d(e,"be",(function(){return lr})),n.d(e,"ce",(function(){return pr})),n.d(e,"de",(function(){return fr})),n.d(e,"ee",(function(){return mr})),n.d(e,"fe",(function(){return It})),n.d(e,"ge",(function(){return yr})),n.d(e,"he",(function(){return Me})),n.d(e,"ie",(function(){return _t.a})),n.d(e,"z",(function(){return Or})),n.d(e,"Yd",(function(){return wr})),n.d(e,"rc",(function(){return qt})),n.d(e,"mc",(function(){return xr})),n.d(e,"gd",(function(){return Nr})),n.d(e,"hd",(function(){return Te})),n.d(e,"zd",(function(){return vr})),n.d(e,"xb",(function(){return Sr})),n.d(e,"fb",(function(){return Tr})),n.d(e,"ib",(function(){return kr})),n.d(e,"U",(function(){return Er})),n.d(e,"Db",(function(){return Ir})),n.d(e,"wc",(function(){return h.b})),n.d(e,"a",(function(){return h.a})),n.d(e,"Cb",(function(){return Oa})),n.d(e,"Lb",(function(){return ja})),n.d(e,"Xb",(function(){return wa})),n.d(e,"Ad",(function(){return ga})),n.d(e,"vb",(function(){return r})),n.d(e,"nd",(function(){return ya})),n.d(e,"yd",(function(){return xa})),n.d(e,"Jd",(function(){return Na}));var r={};n.r(r),n.d(r,"conv2d",(function(){return $r})),n.d(r,"depthwiseConv2d",(function(){return Rr})),n.d(r,"matMul",(function(){return Cr}));var o=n(946),c=n(890),d=n(891),l=n(889),h=n(888);const f=Object(h.b)({acos_:function(t){const e={x:Object(l.a)(t,"x","acos")};return c.a.runKernel(d.b,e)}});const m=Object(h.b)({acosh_:function(t){const e={x:Object(l.a)(t,"x","acosh")};return c.a.runKernel(d.c,e)}});var y=n(897),O=n(899);const j=Object(h.b)({addN_:function(t){O.c(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),O.c(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,i)=>Object(l.a)(t,`tensors${i}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!O.a(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return c.a.runKernel(d.e,r)}});const w=Object(h.b)({all_:function(t,e=null,n=!1){const r={x:Object(l.a)(t,"x","all","bool")},o={axis:e,keepDims:n};return c.a.runKernel(d.f,r,o)}});const x=Object(h.b)({any_:function(t,e=null,n=!1){const r={x:Object(l.a)(t,"x","any","bool")},o={axis:e,keepDims:n};return c.a.runKernel(d.g,r,o)}});const N=Object(h.b)({argMax_:function(t,e=0){const n={x:Object(l.a)(t,"x","argMax")},r={axis:e};return c.a.runKernel(d.h,n,r)}});const v=Object(h.b)({argMin_:function(t,e=0){const n={x:Object(l.a)(t,"x","argMin")},r={axis:e};return c.a.runKernel(d.i,n,r)}});const S=Object(h.b)({asin_:function(t){const e={x:Object(l.a)(t,"x","asin")};return c.a.runKernel(d.j,e)}});const T=Object(h.b)({asinh_:function(t){const e={x:Object(l.a)(t,"x","asinh")};return c.a.runKernel(d.k,e)}});const k=Object(h.b)({atan_:function(t){const e={x:Object(l.a)(t,"x","atan")};return c.a.runKernel(d.l,e)}});var E=n(894);const I=Object(h.b)({atan2_:function(a,b){let t=Object(l.a)(a,"a","atan2"),e=Object(l.a)(b,"b","atan2");[t,e]=Object(E.c)(t,e);const n={a:t,b:e};return c.a.runKernel(d.m,n)}});const _=Object(h.b)({atanh_:function(t){const e={x:Object(l.a)(t,"x","atanh")};return c.a.runKernel(d.n,e)}});var A=n(905),$=n(908),M=n(893);const D=Object(h.b)({avgPool_:function(t,e,n,r,o){const h=Object(l.a)(t,"x","avgPool","float32");O.c($.i(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let f=h,m=!1;3===h.rank&&(m=!0,f=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),O.c(4===f.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${f.rank}.`)),$.a("avgPool",r,o);const y={x:f},j={filterSize:e,strides:n,pad:r,dimRoundingMode:o};let w=c.a.runKernel(d.o,y,j);return w=Object(A.a)(w,h.dtype),m?Object(M.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const R=Object(h.b)({avgPool3d_:function(t,e,n,r,o,h="NDHWC"){const f=Object(l.a)(t,"x","avgPool3d","float32");let m=f,y=!1;4===f.rank&&(y=!0,m=Object(M.a)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),O.c(5===m.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${m.rank}.`)),O.c("NDHWC"===h,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${h}`)),O.c("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),Object($.a)("avgPool3d",r,o);const j={x:m},w={filterSize:e,strides:n,pad:r,dimRoundingMode:o,dataFormat:h};let x=c.a.runKernel(d.p,j,w);return x=Object(A.a)(x,m.dtype),y?Object(M.a)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}});var C=n(949);const F=Object(h.b)({concat_:function(t,e=0){Object(O.c)(t.length>=1,(()=>"Pass at least one tensor to concat"));const n=Object(l.b)(t,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)})),1===n.length)return Object(C.a)(n[0]);const r=n,o={axis:e};return c.a.runKernel(d.B,r,o)}});const B=Object(h.b)({matMul_:function(a,b,t=!1,e=!1){let n=Object(l.a)(a,"a","matMul"),r=Object(l.a)(b,"b","matMul");[n,r]=Object(E.c)(n,r);const o={a:n,b:r},h={transposeA:t,transposeB:e};return c.a.runKernel(d.r,o,h)}});var L=n(895),z=n(965);const P=Object(h.b)({slice_:function(t,e,n){const r=Object(l.a)(t,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const o={x:r},h={begin:e,size:n};return c.a.runKernel(d.Ac,o,h)}});const V=Object(h.b)({tanh_:function(t){const e={x:Object(l.a)(t,"x","tanh","float32")};return c.a.runKernel(d.Wc,e)}});const U=Object(h.b)({basicLSTMCell_:function(t,e,n,data,r,o){const c=Object(l.a)(t,"forgetBias","basicLSTMCell"),d=Object(l.a)(e,"lstmKernel","basicLSTMCell"),h=Object(l.a)(n,"lstmBias","basicLSTMCell"),f=Object(l.a)(data,"data","basicLSTMCell"),m=Object(l.a)(r,"c","basicLSTMCell"),O=Object(l.a)(o,"h","basicLSTMCell"),j=F([f,O],1),w=B(j,d),x=Object(y.a)(w,h),N=x.shape[0],v=x.shape[1]/4,S=[N,v],i=P(x,[0,0],S),T=P(x,[0,v],S),k=P(x,[0,2*v],S),E=P(x,[0,3*v],S),I=Object(y.a)(Object(L.a)(Object(z.a)(i),V(T)),Object(L.a)(m,Object(z.a)(Object(y.a)(c,k))));return[I,Object(L.a)(V(I),Object(z.a)(E))]}});const W=Object(h.b)({batchToSpaceND_:function(t,e,n){const r=Object(l.a)(t,"x","batchToSpaceND"),o=e.reduce(((a,b)=>a*b));O.c(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),O.c(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),O.c(r.shape[0]%o==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${o}`));const h={x:r},f={blockShape:e,crops:n};return c.a.runKernel(d.s,h,f)}});const G=Object(h.b)({batchNorm_:function(t,e,n,r,o,h){null==h&&(h=.001);const f=Object(l.a)(t,"x","batchNorm"),m=Object(l.a)(e,"mean","batchNorm"),y=Object(l.a)(n,"variance","batchNorm");let j,w;null!=o&&(j=Object(l.a)(o,"scale","batchNorm")),null!=r&&(w=Object(l.a)(r,"offset","batchNorm")),O.c(m.rank===y.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),O.c(null==w||m.rank===w.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),O.c(null==j||m.rank===j.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const x=function(t){let e;return e=0===t.rank||1===t.rank?Object(M.a)(t,[1,1,1,t.size]):2===t.rank?Object(M.a)(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?Object(M.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(f),N={x:x,scale:j,offset:w,mean:m,variance:y},v={varianceEpsilon:h},S=c.a.runKernel(d.hb,N,v);return Object(M.a)(S,f.shape)}});const K=Object(h.b)({batchNorm2d_:function(t,e,n,r,o,c){const d=Object(l.a)(t,"x","batchNorm"),h=Object(l.a)(e,"mean","batchNorm"),f=Object(l.a)(n,"variance","batchNorm");let m,y;return null!=o&&(m=Object(l.a)(o,"scale","batchNorm")),null!=r&&(y=Object(l.a)(r,"offset","batchNorm")),O.c(2===d.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${d.rank}.`)),O.c(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${h.rank}.`)),O.c(2===f.rank||1===f.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${f.rank}.`)),null!=m&&O.c(2===m.rank||1===m.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${m.rank}.`)),null!=y&&O.c(2===y.rank||1===y.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${y.rank}.`)),G(d,h,f,y,m,c)}});const H=Object(h.b)({batchNorm3d_:function(t,e,n,r,o,c){const d=Object(l.a)(t,"x","batchNorm"),h=Object(l.a)(e,"mean","batchNorm"),f=Object(l.a)(n,"variance","batchNorm");let m,y;return null!=o&&(m=Object(l.a)(o,"scale","batchNorm")),null!=r&&(y=Object(l.a)(r,"offset","batchNorm")),O.c(3===d.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${d.rank}.`)),O.c(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${h.rank}.`)),O.c(3===f.rank||1===f.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${f.rank}.`)),null!=m&&O.c(3===m.rank||1===m.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${m.rank}.`)),null!=y&&O.c(3===y.rank||1===y.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${y.rank}.`)),G(d,h,f,y,m,c)}});const Z=Object(h.b)({batchNorm4d_:function(t,e,n,r,o,c){const d=Object(l.a)(t,"x","batchNorm"),h=Object(l.a)(e,"mean","batchNorm"),f=Object(l.a)(n,"variance","batchNorm");let m,y;return null!=o&&(m=Object(l.a)(o,"scale","batchNorm")),null!=r&&(y=Object(l.a)(r,"offset","batchNorm")),O.c(4===d.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${d.rank}.`)),O.c(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${h.rank}.`)),O.c(4===f.rank||1===f.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${f.rank}.`)),null!=m&&O.c(4===m.rank||1===m.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${m.rank}.`)),null!=y&&O.c(4===y.rank||1===y.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${y.rank}.`)),G(d,h,f,y,m,c)}});const J=Object(h.b)({bincount_:function(t,e,n){const r=Object(l.a)(t,"x","bincount"),o=Object(l.a)(e,"weights","bincount");O.c("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),O.c(n>=0,(()=>`size must be non-negative, but got ${n}.`)),O.c(o.size===r.size||0===o.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${o.shape}.`));const h={x:r,weights:o},f={size:n};return c.a.runKernel(d.t,h,f)}});const Y=Object(h.b)({bitwiseAnd_:function(t,e){const n=Object(l.a)(t,"x","bitwiseAnd"),r=Object(l.a)(e,"y","bitwiseAnd");if(!Object(O.a)(n.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${r.shape}`);if("int32"!==n.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${r.dtype}`);const o={a:n,b:r};return c.a.runKernel(d.u,o)}});const Q=Object(h.b)({broadcastArgs_:function(t,e){const n=Object(l.a)(t,"s0","broadcastArgs","int32"),r=Object(l.a)(e,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const o={s0:n,s1:r};return c.a.runKernel(d.v,o)}});const X=Object(h.b)({broadcastTo_:function(t,e){let input=Object(l.a)(t,"broadcastTo","x");const n=input.shape;if(Object(O.d)(e),e.length<input.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${input.rank}.`);if(e.length>input.rank){const t=input.shape.slice();for(;t.length<e.length;)t.unshift(1);input=Object(M.a)(input,t)}const r=input.shape,o=Array.from(e);for(let i=e.length-1;i>=0;i--)if(r[i]===e[i])o[i]=1;else if(1!==input.shape[i])throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${e}].`);if(0===o.map(((t,i)=>t>1?i:-1)).filter((i=>i>=0)).length)return Object(C.a)(input);const h={x:input},f={reps:o};return c.a.runKernel(d.Yc,h,f)}});var tt=n(928);const et=Object(h.b)({ceil_:function(t){const e={x:Object(l.a)(t,"x","ceil","float32")};return c.a.runKernel(d.x,e)}});var nt=n(951);const at=Object(h.b)({clipByValue_:function(t,e,n){const r=Object(l.a)(t,"x","clipByValue");if(O.c(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`)),e===n)return Object(nt.a)(r.shape,e,r.dtype);const o={x:r},h={clipValueMin:e,clipValueMax:n};return c.a.runKernel(d.y,o,h)}});var st=n(933);const ot=Object(h.b)({concat1d_:function(t){return F(t,0)}});const it=Object(h.b)({concat2d_:function(t,e){return F(t,e)}});const ct=Object(h.b)({concat3d_:function(t,e){return F(t,e)}});const ut=Object(h.b)({concat4d_:function(t,e){return F(t,e)}});const lt=Object(h.b)({conv2d_:function(t,filter,e,n,r="NHWC",o=[1,1],h){const f=Object(l.a)(t,"x","conv2d","float32"),m=Object(l.a)(filter,"filter","conv2d","float32");let y=f,j=!1;3===f.rank&&(j=!0,y=Object(M.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),O.c(4===y.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${y.rank}.`)),O.c(4===m.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${m.rank}.`)),$.a("conv2d",n,h);const w="NHWC"===r?y.shape[3]:y.shape[1];O.c(w===m.shape[2],(()=>`Error in conv2d: depth of input (${w}) must match input depth for filter ${m.shape[2]}.`)),O.c($.i(e,o),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`)),O.c($.j(o),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),O.c($.j(e),(()=>"Error in conv2D: Strides should be larger than 0."));const x={x:y,filter:m},N={strides:e,pad:n,dataFormat:r,dilations:o,dimRoundingMode:h},v=c.a.runKernel(d.C,x,N);return j?Object(M.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});const pt=Object(h.b)({conv1d_:function(t,filter,e,n,r="NWC",o=1,c){const d=Object(l.a)(t,"x","conv1d"),h=Object(l.a)(filter,"filter","conv1d");let f=d,m=!1;2===d.rank&&(m=!0,f=Object(M.a)(d,[1,d.shape[0],d.shape[1]])),O.c(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),O.c(3===h.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${h.rank}.`)),$.a("conv1d",n,c),O.c(f.shape[2]===h.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${h.shape[1]}.`)),O.c($.i(e,o),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`)),O.c($.j(o),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),O.c($.j(e),(()=>"Error in conv1D: Stride should be larger than 0.")),O.c("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const y=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),j=Object(M.a)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),w=lt(j,y,[1,e],n,"NHWC",[1,o],c);return m?Object(M.a)(w,[w.shape[2],w.shape[3]]):Object(M.a)(w,[w.shape[0],w.shape[2],w.shape[3]])}});const ht=Object(h.b)({conv2DBackpropInput_:function(t,e,filter,n,r,o="NHWC",l){O.c(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let h=t,f=e,m=!1;3===e.rank&&(m=!0,f=Object(M.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]),h=[1,t[0],t[1],t[2]]),O.c(4===h.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${h.length}.`)),O.c(4===f.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${f.rank}`)),O.c(4===filter.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${filter.rank}`));const y="NHWC"===o?h[3]:h[1],j="NHWC"===o?f.shape[3]:f.shape[1];O.c(y===filter.shape[2],(()=>`Error in conv2dDerInput: depth of input (${y}) must match input depth for filter ${filter.shape[2]}.`)),O.c(j===filter.shape[3],(()=>`Error in conv2dDerInput: depth of output (${j}) must match output depth for filter ${filter.shape[3]}.`)),$.a("conv2dDerInput",r,l);const w={dy:f,filter:filter},x={strides:n,pad:r,dataFormat:o,dimRoundingMode:l,inputShape:h},N=c.a.runKernel(d.E,w,x);return m?Object(M.a)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}});const ft=Object(h.b)({conv2dTranspose_:function(t,filter,e,n,r,o){const c=Object(l.a)(t,"x","conv2dTranspose"),d=Object(l.a)(filter,"filter","conv2dTranspose");return ht(e,c,d,n,r,"NHWC",o)}});const mt=Object(h.b)({conv3d_:function(t,filter,e,n,r="NDHWC",o=[1,1,1]){const h=Object(l.a)(t,"x","conv3d"),f=Object(l.a)(filter,"filter","conv3d");let m=h,y=!1;4===h.rank&&(y=!0,m=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),O.c(5===m.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${m.rank}.`)),O.c(5===f.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${f.rank}.`)),O.c(m.shape[4]===f.shape[3],(()=>`Error in conv3d: depth of input (${m.shape[4]}) must match input depth for filter ${f.shape[3]}.`)),O.c(Object($.i)(e,o),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`)),O.c("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),O.c(Object($.j)(o),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),O.c(Object($.j)(e),(()=>"Error in conv3D: Strides should be larger than 0."));const j={x:m,filter:f},w={strides:e,pad:n,dataFormat:r,dilations:o},x=c.a.runKernel(d.F,j,w);return y?Object(M.a)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}});const bt=Object(h.b)({conv3DBackpropInput_:function(t,e,filter,n,r){O.c(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,l=e,h=!1;4===e.rank&&(h=!0,l=Object(M.a)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),o=[1,t[0],t[1],t[2],t[3]]);const f=o[4],m=l.shape[4];O.c(5===o.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`)),O.c(5===l.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${l.rank}`)),O.c(5===filter.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${filter.rank}`)),O.c(f===filter.shape[3],(()=>`Error in conv3dDerInput: depth of input (${f}) must match input depth for filter ${filter.shape[3]}.`)),O.c(m===filter.shape[4],(()=>`Error in conv3dDerInput: depth of output (${m}) must match output depth for filter ${filter.shape[4]}.`));const y={dy:l,filter:filter},j={pad:r,strides:n,inputShape:o},w=c.a.runKernel(d.G,y,j);return h?Object(M.a)(w,[w.shape[1],w.shape[2],w.shape[3],w.shape[4]]):w}});const gt=Object(h.b)({conv3dTranspose_:function(t,filter,e,n,r){const o=Object(l.a)(t,"x","conv3dTranspose"),c=Object(l.a)(filter,"filter","conv3dTranspose");return bt(e,o,c,n,r)}});const yt=Object(h.b)({cos_:function(t){const e={x:Object(l.a)(t,"x","cos","float32")};return c.a.runKernel(d.H,e)}});const Ot=Object(h.b)({cosh_:function(t){const e={x:Object(l.a)(t,"x","cosh","float32")};return c.a.runKernel(d.I,e)}});const jt=Object(h.b)({cumprod_:function(t,e=0,n=!1,r=!1){const o={x:Object(l.a)(t,"x","cumprod")},h={axis:e,exclusive:n,reverse:r};return c.a.runKernel(d.K,o,h)}});const wt=Object(h.b)({cumsum_:function(t,e=0,n=!1,r=!1){const o={x:Object(l.a)(t,"x","cumsum")},h={axis:e,exclusive:n,reverse:r};return c.a.runKernel(d.L,o,h)}});const xt=Object(h.b)({denseBincount_:function(t,e,n,r=!1){const o=Object(l.a)(t,"x","denseBincount"),h=Object(l.a)(e,"weights","denseBincount");O.c("int32"===o.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${o.dtype}`)),O.c(o.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${o.rank}.`)),O.c(n>=0,(()=>`size must be non-negative, but got ${n}.`)),O.c(h.size===o.size||0===h.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${o.shape}, weights shape: ${h.shape}.`));const f={x:o,weights:h},m={size:n,binaryOutput:r};return c.a.runKernel(d.M,f,m)}});const Nt=Object(h.b)({depthToSpace_:function(t,e,n="NHWC"){const r=Object(l.a)(t,"x","depthToSpace","float32"),o="NHWC"===n?r.shape[1]:r.shape[2],h="NHWC"===n?r.shape[2]:r.shape[3],f="NHWC"===n?r.shape[3]:r.shape[1];O.c(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`)),O.c(o*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),O.c(h*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${h} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),O.c(f%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${f} for depthToSpace with input shape ${r.shape}`));const m={x:r},y={blockSize:e,dataFormat:n};return c.a.runKernel(d.N,m,y)}});const vt=Object(h.b)({depthwiseConv2d_:function(t,filter,e,n,r="NHWC",o=[1,1],h){const f=Object(l.a)(t,"x","depthwiseConv2d","float32"),m=Object(l.a)(filter,"filter","depthwiseConv2d","float32");let y=f,j=!1;3===f.rank&&(j=!0,y=Object(M.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),O.c(4===y.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${y.rank}.`)),O.c(4===m.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`));const w="NHWC"===r?y.shape[3]:y.shape[1];O.c(w===m.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${w}) must match the inChannels dimension in filter ${m.shape[2]}.`)),$.a("depthwiseConv2d",n,h);const x={x:y,filter:m},N={strides:e,pad:n,dataFormat:r,dilations:o,dimRoundingMode:h},v=c.a.runKernel(d.O,x,N);return j?Object(M.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});const St=Object(h.b)({diag_:function(t){const e={x:Object(l.a)(t,"x","diag")};return c.a.runKernel(d.R,e)}});const Tt=Object(h.b)({dilation2d_:function(t,filter,e,n,r=[1,1],o="NHWC"){const h=Object(l.a)(t,"x","dilation2d"),f=Object(l.a)(filter,"filter","dilation2d");O.c(3===h.rank||4===h.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${h.rank}.`)),O.c(3===f.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${f.rank}.`)),O.c("NHWC"===o,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`));let m=h,y=!1;3===h.rank&&(m=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),y=!0),O.c(m.shape[3]===f.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${m.shape[3]} vs ${f.shape[2]}`));const j={x:m,filter:f},w={strides:e,pad:n,dilations:r},x=c.a.runKernel(d.S,j,w);return y?Object(M.a)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});var div=n(907),kt=n(898);const Et=Object(h.b)({equal_:function(a,b){let t=Object(l.a)(a,"a","equal","string_or_numeric"),e=Object(l.a)(b,"b","equal","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.W,n)}});const It=Object(h.b)({where_:function(t,a,b){const e=Object(l.a)(a,"a","where"),n=Object(l.a)(b,"b","where"),r=Object(l.a)(t,"condition","where","bool"),o=Object(kt.assertAndGetBroadcastShape)(Object(kt.assertAndGetBroadcastShape)(r.shape,e.shape),n.shape),h={condition:X(r,o),t:X(e,o),e:X(n,o)};return c.a.runKernel(d.uc,h)}});var _t=n(929);const At=Object(h.b)({divNoNan_:function(a,b){let t=Object(l.a)(a,"a","div"),e=Object(l.a)(b,"b","div");[t,e]=Object(E.c)(t,e);const n=Object(div.a)(t,e),r=Object(_t.a)(n),o=Et(e,r);return It(o,r,n)}});const $t=Object(h.b)({dot_:function(t,e){const n=Object(l.a)(t,"t1","dot"),r=Object(l.a)(e,"t2","dot");O.c(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const o=1===n.rank?n.size:n.shape[1],c=1===r.rank?r.size:r.shape[0];if(O.c(o===c,(()=>`Error in dot: inner dimensions of inputs must match, but got ${o} and ${c}.`)),1===n.rank&&1===r.rank){const t=Object(M.a)(n,[1,-1]),e=Object(M.a)(r,[-1,1]),o=B(t,e);return Object(M.a)(o,[])}if(1===n.rank&&2===r.rank){const t=Object(M.a)(n,[1,-1]),e=Object(M.a)(r,[r.shape[0],r.shape[1]]),o=B(t,e);return Object(M.a)(o,[o.size])}if(2===n.rank&&1===r.rank){const t=Object(M.a)(r,[-1,1]),e=B(n,t);return Object(M.a)(e,[e.size])}{const t=Object(M.a)(r,[r.shape[0],r.shape[1]]);return B(n,t)}}});const Mt=Object(h.b)({einsum_:function(t,...e){const n=e.map(((t,i)=>Object(l.a)(t,`tensors${i}`,"einsum"))),r={equation:t};return c.a.runKernel(d.U,n,r)}});var Dt=n(982);const Rt=Object(h.b)({ensureShape_:function(t,e){const n=Object(l.a)(t,"x","ensureShape","string_or_numeric");if(!Object(O.b)(n.shape,e))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${e}`);return t}});const Ct=Object(h.b)({erf_:function(t){let e=Object(l.a)(t,"x","erf");O.c("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=Object(A.a)(e,"float32"));const n={x:e};return c.a.runKernel(d.X,n)}});var Ft=n(952);const Bt=Object(h.b)({max_:function(t,e=null,n=!1){const r={x:Object(l.a)(t,"x","max")},o={reductionIndices:e,keepDims:n};return c.a.runKernel(d.Eb,r,o)}});const Lt=Object(h.b)({min_:function(t,e=null,n=!1){const r={x:Object(l.a)(t,"x","min")},o={axis:e,keepDims:n};return c.a.runKernel(d.Kb,r,o)}});var zt=n(964),Pt=n(903),Vt=n(950),Ut=n(930),Wt=n(918);function Gt(t,p,e=null){if(0===t.rank)return Object(o.a)(t);if(1!==t.rank&&null===e)return Gt(Object(M.a)(t,[-1]),p,e);if(1===t.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===p)return Object(Wt.a)(Object(o.a)(t),e);if(p===1/0)return Bt(Object(o.a)(t),e);if(p===-1/0)return Lt(Object(o.a)(t),e);if("euclidean"===p||2===p)return Object(Vt.a)(Object(Wt.a)(Object(zt.a)(Object(o.a)(t),Object(Pt.a)(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${p}`)}if(Array.isArray(e)&&2===e.length){if(1===p)return Bt(Object(Wt.a)(Object(o.a)(t),e[0]),e[1]-1);if(p===1/0)return Bt(Object(Wt.a)(Object(o.a)(t),e[1]),e[0]);if(p===-1/0)return Lt(Object(Wt.a)(Object(o.a)(t),e[1]),e[0]);if("fro"===p||"euclidean"===p)return Object(Vt.a)(Object(Wt.a)(Object(Ut.a)(t),e));throw new Error(`Error in norm: invalid ord value: ${p}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const qt=Object(h.b)({norm_:function(t,e="euclidean",n=null,r=!1){const o=Gt(t=Object(l.a)(t,"x","norm"),e,n);let c=o.shape;if(r){const e=Object(O.I)(n,t.shape);c=Ft.e(o.shape,e)}return Object(M.a)(o,c)}});const Kt=Object(h.b)({euclideanNorm_:function(t,e=null,n=!1){return qt(t,"euclidean",e,n)}});const Ht=Object(h.b)({exp_:function(t){const e={x:Object(l.a)(t,"x","exp")};return c.a.runKernel(d.Y,e)}});const Zt=Object(h.b)({expandDims_:function(t,e=0){const n=Object(l.a)(t,"x","expandDims","string_or_numeric");O.c(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},o={dim:e};return c.a.runKernel(d.Z,r,o)}});const Jt=Object(h.b)({expm1_:function(t){const e={x:Object(l.a)(t,"x","expm1")};return c.a.runKernel(d.ab,e)}});const Yt=Object(h.b)({tile_:function(t,e){const n=Object(l.a)(t,"x","tile","string_or_numeric");O.c(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r={x:n},o={reps:e};return c.a.runKernel(d.Yc,r,o)}});const Qt=Object(h.b)({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const o=Object(tt.a)([t,e],r),c=t<=e?t:e;for(let i=0;i<c;++i)o.set(1,i,i);const d=Object(M.a)(o.toTensor(),[t,e]);if(null==n)return d;if(1===n.length)return Yt(Zt(d,0),[n[0],1,1]);if(2===n.length)return Yt(Zt(Zt(d,0),0),[n[0],n[1],1,1]);if(3===n.length)return Yt(Zt(Zt(Zt(d,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Xt=Object(h.b)({floor_:function(t){const e={x:Object(l.a)(t,"x","floor","float32")};return c.a.runKernel(d.eb,e)}});var te=n(980);const ee=Object(h.b)({gather_:function(t,e,n=0,r=0){const o={x:Object(l.a)(t,"x","gather"),indices:Object(l.a)(e,"indices","gather","int32")},h={axis:n,batchDims:r};return c.a.runKernel(d.lb,o,h)}});const ne=Object(h.b)({greater_:function(a,b){let t=Object(l.a)(a,"a","greater","string_or_numeric"),e=Object(l.a)(b,"b","greater","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.mb,n)}});const re=Object(h.b)({greaterEqual_:function(a,b){let t=Object(l.a)(a,"a","greaterEqual","string_or_numeric"),e=Object(l.a)(b,"b","greaterEqual","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.nb,n)}});const ae=Object(h.b)({imag_:function(input){const t={input:Object(l.a)(input,"input","imag")};return c.a.runKernel(d.qb,t)}});const se=Object(h.b)({isFinite_:function(t){const e={x:Object(l.a)(t,"x","isFinite")};return c.a.runKernel(d.rb,e)}});const oe=Object(h.b)({isInf_:function(t){const e={x:Object(l.a)(t,"x","isInf")};return c.a.runKernel(d.sb,e)}});const ie=Object(h.b)({isNaN_:function(t){const e={x:Object(l.a)(t,"x","isNaN")};return c.a.runKernel(d.tb,e)}});var ce=n(983);const ue=Object(h.b)({less_:function(a,b){let t=Object(l.a)(a,"a","less","string_or_numeric"),e=Object(l.a)(b,"b","less","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.wb,n)}});const de=Object(h.b)({lessEqual_:function(a,b){let t=Object(l.a)(a,"a","lessEqual","string_or_numeric"),e=Object(l.a)(b,"b","lessEqual","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.xb,n)}});function le(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return c.a.runKernel(d.yb,{},r)}const pe=Object(h.b)({localResponseNormalization_:function(t,e=5,n=1,r=1,o=.5){const h=Object(l.a)(t,"x","localResponseNormalization");O.c(4===h.rank||3===h.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${h.rank}.`)),O.c(O.w(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let f=h,m=!1;3===h.rank&&(m=!0,f=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]]));const y={x:f},j={depthRadius:e,bias:n,alpha:r,beta:o},w=c.a.runKernel(d.ub,y,j);return m?Object(M.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const he=Object(h.b)({log_:function(t){const e={x:Object(l.a)(t,"x","log","float32")};return c.a.runKernel(d.zb,e)}});const fe=Object(h.b)({log1p_:function(t){const e={x:Object(l.a)(t,"x","log1p")};return c.a.runKernel(d.Ab,e)}});var me=n(910);const be=Object(h.b)({neg_:function(t){const e={x:Object(l.a)(t,"x","neg")};return c.a.runKernel(d.Qb,e)}});const ge=Object(h.b)({softplus_:function(t){const e={x:Object(l.a)(t,"x","softplus")};return c.a.runKernel(d.Cc,e)}});const ye=Object(h.b)({logSigmoid_:function(t){const e=Object(l.a)(t,"x","logSigmoid"),n=Object(me.a)((t=>({value:be(ge(be(t))),gradFunc:e=>Object(L.a)(e,Object(z.a)(be(t)))})));return n(e)}});var sub=n(901);const Oe=Object(h.b)({logSoftmax_:function(t,e=-1){const n=Object(l.a)(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r=Object(me.a)(((t,n)=>{const r=Bt(t,e,!0),o=Object(sub.a)(t,r),c=Object(sub.a)(Object(A.a)(o,"float32"),he(Object(Wt.a)(Ht(o),e,!0)));n([c]);return{value:c,gradFunc:(t,n)=>{const[r]=n,o=Ht(r);return Object(sub.a)(t,Object(L.a)(Object(Wt.a)(t,e,!0),o))}}}));return r(n)}});const je=Object(h.b)({logSumExp_:function(t,e=null,n=!1){const r=Object(l.a)(t,"x","logSumExp"),o=Object(O.I)(e,r.shape),c=Bt(r,o,!0),a=Object(sub.a)(r,c),b=Ht(a),d=Object(Wt.a)(b,o),h=he(d),f=Object(y.a)(Object(M.a)(c,h.shape),h);if(n){const t=Object(Ft.e)(f.shape,o);return Object(M.a)(f,t)}return f}});const we=Object(h.b)({logicalAnd_:function(a,b){const t=Object(l.a)(a,"a","logicalAnd","bool"),e=Object(l.a)(b,"b","logicalAnd","bool");Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.Bb,n)}});const xe=Object(h.b)({logicalNot_:function(t){const e={x:Object(l.a)(t,"x","logicalNot","bool")};return c.a.runKernel(d.Cb,e)}});const Ne=Object(h.b)({logicalOr_:function(a,b){const t=Object(l.a)(a,"a","logicalOr","bool"),e=Object(l.a)(b,"b","logicalOr","bool");Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.Db,n)}});const ve=Object(h.b)({logicalXor_:function(a,b){const t=Object(l.a)(a,"a","logicalXor","bool"),e=Object(l.a)(b,"b","logicalXor","bool");return Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape),we(Ne(a,b),xe(we(a,b)))}}),Se=2147483648;const Te=Object(h.b)({searchSorted_:function(t,e,n="left"){const r=Object(l.a)(t,"sortedSequence","searchSorted"),o=Object(l.a)(e,"values","searchSorted"),h=r.shape[r.shape.length-1],f=o.shape[o.shape.length-1],m=Object(M.a)(r,[-1,h]),y=Object(M.a)(o,[-1,f]);if(m.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(m.shape[0]!==y.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Object(O.O)(y.shape)>=Se)throw new Error("values tensor size must less than 2147483648");if(m.shape[1]>=Se)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${m.shape[1]}`);const j={sortedSequence:m,values:y},w={side:n};return c.a.runKernel(d.tc,j,w)}});function ke(t,e){return Te(t,e,"left")}const Ee=Object(h.b)({maxPool_:function(t,e,n,r,o){const h=Object(l.a)(t,"x","maxPool");let f=h,m=!1;3===h.rank&&(m=!0,f=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),O.c(4===f.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${f.rank}.`)),O.c($.i(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),$.a("maxPool",r,o);const y={x:f},j={filterSize:e,strides:n,pad:r,dimRoundingMode:o},w=c.a.runKernel(d.Fb,y,j);return m?Object(M.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Ie=Object(h.b)({maxPool3d_:function(t,e=[1,1,1],n,r,o,h="NDHWC"){const f=Object(l.a)(t,"x","maxPool3d");let m=f,y=!1;4===f.rank&&(y=!0,m=Object(M.a)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),O.c(5===m.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${m.rank}.`)),O.c("NDHWC"===h,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${h}`)),Object($.a)("maxPool3d",r,o);const j={x:m},w={filterSize:e,strides:n,pad:r,dimRoundingMode:o,dataFormat:h},x=c.a.runKernel(d.Gb,j,w);return y?Object(M.a)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}});const _e=Object(h.b)({maxPoolWithArgmax_:function(t,e,n,r,o=!1){const h={x:Object(l.a)(t,"x","maxPoolWithArgmax")},f={filterSize:e,strides:n,pad:r,includeBatchInIndex:o},m=c.a.runKernel(d.Hb,h,f);return{result:m[0],indexes:m[1]}}});var Ae=n(981);const $e=Object(h.b)({mean_:function(t,e=null,n=!1){const r={x:Object(l.a)(t,"x","mean")},o={axis:e,keepDims:n};return c.a.runKernel(d.Jb,r,o)}});function Me(t,e="float32"){if(Object(O.d)(t),"complex64"===e){const e=Me(t,"float32"),n=Me(t,"float32");return Object(st.a)(e,n)}const n=Object(O.F)(Object(O.O)(t),e);return c.a.makeTensor(n,t,e)}function De(t,e="float32"){if(Object(O.d)(t),"complex64"===e){const e=De(t,"float32"),n=Me(t,"float32");return Object(st.a)(e,n)}const n=Object(O.D)(Object(O.O)(t),e);return c.a.makeTensor(n,t,e)}var Re=n(909);function Ce(t,e,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===t)return[];let r=Object(l.a)(t,"x","meshgrid",t instanceof Re.a?t.dtype:"float32");if(void 0===e)return[r];let o=Object(l.a)(e,"y","meshgrid",e instanceof Re.a?e.dtype:"float32");const c=Object(O.O)(r.shape),d=Object(O.O)(o.shape);return"xy"===n?(r=Object(M.a)(r,[1,-1]),o=Object(M.a)(o,[-1,1]),[B(De([d,1],r.dtype),r),B(o,De([1,c],o.dtype))]):(r=Object(M.a)(r,[-1,1]),o=Object(M.a)(o,[1,-1]),[B(r,De([1,d],r.dtype)),B(De([c,1],o.dtype),o)])}const Fe=Object(h.b)({minimum_:function(a,b){let t=Object(l.a)(a,"a","minimum"),e=Object(l.a)(b,"b","minimum");[t,e]=Object(E.c)(t,e),"bool"===t.dtype&&(t=Object(A.a)(t,"int32"),e=Object(A.a)(e,"int32")),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.Lb,n)}});const Be=Object(h.b)({mirrorPad_:function(t,e,n){O.c("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Object(l.a)(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");O.c(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const o="reflect"===n?1:0;for(let i=0;i<r.rank;i++)O.c(2===e[i].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),O.c(e[i][0]>=0&&e[i][0]<=r.shape[i]-o&&e[i][1]>=0&&e[i][1]<=r.shape[i]-o,(()=>`Padding in dimension ${i} cannot be greater than or equal to ${r.shape[i]-o} or less than 0 for input of shape ${r.shape}`));const h={paddings:e,mode:n},f={x:r};return c.a.runKernel(d.Mb,f,h)}});const Le=Object(h.b)({mod_:function(a,b){let t=Object(l.a)(a,"a","mod"),e=Object(l.a)(b,"b","mod");[t,e]=Object(E.c)(t,e);const n={a:t,b:e};return c.a.runKernel(d.Nb,n)}});const ze=Object(h.b)({moments_:function(t,e=null,n=!1){t=Object(l.a)(t,"x","moments");const r=Object(O.I)(e,t.shape),o=$e(t,r,n);let c=o.shape;n||(c=Object(Ft.e)(o.shape,r));const d=Object(Ut.a)(Object(sub.a)(Object(A.a)(t,"float32"),Object(M.a)(o,c)));return{mean:o,variance:$e(d,r,n)}}});const Pe=Object(h.b)({multiRNNCell_:function(t,data,e,n){const r=Object(l.a)(data,"data","multiRNNCell"),o=Object(l.b)(e,"c","multiRNNCell"),c=Object(l.b)(n,"h","multiRNNCell");let input=r;const d=[];for(let i=0;i<t.length;i++){const output=t[i](input,o[i],c[i]);d.push(output[0]),d.push(output[1]),input=output[1]}const h=[],f=[];for(let i=0;i<d.length;i+=2)h.push(d[i]),f.push(d[i+1]);return[h,f]}});const Ve=Object(h.b)({multinomial_:function(t,e,n,r=!1){const o=Object(l.a)(t,"logits","multinomial"),h=o.size,f=o.rank;if(h<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${h}.`);if(f>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${f}`);n=n||Math.random();const m={logits:1===f?Object(M.a)(o,[1,-1]):o},y={numSamples:e,seed:n,normalized:r},O=c.a.runKernel(d.Ob,m,y);return 1===f?Object(M.a)(O,[O.size]):O}});const Ue=Object(h.b)({notEqual_:function(a,b){let t=Object(l.a)(a,"a","notEqual","string_or_numeric"),e=Object(l.a)(b,"b","notEqual","string_or_numeric");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.Ub,n)}});const We=Object(h.b)({oneHot_:function(t,e,n=1,r=0,o="int32"){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const h={indices:Object(l.a)(t,"indices","oneHot","int32")},f={dtype:o,depth:e,onValue:n,offValue:r};return c.a.runKernel(d.Vb,h,f)}});const Ge=Object(h.b)({onesLike_:function(t){const e={x:Object(l.a)(t,"x","onesLike")};return c.a.runKernel(d.Wb,e)}});const qe=Object(h.b)({outerProduct_:function(t,e){const n=Object(l.a)(t,"v1","outerProduct"),r=Object(l.a)(e,"v2","outerProduct");O.c(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const o=Object(M.a)(n,[-1,1]),c=Object(M.a)(r,[1,-1]);return B(o,c)}});const Ke=Object(h.b)({pad_:function(t,e,n=0){const r=Object(l.a)(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:e,constantValue:n},h={x:r};return c.a.runKernel(d.Yb,h,o)}});const He=Object(h.b)({pad1d_:function(t,e,n=0){return Object(O.c)(2===e.length,(()=>"Invalid number of paddings. Must be length of 2.")),Ke(t,[e],n)}});const Ze=Object(h.b)({pad2d_:function(t,e,n=0){return Object(O.c)(2===e.length&&2===e[0].length&&2===e[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ke(t,e,n)}});const Je=Object(h.b)({pad3d_:function(t,e,n=0){return Object(O.c)(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ke(t,e,n)}});const Ye=Object(h.b)({pad4d_:function(t,e,n=0){return Object(O.c)(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ke(t,e,n)}});const Qe=Object(h.b)({spaceToBatchND_:function(t,e,n){const r=Object(l.a)(t,"x","spaceToBatchND");O.c(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),O.c(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),O.c(r.shape.reduce(((a,b,i)=>i>0&&i<=e.length?a&&(b+n[i-1][0]+n[i-1][1])%e[i-1]==0:a),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const o={x:r},h={blockShape:e,paddings:n};return c.a.runKernel(d.Dc,o,h)}});const Xe=Object(h.b)({pool_:function(input,t,e,n,r,o,c){null==r&&(r=[1,1]),null==o&&(o=1),0===n&&(n="valid");const d=Object(l.a)(input,"x","maxPool");let h=d,f=!1;3===d.rank&&(f=!0,h=Object(M.a)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),O.c($.i(o,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`));const m=$.f(h.shape,t,o,r,n),y=[m.dilationHeight,m.dilationWidth];let j;j="same"===n?function(t,e){const n=t.map(((s,i)=>s+(s-1)*(e[i]-1))).map((s=>s-1)),r=n.map((s=>Math.floor(s/2))),o=n.map(((s,i)=>s-r[i]));return n.map(((t,i)=>[r[i],o[i]]))}([m.filterHeight,m.filterWidth],y):[[0,0],[0,0]];const w=1===y[0]&&1===y[1],[x,N]=function(t,e,n){const r=n.map((b=>b[0])),o=n.map((b=>b[1])),c=t.concat(r,o),d=e.map(((b,i)=>(b-c[i]%b)%b)),l=o.map(((s,i)=>s+d[i])),h=e.map(((t,i)=>[r[i],l[i]])),f=e.map(((t,i)=>[0,d[i]]));return[h,f]}([m.inHeight,m.inWidth],y,j),v=w?n:"valid",S=w?h:Qe(h,y,x),T=("avg"===e?()=>D(S,t,o,v,c):()=>Ee(S,t,o,v,c))(),k=w?T:W(T,y,N);return f?Object(M.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}});var tn=n(984),en=n(979);const nn=Object(h.b)({prod_:function(t,e=null,n=!1){let r=Object(l.a)(t,"x","prod");"bool"===r.dtype&&(r=Object(A.a)(r,"int32"));const o={x:r},h={axis:e,keepDims:n};return c.a.runKernel(d.bc,o,h)}});const rn=Object(h.b)({raggedGather_:function(t,e,n,r){const o={paramsNestedSplits:t.map(((t,i)=>Object(l.a)(t,`tensors${i}`,"raggedGather","int32"))),paramsDenseValues:Object(l.a)(e,"paramsDenseValues","raggedGather"),indices:Object(l.a)(n,"indices","raggedGather","int32")},h={outputRaggedRank:r},f=c.a.runKernel(d.cc,o,h);return{outputNestedSplits:f.slice(0,f.length-1),outputDenseValues:f[f.length-1]}}});const an=Object(h.b)({raggedRange_:function(t,e,n){const r=Object(l.a)(t,"starts","raggedRange"),o={starts:r,limits:Object(l.a)(e,"limits","raggedRange",r.dtype),deltas:Object(l.a)(n,"deltas","raggedRange",r.dtype)},h=c.a.runKernel(d.dc,o);return{rtNestedSplits:h[0],rtDenseValues:h[1]}}});const sn=Object(h.b)({raggedTensorToTensor_:function(t,e,n,r,o){const h=Object(l.a)(t,"shape","raggedTensorToTensor","int32"),f=Object(l.a)(e,"values","raggedTensorToTensor"),m={shape:h,values:f,defaultValue:Object(l.a)(n,"defaultValue","raggedTensorToTensor",f.dtype),rowPartitionTensors:r.map(((t,i)=>Object(l.a)(t,`tensors${i}`,"raggedTensorToTensor","int32")))},y={rowPartitionTypes:o};return c.a.runKernel(d.ec,m,y)}});const on=Object(h.b)({rand_:function(t,e,n){Object(O.d)(t);const r=Object(O.O)(t);let o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);o=new Uint8Array(r)}for(let i=0;i<r;i++)o[i]=e();return c.a.makeTensor(o,t,n)}});var cn=n(1029);n(986);class un{constructor(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const c=o||Math.random();this.random=cn.alea(c.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,o,s;do{r=2*this.random()-1,o=2*this.random()-1,s=r*r+o*o}while(s>=1||0===s);const c=Math.sqrt(-2*Math.log(s)/s);t=this.mean+this.stdDev*r*c,e=this.mean+this.stdDev*o*c,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class dn{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const o=r||Math.random();this.randu=cn.alea(o.toString()),this.randn=new un(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,u,o;for(;;){do{r=this.randn.nextValue(),o=1+this.c*r}while(o<=0);if(o*=o*o,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-o+Math.log(o)),u=this.randu(),u<e||Math.log(u)<n)break}return o=1/this.beta*this.d*o,this.alpha<1&&(o*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(o)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ln{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=cn.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const pn=Object(h.b)({randomGamma_:function(t,e,n=1,r="float32",o){if(Object(O.d)(t),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const c=new dn(e,n,r,o),d=Object(tt.a)(t,r);for(let i=0;i<d.values.length;i++)d.values[i]=c.nextValue();return d.toTensor()}});const hn=Object(h.b)({randomNormal_:function(t,e=0,n=1,r,o){if(Object(O.d)(t),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const c=new un(e,n,r,!1,o),d=Object(tt.a)(t,r);for(let i=0;i<d.values.length;i++)d.values[i]=c.nextValue();return d.toTensor()}});const fn=Object(h.b)({randomStandardNormal_:function(t,e,n){if(null!=e&&"bool"===e)throw new Error(`Unsupported data type ${e}`);return hn(t,0,1,e,n)}});const mn=Object(h.b)({randomUniform_:function(t,e=0,n=1,r="float32",o){Object(O.d)(t);const c=Object(tt.a)(t,r),d=new ln(e,n,null,o);for(let i=0;i<c.values.length;i++)c.values[i]=d.nextValue();return c.toTensor()}});const bn=Object(h.b)({randomUniformInt_:function(t,e,n,r){return mn(t,e,n,"int32",r)}});function gn(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:t,stop:e,step:n,dtype:r};return c.a.runKernel(d.fc,{},o)}const yn=Object(h.b)({real_:function(input){const t={input:Object(l.a)(input,"input","real")};return c.a.runKernel(d.gc,t)}});const On=Object(h.b)({reciprocal_:function(t){const e={x:Object(l.a)(t,"x","reciprocal")};return c.a.runKernel(d.ic,e)}});var jn=n(966),wn=n(987);const xn=Object(h.b)({reverse_:function(t,e){const n={x:Object(l.a)(t,"x","reverse")},r={dims:e};return c.a.runKernel(d.oc,n,r)}});const Nn=Object(h.b)({reverse1d_:function(t){const e=Object(l.a)(t,"x","reverse");return O.c(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),xn(e,0)}});const vn=Object(h.b)({reverse2d_:function(t,e){const n=Object(l.a)(t,"x","reverse");return O.c(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),xn(n,e)}});const Sn=Object(h.b)({reverse3d_:function(t,e){const n=Object(l.a)(t,"x","reverse");return O.c(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),xn(n,e)}});const Tn=Object(h.b)({reverse4d_:function(t,e){const n=Object(l.a)(t,"x","reverse");return O.c(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),xn(n,e)}});const kn=Object(h.b)({round_:function(t){const e={x:Object(l.a)(t,"x","round")};return c.a.runKernel(d.qc,e)}});const En=Object(h.b)({rsqrt_:function(t){const e={x:Object(l.a)(t,"x","rsqrt","float32")};return c.a.runKernel(d.rc,e)}});const In=Object(h.b)({selu_:function(t){const e={x:Object(l.a)(t,"x","selu")};return c.a.runKernel(d.vc,e)}});const _n=Object(h.b)({separableConv2d_:function(t,e,n,r,o,c=[1,1],d="NHWC"){const h=Object(l.a)(t,"x","separableConv2d"),f=Object(l.a)(e,"depthwiseFilter","separableConv2d"),m=Object(l.a)(n,"pointwiseFilter","separableConv2d");let y=h,j=!1;if(3===h.rank&&(j=!0,y=Object(M.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),"NCHW"===d)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");O.c(4===y.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${y.rank}.`)),O.c(4===f.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${f.rank}.`)),O.c(4===m.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${f.rank}.`)),O.c(1===m.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${m.shape[0]}.`)),O.c(1===m.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${m.shape[1]}.`));const w=f.shape[2],x=f.shape[3];O.c(m.shape[2]===w*x,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${w*x}, but got ${m.shape[2]}.`));const N=vt(y,f,r,o,d,c),v=lt(N,m,1,"valid",d);return j?Object(M.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});const An=async function(t,e){const n=Object(l.a)(t,"x","setdiff1d"),r=Object(l.a)(e,"y","setdiff1d");O.c(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),O.c(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),O.c(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const o=await n.data(),c=await r.data(),d=new Set(c);let h=0;for(let i=0;i<o.length;i++)d.has(o[i])||h++;const f=new Re.b([h],n.dtype),m=new Re.b([h],"int32");for(let i=0,p=0;i<o.length;i++)d.has(o[i])||(f.values[p]=o[i],m.values[p]=i,p++);return[f.toTensor(),m.toTensor()]};const $n=Object(h.b)({sign_:function(t){const e={x:Object(l.a)(t,"x","sign")};return c.a.runKernel(d.xc,e)}});const Mn=Object(h.b)({sin_:function(t){const e={x:Object(l.a)(t,"x","sin","float32")};return c.a.runKernel(d.yc,e)}});const Dn=Object(h.b)({sinh_:function(t){const e={x:Object(l.a)(t,"x","sinh")};return c.a.runKernel(d.zc,e)}});const Rn=Object(h.b)({slice1d_:function(t,e,n){const r=Object(l.a)(t,"x","slice1d");return O.c(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),P(r,[e],[n])}});const Cn=Object(h.b)({slice2d_:function(t,e,n){const r=Object(l.a)(t,"x","slice2d");return O.c(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),P(r,e,n)}});const Fn=Object(h.b)({slice3d_:function(t,e,n){const r=Object(l.a)(t,"x","slice3d");return O.c(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),P(r,e,n)}});const Bn=Object(h.b)({slice4d_:function(t,e,n){const r=Object(l.a)(t,"x","slice4d");return O.c(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),P(r,e,n)}});const Ln=Object(h.b)({softmax_:function(t,e=-1){const n=Object(l.a)(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},o={dim:e};return c.a.runKernel(d.Bc,r,o)}});const zn=Object(h.b)({fft_:function(input){Object(O.c)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${input.dtype}.`));const t={input:input};return c.a.runKernel(d.bb,t)}});const Pn=Object(h.b)({ifft_:function(input){Object(O.c)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${input.dtype}.`));const t={input:input};return c.a.runKernel(d.ob,t)}});const Vn=Object(h.b)({irfft_:function(input){const t=input.shape[input.shape.length-1],e=input.size/t;let n;if(t<=2){const r=Object(M.a)(input,[e,t]);n=Pn(r)}else{const r=[e,2*(t-1)],o=Object(M.a)(yn(input),[e,t]),c=Object(M.a)(ae(input),[e,t]),d=xn(P(o,[0,1],[e,t-2]),1),l=Object(L.a)(xn(P(c,[0,1],[e,t-2]),1),Object(Pt.a)(-1)),h=F([o,d],1),i=F([c,l],1),f=Object(M.a)(Object(st.a)(h,i),[r[0],r[1]]);n=Pn(f)}if(n=yn(n),3===input.rank&&0!==input.shape[0]){const t=n,e=input.shape[0];n=Object(M.a)(n,[e,n.shape[0]/e,n.shape[1]]),t.dispose()}return n}});const Un=Object(h.b)({split_:function(t,e,n=0){const r={x:Object(l.a)(t,"x","split")},o={numOrSizeSplits:e,axis:n};return c.a.runKernel(d.Jc,r,o)}});const Wn=Object(h.b)({rfft_:function(input,t){Object(O.c)("float32"===input.dtype,(()=>`The dtype for rfft() must be real value but got ${input.dtype}`));let e=input.shape[input.shape.length-1];const n=input.size/e;let r;if(null!=t&&t<e){const n=input.shape.map((t=>0)),o=input.shape.map((t=>t));o[input.shape.length-1]=t,r=P(input,n,o),e=t}else if(null!=t&&t>e){const n=input.shape.map((t=>t));n[input.shape.length-1]=t-e,r=F([input,Me(n)],input.shape.length-1),e=t}else r=input;const o=Object(_t.a)(r),c=Object(M.a)(Object(st.a)(r,o),[n,e]),d=zn(c),l=Math.floor(e/2)+1,h=yn(d),f=ae(d),m=Un(h,[l,e-l],h.shape.length-1),y=Un(f,[l,e-l],f.shape.length-1),j=r.shape.slice();return j[r.shape.length-1]=l,Object(M.a)(Object(st.a)(m[0],y[0]),j)}});const Gn=Object(h.b)({squaredDifference_:function(a,b){let t=Object(l.a)(a,"a","squaredDifference"),e=Object(l.a)(b,"b","squaredDifference");[t,e]=Object(E.c)(t,e),Object(kt.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return c.a.runKernel(d.Mc,n,{})}});const qn=Object(h.b)({squeeze_:function(t,e){const n=Object(l.a)(t,"x","squeeze","string_or_numeric");return Object(M.a)(n,Object(O.Q)(n.shape,e).newShape)}});const Kn=Object(h.b)({stack_:function(t,e=0){const n=Object(l.b)(t,"tensors","stack","string_or_numeric");O.c(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&O.c(e<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,o={axis:e};return c.a.runKernel(d.Xb,r,o)}});var Hn=n(988);const Zn=Object(h.b)({stridedSlice_:function(t,e,n,r,o=0,h=0,f=0,m=0,y=0){const O={x:Object(l.a)(t,"x","stridedSlice","string_or_numeric")},j={begin:e,end:n,strides:r,beginMask:o,endMask:h,ellipsisMask:f,newAxisMask:m,shrinkAxisMask:y};return c.a.runKernel(d.Pc,O,j)}});const Jn=Object(h.b)({tan_:function(t){const e={x:Object(l.a)(t,"x","tan","float32")};return c.a.runKernel(d.Vc,e)}});var Yn=n(963),Qn=n(932);function Xn(t,e){Object(O.e)(t);const n=Object(l.c)(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(Qn.a)(t,null,n,e)}function er(t,e,n){if(Object(O.e)(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(l.c)(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(Qn.a)(t,e,r,n)}var nr=n(989);function rr(t,e,n){if(Object(O.e)(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(l.c)(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Object(Qn.a)(t,e,r,n)}function ar(t,e,n){if(Object(O.e)(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Object(l.c)(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Object(Qn.a)(t,e,r,n)}function sr(t,e,n){if(Object(O.e)(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Object(l.c)(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||r,Object(Qn.a)(t,e,r,n)}var or=n(954);const ir=Object(h.b)({tensorScatterUpdate_:function(t,e,n){const r=Object(l.a)(t,"tensor","tensorScatterupdate"),o=Object(l.a)(e,"indices","tensorScatterupdate","int32"),h=Object(l.a)(n,"updates","tensorScatterupdate");if(or.b(h,o,r.shape),r.dtype!==h.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${h.dtype}.`);const f={tensor:r,indices:o,updates:h};return c.a.runKernel(d.Xc,f,{})}});const cr=Object(h.b)({topk_:function(t,e=1,n=!0){const r=Object(l.a)(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${e}`);const h={x:r},f={k:e,sorted:n},[m,y]=c.a.runKernel(d.Zc,h,f);return{values:m,indices:y}}});const ur=Object(h.b)({truncatedNormal_:function(t,e=0,n=1,r,o){if(Object(O.d)(t),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const c=new un(e,n,r,!0,o),d=Object(tt.a)(t,r);for(let i=0;i<d.values.length;i++)d.values[i]=c.nextValue();return d.toTensor()}});const dr=Object(h.b)({unique_:function(t,e=0){const n=Object(l.a)(t,"x","unique","string_or_numeric");Object(O.c)(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},o={axis:e},[h,f]=c.a.runKernel(d.cd,r,o);return{values:h,indices:f}}});const lr=Object(h.b)({unsortedSegmentSum_:function(t,e,n){const r=Object(l.a)(t,"x","unsortedSegmentSum"),o=Object(l.a)(e,"segmentIds","unsortedSegmentSum","int32");Object(O.c)(Object(O.w)(n),(()=>"numSegments must be of dtype int"));const h={x:r,segmentIds:o},f={numSegments:n};return c.a.runKernel(d.ed,h,f)}});const pr=Object(h.b)({unstack_:function(t,e=0){const n=Object(l.a)(t,"x","unstack","string_or_numeric");O.c(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},o={axis:e};return c.a.runKernel(d.dd,r,o)}});function fr(t,e){return Te(t,e,"right")}function mr(t,e=!0,n,r){return c.a.makeVariable(t,e,n,r)}var gr=n(990);const yr=async function(t){const e=Object(l.a)(t,"condition","whereAsync","bool"),n=await e.data(),r=Object(gr.a)(e.shape,n);return t!==e&&e.dispose(),r};const Or=async function(t,mask,e){const n=Object(l.a)(t,"tensor","boolMask"),r=Object(l.a)(mask,"mask","boolMask","bool"),o=null==e?0:e,c=r.rank,d=n.shape;O.c(c>0,(()=>"mask cannot be scalar")),O.f(d.slice(o,o+c),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let h=1;for(let i=o;i<o+c;i++)h*=d[i];const f=d.slice(0,o).concat([h],d.slice(o+c)),m=Object(M.a)(n,f),y=Object(M.a)(r,[-1]),j=await yr(y),w=qn(j,[1]),x=ee(m,w,o);return t!==n&&n.dispose(),mask!==r&&r.dispose(),w.dispose(),m.dispose(),y.dispose(),j.dispose(),x};var jr=n(913);const wr=Object(h.b)({transpose_:function(t,e,n){const r=Object(l.a)(t,"x","transpose");if(null==e&&(e=r.shape.map(((s,i)=>i)).reverse()),O.c(r.rank===e.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${e}.`)),e.forEach((t=>{O.c(t>=0&&t<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${e}`))})),r.rank<=1)return r.clone();const o={x:r},h={perm:e};return"complex64"===r.dtype?Object(jr.g)((()=>{let t=yn(r),e=ae(r);return t=c.a.runKernel(d.bd,{x:t},h),e=c.a.runKernel(d.bd,{x:e},h),n&&(e=be(e)),Object(st.a)(t,e)})):c.a.runKernel(d.bd,o,h)}});const xr=Object(h.b)({movingAverage_:function(t,e,n,r,o=!0){const c=Object(l.a)(t,"v","movingAverage"),d=Object(l.a)(e,"x","movingAverage"),h=Object(l.a)(n,"decay","movingAverage");Object(E.a)(c,d),O.c(O.a(c.shape,d.shape),(()=>"Shape mismatch in v and x"));const f=Object(Pt.a)(1),m=Object(sub.a)(f,h);let j=Object(L.a)(Object(sub.a)(d,c),m);if(o){O.c(null!=r,(()=>"When using zeroDebias: true, step is required."));const t=Object(l.a)(r,"step","movingAverage");j=Object(div.a)(j,Object(sub.a)(f,Object(zt.a)(h,t)))}return Object(y.a)(c,j)}});const Nr=Object(h.b)({scatterND_:function(t,e,n){Object(O.d)(n);const r=Object(l.a)(t,"indices","scatterND","int32"),o=Object(l.a)(e,"updates","scatterND");or.b(o,r,n);const h={indices:r,updates:o},f={shape:n};return c.a.runKernel(d.sc,h,f)}});const vr=Object(h.b)({sparseToDense_:function(t,e,n,r=0){Object(O.d)(n);const o=Object(l.a)(t,"sparseIndices","sparseToDense","int32"),h=Object(l.a)(e,"sparseValues","sparseToDense","string_or_numeric"),f=Object(l.a)(r,"defaultValue","sparseToDense",h.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const o=t.rank>0?t.shape[0]:1,c=t.rank>1?t.shape[1]:1;if(n.length!==c)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${c}.`);const d=e.size;if(0!==e.rank&&(1!==e.rank||d!==o))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${o}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,h,n,f);const m={sparseIndices:o,sparseValues:h,defaultValue:f},y={outputShape:n};return c.a.runKernel(d.Ic,m,y)}});const Sr=Object(h.b)({gatherND_:function(t,e){const n=Object(l.a)(e,"indices","gatherND","int32"),r={params:Object(l.a)(t,"x","gatherND","string_or_numeric"),indices:n};return c.a.runKernel(d.kb,r)}});const Tr=Object(h.b)({dropout_:function(t,e,n,r){const o=Object(l.a)(t,"x","dropout");if(O.c("float32"===o.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`)),O.c(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof Re.a?o.clone():o;const c=function(t,e){if(null==e)return t.shape.slice();if(O.a(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let i=0;i<t.shape.length;i++)null==e[i]&&null!=t.shape[i]?n.push(t.shape[i]):n.push(e[i]);return n}return e}(o,n),d=1-e,h=Object(div.a)(Xt(Object(y.a)(mn(c,0,1,"float32",r),d)),d);return Object(L.a)(o,h)}});function kr(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function Er(t,a,b){const e=1-t%2,n=new Float32Array(t);for(let i=0;i<t;++i){const r=2*Math.PI*i/(t+e-1);n[i]=a-b*Math.cos(r)}return Xn(n,"float32")}const Ir=async function(t,e,n=1){const r=Object(l.a)(t,"predictions","inTopK"),o=Object(l.a)(e,"targets","inTopK");Object(O.c)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),Object(O.c)(r.rank-1===o.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${o.rank}`)),Object(O.f)(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const c=r.shape[r.shape.length-1];Object(O.c)(n>0&&n<=c,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${c}), but got ${n}`));const d=await r.data(),h=await o.data(),[f,m]=[d.length/c,c],y=Object(O.p)("bool",f);for(let b=0;b<f;b++){const t=b*m,e=d.subarray(t,t+m),r=[];for(let i=0;i<e.length;i++)r.push({value:e[i],index:i});r.sort(((a,b)=>b.value-a.value)),y[b]=0;for(let i=0;i<n;i++)if(r[i].index===h[b]){y[b]=1;break}}return t!==r&&r.dispose(),e!==o&&o.dispose(),Object(Yn.a)(y,o.shape,"bool")};const _r=Object(h.b)({conv2DBackpropFilter_:function(t,e,n,r,o,l="NHWC",h){let f=t;3===t.rank&&(f=Object(M.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let m=e;3===m.rank&&(m=Object(M.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]])),O.c(4===f.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${f.shape}.`)),O.c(4===m.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${m.shape}.`)),O.c(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const y="NHWC"===l?f.shape[3]:f.shape[1],j="NHWC"===l?m.shape[3]:m.shape[1];O.c(y===n[2],(()=>`Error in conv2dDerFilter: depth of input ${y}) must match input depth in filter (${n[2]}.`)),O.c(j===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${j}) must match output depth for filter (${n[3]}).`)),$.a("conv2dDerFilter",o,h);const w={x:f,dy:m},x={strides:r,pad:o,dataFormat:l,dimRoundingMode:h,filterShape:n};return c.a.runKernel(d.D,w,x)}});var Ar=n(947);const $r=Object(h.b)({fusedConv2d_:function({x:t,filter:filter,strides:e,pad:n,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:h,bias:f,activation:m="linear",preluActivationWeights:j,leakyreluAlpha:w}){if(m=m||"linear",!1===Object(Ar.d)(c.a.state.gradientDepth,m)){O.c("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let c=lt(t,filter,e,n,r,o,h);return null!=f&&(c=Object(y.a)(c,f)),Object(Ar.a)(c,m,j,w)}const x=Object(l.a)(t,"x","conv2d","float32"),N=Object(l.a)(filter,"filter","conv2d","float32");let v=x,S=!1;3===x.rank&&(S=!0,v=Object(M.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),O.c(4===v.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${v.rank}.`)),O.c(4===N.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${N.rank}.`)),$.a("fused conv2d",n,h);const T="NHWC"===r?v.shape[3]:v.shape[1];O.c(N.shape[2]===T,(()=>`Error in conv2d: depth of input (${T}) must match input depth for filter ${N.shape[2]}.`)),O.c($.i(e,o),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`));const k=$.b(v.shape,N.shape,e,o,n,h);let I,_;if(null!=f&&(I=Object(l.a)(f,"bias","fused conv2d"),[I]=Object(E.c)(I,x),"NHWC"===r?kt.assertAndGetBroadcastShape(k.outShape,I.shape):(O.c(I.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${I.shape.length}.`)),O.c(0===I.shape.length||I.shape[0]===k.outChannels||1===I.shape[0],(()=>`Error in fused conv2d: bias shape (${I.shape}) is not compatible with the number of output channels (${k.outChannels})`)))),null!=j){const t=j.shape;if(O.c(t.length<=1||3===t.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${t.length}.`)),1===t.length)O.c(1===t[0]||t[0]===k.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${t}) is not compatible with the number of output channels (${k.outChannels}).`));else if(3===t.length)try{kt.assertAndGetBroadcastShape(t,k.outShape)}catch(e){const n=`Error in fused conv2d: PReLU activation weights (${t}) is not compatible with the output shape of the conv2d (${k.outShape}).`;throw Error(n)}_=Object(l.a)(j,"prelu weights","fused conv2d")}const A=(t,c)=>{O.c("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[d,l,h,f]=c,y=Object(Ar.c)(t,h,m);O.c($.k(o),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`));const j=[ht(l.shape,y,d,e,n),_r(l,y,d.shape,e,n)];if(null!=f){const t=Object(Ar.b)(f,y);j.push(t)}return j},D={x:v,filter:N,bias:I,preluActivationWeights:_},R={strides:e,pad:n,dataFormat:r,dilations:o,dimRoundingMode:h,activation:m,leakyreluAlpha:w};if(null==f){const t=Object(me.a)(((t,filter,e)=>{let n=c.a.runKernel(d.ib,D,R);return e([filter,t,n]),S&&(n=Object(M.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:A}}));return t(v,N)}{const t=Object(me.a)(((t,filter,e,n)=>{let r=c.a.runKernel(d.ib,D,R);return n([filter,t,r,e]),S&&(r=Object(M.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:A}}));return t(v,N,I)}}});const Mr=Object(h.b)({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,o,l=[1,1],h){let f=t;3===t.rank&&(f=Object(M.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let m=e;3===m.rank&&(m=Object(M.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const y={x:f,dy:m},O={strides:r,pad:o,dimRoundingMode:h,dilations:l,filterShape:n};return c.a.runKernel(d.P,y,O)}});const Dr=Object(h.b)({depthwiseConv2dNativeBackpropInput_:function(t,e,filter,n,r,o=[1,1],l){let h=e,f=!1;3===e.rank&&(f=!0,h=Object(M.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const m={dy:h,filter:filter},y={strides:n,pad:r,dimRoundingMode:l,dilations:o,inputShape:t},O=c.a.runKernel(d.Q,m,y);return f?Object(M.a)(O,[O.shape[1],O.shape[2],O.shape[3]]):O}});const Rr=Object(h.b)({fusedDepthwiseConv2d_:function({x:t,filter:filter,strides:e,pad:n,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:h,bias:f,activation:m="linear",preluActivationWeights:j,leakyreluAlpha:w}){if(!1===Object(Ar.d)(c.a.state.gradientDepth,m)){let c=vt(t,filter,e,n,r,o,h);return null!=f&&(c=Object(y.a)(c,f)),Object(Ar.a)(c,m,j,w)}const x=Object(l.a)(t,"x","depthwiseConv2d","float32"),N=Object(l.a)(filter,"filter","depthwiseConv2d","float32");let v=x,S=!1;3===x.rank&&(S=!0,v=Object(M.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),O.c(4===v.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${v.rank}.`)),O.c(4===N.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${N.rank}.`)),O.c(v.shape[3]===N.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${v.shape[3]}) must match the inChannels dimension in filter ${N.shape[2]}.`)),null==o&&(o=[1,1]),O.c($.i(e,o),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`)),$.a("fused depthwiseConv2d",n,h);const T=$.b(v.shape,N.shape,e,o,n,h,!0);let k,I;null!=f&&(k=Object(l.a)(f,"bias","fused conv2d"),[k]=Object(E.c)(k,x),kt.assertAndGetBroadcastShape(T.outShape,k.shape)),null!=j&&(I=Object(l.a)(j,"prelu weights","fused depthwiseConv2d"));const _=(t,r)=>{O.c($.k(o),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[c,d,l,f]=r,y=Object(Ar.c)(t,l,m),j=Dr(d.shape,y,c,e,n,o,h),w=Mr(d,y,c.shape,e,n,o,h);if(null!=f){return[j,w,Object(Ar.b)(k,y)]}return[j,w]},A={x:v,filter:N,bias:k,preluActivationWeights:I},D={strides:e,pad:n,dataFormat:r,dilations:o,dimRoundingMode:h,activation:m,leakyreluAlpha:w};if(null==f){const t=Object(me.a)(((t,filter,e)=>{let n=c.a.runKernel(d.jb,A,D);return e([filter,t,n]),S&&(n=Object(M.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:_}}));return t(v,N)}{const t=Object(me.a)(((t,filter,e,n)=>{let r=c.a.runKernel(d.jb,A,D);return n([filter,t,r,e]),S&&(r=Object(M.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:_}}));return t(v,N,k)}}});const Cr=Object(h.b)({fusedMatMul_:function({a:a,b:b,transposeA:t=!1,transposeB:e=!1,bias:n,activation:r="linear",preluActivationWeights:o,leakyreluAlpha:h=.2}){if(!1===Object(Ar.d)(c.a.state.gradientDepth,r)){let c=B(a,b,t,e);return null!=n&&(c=Object(y.a)(c,n)),Object(Ar.a)(c,r,o,h)}let f=Object(l.a)(a,"a","fused matMul"),m=Object(l.a)(b,"b","fused matMul");[f,m]=Object(E.c)(f,m);const j=t?f.shape[f.rank-2]:f.shape[f.rank-1],w=e?m.shape[m.rank-1]:m.shape[m.rank-2],x=t?f.shape[f.rank-1]:f.shape[f.rank-2],N=e?m.shape[m.rank-2]:m.shape[m.rank-1],v=f.shape.slice(0,-2),S=m.shape.slice(0,-2),T=O.O(v),k=O.O(S);O.c(j===w,(()=>`Error in fused matMul: inner shapes (${j}) and (${w}) of Tensors with shapes ${f.shape} and ${m.shape} and transposeA=${t} and transposeB=${e} must match.`));const I=kt.assertAndGetBroadcastShape(f.shape.slice(0,-2),m.shape.slice(0,-2)).concat([x,N]),_=t?Object(M.a)(f,[T,j,x]):Object(M.a)(f,[T,x,j]),A=e?Object(M.a)(m,[k,N,w]):Object(M.a)(m,[k,w,N]);let $,D;null!=n&&($=Object(l.a)(n,"bias","fused matMul"),[$]=Object(E.c)($,f),kt.assertAndGetBroadcastShape(I,$.shape)),null!=o&&(D=Object(l.a)(o,"prelu weights","fused matMul"));const R=(o,c)=>{const[d,l,h,f]=c,m=Object(Ar.c)(Object(M.a)(o,h.shape),h,r);let y,O;if(t||e?!t&&e?(y=B(m,l,!1,!1),O=B(m,d,!0,!1)):t&&!e?(y=B(l,m,!1,!0),O=B(d,m,!1,!1)):(y=B(l,m,!0,!0),O=B(m,d,!0,!0)):(y=B(m,l,!1,!0),O=B(d,m,!0,!1)),null!=n){return[y,O,Object(Ar.b)(f,m)]}return[y,O]},C={a:_,b:A,bias:$,preluActivationWeights:D},F={transposeA:t,transposeB:e,activation:r,leakyreluAlpha:h};if(null==n){const t=Object(me.a)(((t,e,n)=>{const r=c.a.runKernel(d.gd,C,F);return n([t,e,r]),{value:Object(M.a)(r,I),gradFunc:R}}));return t(_,A)}{const t=Object(me.a)(((t,e,n,r)=>{const o=c.a.runKernel(d.gd,C,F);return r([t,e,o,n]),{value:Object(M.a)(o,I),gradFunc:R}}));return t(_,A,$)}}});const Fr=Object(h.b)({hammingWindow_:function(t){return Er(t,.54,.46)}});const Br=Object(h.b)({hannWindow_:function(t){return Er(t,.5,.5)}});const Lr=Object(h.b)({frame_:function(t,e,n,r=!1,o=0){let c=0;const output=[];for(;c+e<=t.size;)output.push(P(t,c,e)),c+=n;if(r)for(;c<t.size;){const r=c+e-t.size,d=F([P(t,c,e-r),Object(nt.a)([r],o)]);output.push(d),c+=n}return 0===output.length?er([],[0,e]):Object(M.a)(F(output),[output.length,e])}});const zr=Object(h.b)({stft_:function(t,e,n,r,o=Br){null==r&&(r=kr(e));const c=Lr(t,e,n),d=Object(L.a)(c,o(e));return Wn(d,r)}});const Pr=Object(h.b)({cropAndResize_:function(image,t,e,n,r="bilinear",o=0){const h=Object(l.a)(image,"image","cropAndResize"),f=Object(l.a)(t,"boxes","cropAndResize","float32"),m=Object(l.a)(e,"boxInd","cropAndResize","int32"),y=f.shape[0];O.c(4===h.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${h.rank}.`)),O.c(2===f.rank&&4===f.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${y},4] but had shape ${f.shape}.`)),O.c(1===m.rank&&m.shape[0]===y,(()=>`Error in cropAndResize: boxInd must be have size [${y}] but had shape ${f.shape}.`)),O.c(2===n.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`)),O.c(n[0]>=1&&n[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${n}`)),O.c("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const j={image:h,boxes:f,boxInd:m},w={method:r,extrapolationValue:o,cropSize:n};return c.a.runKernel(d.J,j,w)}});const Vr=Object(h.b)({flipLeftRight_:function(image){const t=Object(l.a)(image,"image","flipLeftRight","float32");O.c(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const e={image:t};return c.a.runKernel(d.db,e,{})}});const Ur=Object(h.b)({grayscaleToRGB_:function(image){const t=Object(l.a)(image,"image","grayscaleToRGB"),e=t.rank-1,n=t.shape[e];O.c(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),O.c(1===n,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`));const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,Yt(t,r)}});const Wr=Object(h.b)({rotateWithOffset_:function(image,t,e=0,n=.5){const r=Object(l.a)(image,"image","rotateWithOffset","float32");O.c(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const o={image:r},h={radians:t,fillValue:e,center:n};return c.a.runKernel(d.pc,o,h)}});function Gr(t,e,n,r,o,c){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==c&&(c=0);const d=t.shape[0];return n=Math.min(n,d),O.c(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),O.c(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),O.c(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),O.c(1===e.rank,(()=>"scores must be a 1D tensor")),O.c(e.shape[0]===d,(()=>`scores has incompatible shape with boxes. Expected ${d}, but was ${e.shape[0]}`)),O.c(0<=c&&c<=1,(()=>`softNmsSigma must be in [0, 1], but was '${c}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:c}}const qr=Object(h.b)({nonMaxSuppression_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY){const h=Object(l.a)(t,"boxes","nonMaxSuppression","float32"),f=Object(l.a)(e,"scores","nonMaxSuppression","float32"),m=Gr(h,f,n,r,o),y={maxOutputSize:n=m.maxOutputSize,iouThreshold:r=m.iouThreshold,scoreThreshold:o=m.scoreThreshold};return c.a.runKernel(d.Rb,{boxes:h,scores:f},y)}});var Kr=n(948);const Hr=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object(l.a)(t,"boxes","nonMaxSuppressionAsync"),d=Object(l.a)(e,"scores","nonMaxSuppressionAsync"),h=Gr(c,d,n,r,o);n=h.maxOutputSize,r=h.iouThreshold,o=h.scoreThreshold;const f=await Promise.all([c.data(),d.data()]),m=f[0],y=f[1],{selectedIndices:O}=Object(Kr.a)(m,y,n,r,o);return c!==t&&c.dispose(),d!==e&&d.dispose(),Xn(O,"int32")};const Zr=Object(h.b)({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,h=0){const f=Object(l.a)(t,"boxes","nonMaxSuppression"),m=Object(l.a)(e,"scores","nonMaxSuppression"),y=Gr(f,m,n,r,o,h),O={boxes:f,scores:m},j={maxOutputSize:n=y.maxOutputSize,iouThreshold:r=y.iouThreshold,scoreThreshold:o=y.scoreThreshold,softNmsSigma:h=y.softNmsSigma},w=c.a.runKernel(d.Tb,O,j);return{selectedIndices:w[0],selectedScores:w[1]}}});const Jr=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const d=Object(l.a)(t,"boxes","nonMaxSuppressionAsync"),h=Object(l.a)(e,"scores","nonMaxSuppressionAsync"),f=Gr(d,h,n,r,o,c);n=f.maxOutputSize,r=f.iouThreshold,o=f.scoreThreshold,c=f.softNmsSigma;const m=await Promise.all([d.data(),h.data()]),y=m[0],O=m[1],{selectedIndices:j,selectedScores:w}=Object(Kr.c)(y,O,n,r,o,c);return d!==t&&d.dispose(),h!==e&&h.dispose(),{selectedIndices:Xn(j,"int32"),selectedScores:Xn(w)}};const Yr=Object(h.b)({nonMaxSuppressionPadded_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,h=!1){const f=Object(l.a)(t,"boxes","nonMaxSuppression"),m=Object(l.a)(e,"scores","nonMaxSuppression"),y=Gr(f,m,n,r,o,null),O={boxes:f,scores:m},j={maxOutputSize:y.maxOutputSize,iouThreshold:y.iouThreshold,scoreThreshold:y.scoreThreshold,padToMaxOutputSize:h},w=c.a.runKernel(d.Sb,O,j);return{selectedIndices:w[0],validOutputs:w[1]}}});const Qr=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const d=Object(l.a)(t,"boxes","nonMaxSuppressionAsync"),h=Object(l.a)(e,"scores","nonMaxSuppressionAsync"),f=Gr(d,h,n,r,o,null),m=f.maxOutputSize,y=f.iouThreshold,O=f.scoreThreshold,[j,w]=await Promise.all([d.data(),h.data()]),{selectedIndices:x,validOutputs:N}=Object(Kr.b)(j,w,m,y,O,c);return d!==t&&d.dispose(),h!==e&&h.dispose(),{selectedIndices:Xn(x,"int32"),validOutputs:Object(Pt.a)(N,"int32")}};const Xr=Object(h.b)({resizeBilinear_:function(t,e,n=!1,r=!1){const o=Object(l.a)(t,"images","resizeBilinear");O.c(3===o.rank||4===o.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`)),O.c(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`)),O.c(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let h=o,f=!1;3===o.rank&&(f=!0,h=Object(M.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const[]=e,m={images:h},y={alignCorners:n,halfPixelCenters:r,size:e},j=c.a.runKernel(d.mc,m,y);return f?Object(M.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}});const ta=Object(h.b)({resizeNearestNeighbor_:function(t,e,n=!1,r=!1){const o=Object(l.a)(t,"images","resizeNearestNeighbor");O.c(3===o.rank||4===o.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`)),O.c(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),O.c("float32"===o.dtype||"int32"===o.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),O.c(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let h=o,f=!1;3===o.rank&&(f=!0,h=Object(M.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const[]=e,m={images:h},y={alignCorners:n,halfPixelCenters:r,size:e},j=c.a.runKernel(d.nc,m,y);return f?Object(M.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}});const ea=Object(h.b)({threshold_:function(image,t="binary",e=!1,n=.5){const r=Object(l.a)(image,"image","threshold"),o=r.shape[0]*r.shape[1];let c,g,b,d,h=Object(L.a)(Xn([n]),255);if(O.c(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),O.c(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),O.c("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),O.c("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[c,g,b]=Un(r,[1,1,1],-1);const t=Object(L.a)(c,.2989),e=Object(L.a)(g,.587),n=Object(L.a)(b,.114);d=Object(y.a)(Object(y.a)(t,e),n)}else d=image;if("otsu"===t){h=function(t,e){let n,r,o,c,d,l,h=Xn([-1]),f=Xn([0]),m=Xn([0]);for(let O=0;O<t.size-1;O++){n=P(t,0,O+1),r=P(t,O+1),d=Object(div.a)(Object(Wt.a)(n),e),l=Object(div.a)(Object(Wt.a)(r),e);const j=Object(Wt.a)(Object(L.a)(n,gn(0,n.size)));o=Object(div.a)(j,Object(Wt.a)(n));const w=Object(nt.a)(r.shape,n.size),x=Object(y.a)(gn(0,r.size),w),N=Object(L.a)(r,x);c=Object(div.a)(Object(Wt.a)(N),Object(Wt.a)(r));const v=Object(sub.a)(o,c),S=Object(sub.a)(o,c),T=Object(L.a)(d,l);m=Object(L.a)(Object(L.a)(T,v),S);const k=ne(m,f);f=It(k,m,f),h=It(k,Xn([O]),h)}return h}(J(Object(A.a)(kn(d),"int32"),Object(Yn.a)([]),256),o)}const f=e?de(d,h):ne(d,h);return Object(A.a)(Object(L.a)(f,255),"int32")}});const na=Object(h.b)({transform_:function(image,t,e="nearest",n="constant",r=0,o){const h=Object(l.a)(image,"image","transform","float32"),f=Object(l.a)(t,"transforms","transform","float32");O.c(4===h.rank,(()=>`Error in transform: image must be rank 4,but got rank ${h.rank}.`)),O.c(2===f.rank&&(f.shape[0]===h.shape[0]||1===f.shape[0])&&8===f.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),O.c(null==o||2===o.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`));const m={image:h,transforms:f},y={interpolation:e,fillMode:n,fillValue:r,outputShape:o};return c.a.runKernel(d.ad,m,y)}});const ra=Object(h.b)({bandPart_:function(a,t,e){const n=Object(l.a)(a,"a","bandPart");Object(O.c)(n.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${n.rank}.`));const r=n.shape,[o,c]=n.shape.slice(-2);let d,h;"number"==typeof t?(Object(O.c)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Object(O.c)(t<=o,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`)),d=Object(l.a)(t<0?o:t,"numLower","bandPart")):(Object(O.c)("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),d=It(ue(t,0),o,Fe(t,o))),"number"==typeof e?(Object(O.c)(e%1==0,(()=>`bandPart(): numUpper must be an integer, got ${e}.`)),Object(O.c)(e<=c,(()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${c}).`)),h=Object(l.a)(e<0?c:e,"numUpper","bandPart")):(Object(O.c)("int32"===e.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),h=It(ue(e,0),c,Fe(e,c)));const i=Object(M.a)(gn(0,o,1,"int32"),[-1,1]),f=gn(0,c,1,"int32"),m=Object(sub.a)(i,f),y=we(de(m,d),re(m,be(h))),j=Me([o,c],n.dtype);return Object(M.a)(Kn(pr(Object(M.a)(n,[-1,o,c])).map((t=>It(y,t,j)))),r)}});const aa=Object(h.b)({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Object(O.c)(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let i=1;i<t.length;++i)Object(O.c)(t[i].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[i].shape[0]} vs. ${n})`))}else e=!0,t=Un(t,t.shape[0],0).map((t=>qn(t,[0])));Object(O.c)(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let i=0;i<t.length;++i)n.push(c.a.tidy((()=>{let t=r[i];if(i>0)for(let e=0;e<i;++e){const r=Object(L.a)(Object(Wt.a)(Object(L.a)(n[e],t)),n[e]);t=Object(sub.a)(t,r)}return Object(div.a)(t,qt(t,"euclidean"))})));return e?Kn(n,0):n}});function sa(t,e=!1){return c.a.tidy((()=>{Object(O.c)(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let q=Qt(n),o=Object(C.a)(t);const d=er([[1]],[1,1]);let l=Object(C.a)(d);const h=n>=r?r:n;for(let t=0;t<h;++t){const e=o,h=l,f=q;[l,o,q]=c.a.tidy((()=>{const e=P(o,[t,t],[n-t,1]),c=qt(e),h=P(o,[t,t],[1,1]),s=It(ne(h,0),er([[-1]]),er([[1]])),f=Object(sub.a)(h,Object(L.a)(s,c)),m=Object(div.a)(e,f);l=1===m.shape[0]?Object(C.a)(d):F([d,P(m,[1,0],[m.shape[0]-1,m.shape[1]])],0);const y=be(Object(div.a)(B(s,f),c)),O=P(o,[t,0],[n-t,r]),j=Object(L.a)(y,l),w=wr(l);if(0===t)o=Object(sub.a)(O,B(j,B(w,O)));else{const e=Object(sub.a)(O,B(j,B(w,O)));o=F([P(o,[0,0],[t,r]),e],0)}const x=wr(j),N=P(q,[0,t],[n,q.shape[1]-t]);if(0===t)q=Object(sub.a)(N,B(B(N,l),x));else{const e=Object(sub.a)(N,B(B(N,l),x));q=F([P(q,[0,0],[n,t]),e],1)}return[l,o,q]})),Object(jr.b)([e,h,f])}return!e&&n>r&&(q=P(q,[0,0],[n,r]),o=P(o,[0,0],[r,r])),[q,o]}))}const oa=Object(h.b)({qr_:function(t,e=!1){if(Object(O.c)(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return sa(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=pr(Object(M.a)(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],c=[];r.forEach((t=>{const[n,r]=sa(t,e);o.push(n),c.push(r)}));return[Object(M.a)(Kn(o,0),t.shape),Object(M.a)(Kn(c,0),t.shape)]}}});var ia=n(919);const ca=Object(h.b)({computeWeightedLoss_:function(t,e,n=ia.a.SUM_BY_NONZERO_WEIGHTS){const r=Object(l.a)(t,"losses","computeWeightedLoss");let o=null;null!=e&&(o=Object(l.a)(e,"weights","computeWeightedLoss"));const c=null==o?r:Object(L.a)(r,o);if(n===ia.a.NONE)return c;if(n===ia.a.SUM)return Object(Wt.a)(c);if(n===ia.a.MEAN){if(null==o)return $e(c);{const t=r.size/o.size,e=Object(div.a)(Object(Wt.a)(c),Object(Wt.a)(o));return t>1?Object(div.a)(e,Object(Pt.a)(t)):e}}if(n===ia.a.SUM_BY_NONZERO_WEIGHTS){if(null==o)return Object(div.a)(Object(Wt.a)(c),Object(Pt.a)(r.size));{const t=Object(L.a)(o,De(r.shape)),e=Object(A.a)(Object(Wt.a)(Ue(t,Object(Pt.a)(0))),"float32");return Object(div.a)(Object(Wt.a)(c),e)}}throw Error(`Unknown reduction: ${n}`)}});const ua=Object(h.b)({absoluteDifference_:function(t,e,n,r=ia.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(l.a)(t,"labels","absoluteDifference"),d=Object(l.a)(e,"predictions","absoluteDifference");let h=null;null!=n&&(h=Object(l.a)(n,"weights","absoluteDifference")),Object(O.f)(c.shape,d.shape,"Error in absoluteDifference: ");const f=Object(o.a)(Object(sub.a)(c,d));return ca(f,h,r)}});const da=Object(h.b)({cosineDistance_:function(t,e,n,r,o=ia.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(l.a)(t,"labels","cosineDistance"),d=Object(l.a)(e,"predictions","cosineDistance");let h=null;null!=r&&(h=Object(l.a)(r,"weights","cosineDistance")),Object(O.f)(c.shape,d.shape,"Error in cosineDistance: ");const f=Object(Pt.a)(1),m=Object(sub.a)(f,Object(Wt.a)(Object(L.a)(c,d),n,!0));return ca(m,h,o)}});const la=Object(h.b)({hingeLoss_:function(t,e,n,r=ia.a.SUM_BY_NONZERO_WEIGHTS){let o=Object(l.a)(t,"labels","hingeLoss");const c=Object(l.a)(e,"predictions","hingeLoss");let d=null;null!=n&&(d=Object(l.a)(n,"weights","hingeLoss")),Object(O.f)(o.shape,c.shape,"Error in hingeLoss: ");const h=Object(Pt.a)(1);o=Object(sub.a)(Object(L.a)(Object(Pt.a)(2),o),h);const f=Object(jn.a)(Object(sub.a)(h,Object(L.a)(o,c)));return ca(f,d,r)}});const pa=Object(h.b)({huberLoss_:function(t,e,n,r=1,c=ia.a.SUM_BY_NONZERO_WEIGHTS){const d=Object(l.a)(t,"labels","huberLoss"),h=Object(l.a)(e,"predictions","huberLoss");let f=null;null!=n&&(f=Object(l.a)(n,"weights","huberLoss")),Object(O.f)(d.shape,h.shape,"Error in huberLoss: ");const m=Object(Pt.a)(r),j=Object(o.a)(Object(sub.a)(h,d)),w=Fe(j,m),x=Object(sub.a)(j,w),N=Object(y.a)(Object(L.a)(Object(Pt.a)(.5),Object(Ut.a)(w)),Object(L.a)(m,x));return ca(N,f,c)}});const ha=Object(h.b)({logLoss_:function(t,e,n,r=1e-7,o=ia.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(l.a)(t,"labels","logLoss"),d=Object(l.a)(e,"predictions","logLoss");let h=null;null!=n&&(h=Object(l.a)(n,"weights","logLoss")),Object(O.f)(c.shape,d.shape,"Error in logLoss: ");const f=Object(Pt.a)(1),m=Object(Pt.a)(r),j=be(Object(L.a)(c,he(Object(y.a)(d,m)))),w=Object(L.a)(Object(sub.a)(f,c),he(Object(y.a)(Object(sub.a)(f,d),m))),x=Object(sub.a)(j,w);return ca(x,h,o)}});const fa=Object(h.b)({meanSquaredError_:function(t,e,n,r=ia.a.SUM_BY_NONZERO_WEIGHTS){const o=Object(l.a)(t,"labels","meanSquaredError"),c=Object(l.a)(e,"predictions","meanSquaredError");let d=null;null!=n&&(d=Object(l.a)(n,"weights","meanSquaredError")),Object(O.f)(o.shape,c.shape,"Error in meanSquaredError: ");const h=Gn(o,c);return ca(h,d,r)}});const ma=Object(h.b)({sigmoidCrossEntropy_:function(t,e,n,r=0,c=ia.a.SUM_BY_NONZERO_WEIGHTS){let d=Object(l.a)(t,"multiClassLabels","sigmoidCrossEntropy");const h=Object(l.a)(e,"logits","sigmoidCrossEntropy");let f=null;if(null!=n&&(f=Object(l.a)(n,"weights","sigmoidCrossEntropy")),Object(O.f)(d.shape,h.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Object(Pt.a)(r),e=Object(Pt.a)(1),n=Object(Pt.a)(.5);d=Object(y.a)(Object(L.a)(d,Object(sub.a)(e,t)),Object(L.a)(n,t))}const m=function(t,e){const n=Object(l.a)(t,"labels","sigmoidCrossEntropyWithLogits"),r=Object(l.a)(e,"logits","sigmoidCrossEntropyWithLogits");Object(O.f)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const c=Object(jn.a)(r),d=Object(L.a)(r,n),h=fe(Ht(be(Object(o.a)(r))));return Object(y.a)(Object(sub.a)(c,d),h)}(d,h);return ca(m,f,c)}});const ba=Object(h.b)({softmaxCrossEntropy_:function(t,e,n,r=0,o=ia.a.SUM_BY_NONZERO_WEIGHTS){let c=Object(l.a)(t,"onehotLabels","softmaxCrossEntropy");const d=Object(l.a)(e,"logits","softmaxCrossEntropy");let h=null;if(null!=n&&(h=Object(l.a)(n,"weights","softmaxCrossEntropy")),Object(O.f)(c.shape,d.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Object(Pt.a)(r),e=Object(Pt.a)(1),n=Object(Pt.a)(c.shape[1]);c=Object(y.a)(Object(L.a)(c,Object(sub.a)(e,t)),Object(div.a)(t,n))}const f=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);const r=Object(me.a)(((t,e,r)=>{const o=je(e,[n],!0),c=Object(sub.a)(Object(A.a)(e,"float32"),o);r([t,c]);const d=be(Object(L.a)(c,t));return{value:Object(Wt.a)(d,[n]),gradFunc:(t,e)=>{const[r,o]=e,c=Object(Ft.e)(t.shape,[n]);return[Object(L.a)(Object(M.a)(t,c),Object(sub.a)(Object(A.a)(r,"float32"),Ht(o))),Object(L.a)(Object(M.a)(t,c),Object(sub.a)(Ht(o),Object(A.a)(r,"float32")))]}}}));return r(t,e)}(c,d);return ca(f,h,o)}});const ga={fft:zn,ifft:Pn,rfft:Wn,irfft:Vn},ya={hammingWindow:Fr,hannWindow:Br,frame:Lr,stft:zr},Oa={flipLeftRight:Vr,grayscaleToRGB:Ur,resizeNearestNeighbor:ta,resizeBilinear:Xr,rotateWithOffset:Wr,cropAndResize:Pr,nonMaxSuppression:qr,nonMaxSuppressionAsync:Hr,nonMaxSuppressionWithScore:Zr,nonMaxSuppressionWithScoreAsync:Jr,nonMaxSuppressionPadded:Yr,nonMaxSuppressionPaddedAsync:Qr,threshold:ea,transform:na},ja={bandPart:ra,gramSchmidt:aa,qr:oa},wa={absoluteDifference:ua,computeWeightedLoss:ca,cosineDistance:da,hingeLoss:la,huberLoss:pa,logLoss:ha,meanSquaredError:fa,sigmoidCrossEntropy:ma,softmaxCrossEntropy:ba},xa={sparseFillEmptyRows:Object(h.b)({sparseFillEmptyRows_:function(t,e,n,r){const o=Object(l.a)(t,"indices","sparseFillEmptyRows","int32"),h=Object(l.a)(e,"values","sparseFillEmptyRows"),f=Object(l.a)(n,"denseShape","sparseFillEmptyRows","int32"),m=Object(l.a)(r,"defaultValue","sparseFillEmptyRows",h.dtype);if(2!==o.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${o.shape}`);if(1!==h.rank)throw new Error(`Values should be Tensor1D but received shape ${h.shape}`);if(1!==f.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${f.shape}`);if(0!==m.rank)throw new Error(`Default value should be a scalar but received shape ${m.shape}`);const y={indices:o,values:h,denseShape:f,defaultValue:m},O=c.a.runKernel(d.Ec,y);return{outputIndices:O[0],outputValues:O[1],emptyRowIndicator:O[2],reverseIndexMap:O[3]}}}),sparseReshape:Object(h.b)({sparseReshape_:function(t,e,n){const r=Object(l.a)(t,"inputIndices","sparseReshape","int32"),o=Object(l.a)(e,"inputShape","sparseReshape","int32"),h=Object(l.a)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);if(1!==h.rank)throw new Error(`New shape should be Tensor1D but received shape ${h.shape}`);const f={inputIndices:r,inputShape:o,newShape:h},m=c.a.runKernel(d.Fc,f);return{outputIndices:m[0],outputShape:m[1]}}}),sparseSegmentMean:Object(h.b)({sparseSegmentMean_:function(data,t,e){const n=Object(l.a)(data,"data","sparseSegmentMean"),r=Object(l.a)(t,"indices","sparseSegmentMean","int32"),o=Object(l.a)(e,"segmentIds","sparseSegmentMean","int32");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);const h={data:n,indices:r,segmentIds:o};return c.a.runKernel(d.Gc,h)}}),sparseSegmentSum:Object(h.b)({sparseSegmentSum_:function(data,t,e){const n=Object(l.a)(data,"data","sparseSegmentSum"),r=Object(l.a)(t,"indices","sparseSegmentSum","int32"),o=Object(l.a)(e,"segmentIds","sparseSegmentSum","int32");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);const h={data:n,indices:r,segmentIds:o};return c.a.runKernel(d.Hc,h)}})},Na={stringNGrams:Object(h.b)({stringNGrams_:function(data,t,e,n,r,o,h,f){const m=Object(l.a)(data,"data","stringNGrams","string");if("string"!==m.dtype)throw new Error("Data must be of datatype string");if(1!==m.shape.length)throw new Error(`Data must be a vector, saw: ${m.shape}`);const y=Object(l.a)(t,"dataSplits","stringNGrams");if("int32"!==y.dtype)throw new Error("Data splits must be of datatype int32");const O={separator:e,nGramWidths:n,leftPad:r,rightPad:o,padWidth:h,preserveShortSequences:f},j={data:m,dataSplits:y},w=c.a.runKernel(d.Qc,j,O);return{nGrams:w[0],nGramsSplits:w[1]}}}),stringSplit:Object(h.b)({stringSplit_:function(input,t,e=!0){const n=Object(l.a)(input,"input","stringSplit","string"),r=Object(l.a)(t,"delimiter","stringSplit","string");if(1!==n.rank)throw new Error(`Input should be Tensor1D but received shape ${n.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const o={skipEmpty:e},h={input:n,delimiter:r},f=c.a.runKernel(d.Rc,h,o);return{indices:f[0],values:f[1],shape:f[2]}}}),stringToHashBucketFast:Object(h.b)({stringToHashBucketFast_:function(input,t){const e=Object(l.a)(input,"input","stringToHashBucketFast","string"),n={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:e};return c.a.runKernel(d.Sc,r,n)}}),staticRegexReplace:Object(h.b)({staticRegexReplace_:function(input,pattern,t,e=!0){const n=Object(l.a)(input,"input","staticRegexReplace","string"),r={pattern:pattern,rewrite:t,replaceGlobal:e};return c.a.runKernel(d.Nc,{x:n},r)}})}},962:function(t,e,n){"use strict";(function(t){n(890);var e=n(976),r=n(900);const o=Object(r.b)();o.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),o.registerFlag("IS_BROWSER",(()=>e.a())),o.registerFlag("IS_NODE",(()=>void 0!==t&&void 0!==t.versions&&void 0!==t.versions.node)),o.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),o.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),o.registerFlag("PROD",(()=>!1)),o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>o.getBool("DEBUG"))),o.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),o.registerFlag("IS_TEST",(()=>!1)),o.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>o.getBool("DEBUG"))),o.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),o.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),o.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1))}).call(this,n(98))},963:function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(889),o=n(932);function c(t,e,n){const c=Object(r.c)(t,n);return Object(o.a)(t,e,c,n)}},964:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(888);const h=Object(l.b)({pow_:function(base,t){let e=Object(d.a)(base,"base","pow"),n=Object(d.a)(t,"exp","pow");[e,n]=Object(c.c)(e,n);const l={a:e,b:n};return r.a.runKernel(o.Zb,l)}})},965:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({sigmoid_:function(t){const e={x:Object(c.a)(t,"x","sigmoid","float32")};return r.a.runKernel(o.wc,e)}})},966:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({relu_:function(t){const e={x:Object(c.a)(t,"x","relu")};return r.a.runKernel(o.jc,e)}})},967:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const r={};function o(t){return r[t]}},968:function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return c}));var r=n(900);function o(...t){Object(r.b)().getBool("IS_TEST")||Object(r.b)().getBool("PROD")||console.warn(...t)}function c(...t){Object(r.b)().getBool("IS_TEST")||Object(r.b)().getBool("PROD")||console.log(...t)}},969:function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h})),n.d(e,"c",(function(){return f})),n.d(e,"d",(function(){return m}));n(900);var r=n(975),o=n(968);const c=Object(r.a)("kernelRegistry",(()=>new Map)),d=Object(r.a)("gradRegistry",(()=>new Map));function l(t,e){const n=y(t,e);return c.get(n)}function h(t){return d.get(t)}function f(t){const e=c.entries(),n=[];for(;;){const{done:r,value:o}=e.next();if(r)break;const[c,d]=o,[l]=c.split("_");l===t&&n.push(d)}return n}function m(t){const{kernelName:e,backendName:n}=t,r=y(e,n);c.has(r)&&o.b(`The kernel '${e}' for backend '${n}' is already registered`),c.set(r,t)}function y(t,e){return`${e}_${t}`}},970:function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));class r{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class o{refCount(t){return c("refCount")}incRef(t){return c("incRef")}timerAvailable(){return!0}time(t){return c("time")}read(t){return c("read")}readSync(t){return c("readSync")}readToGPU(t,e){return c("readToGPU")}numDataIds(){return c("numDataIds")}disposeData(t,e){return c("disposeData")}write(t,e,n){return c("write")}move(t,e,n,r,o){return c("move")}createTensorFromGPUData(t,e,n){return c("createTensorFromGPUData")}memory(){return c("memory")}floatPrecision(){return c("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return c("dispose")}}function c(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},971:function(t,e,n){"use strict";n.d(e,"a",(function(){return V}));var r={};n.r(r),n.d(r,"abs",(function(){return f.b})),n.d(r,"acos",(function(){return f.c})),n.d(r,"acosh",(function(){return f.d})),n.d(r,"add",(function(){return f.e})),n.d(r,"addN",(function(){return f.f})),n.d(r,"all",(function(){return f.g})),n.d(r,"any",(function(){return f.h})),n.d(r,"argMax",(function(){return f.i})),n.d(r,"argMin",(function(){return f.j})),n.d(r,"asin",(function(){return f.k})),n.d(r,"asinh",(function(){return f.l})),n.d(r,"atan",(function(){return f.m})),n.d(r,"atan2",(function(){return f.n})),n.d(r,"atanh",(function(){return f.o})),n.d(r,"avgPool",(function(){return f.p})),n.d(r,"avgPool3d",(function(){return f.q})),n.d(r,"basicLSTMCell",(function(){return f.r})),n.d(r,"batchToSpaceND",(function(){return f.w})),n.d(r,"batchNorm",(function(){return f.s})),n.d(r,"batchNorm2d",(function(){return f.t})),n.d(r,"batchNorm3d",(function(){return f.u})),n.d(r,"batchNorm4d",(function(){return f.v})),n.d(r,"bincount",(function(){return f.x})),n.d(r,"bitwiseAnd",(function(){return f.y})),n.d(r,"broadcastArgs",(function(){return f.A})),n.d(r,"broadcastTo",(function(){return f.B})),n.d(r,"buffer",(function(){return f.C})),n.d(r,"cast",(function(){return f.D})),n.d(r,"ceil",(function(){return f.E})),n.d(r,"clipByValue",(function(){return f.F})),n.d(r,"clone",(function(){return f.G})),n.d(r,"complex",(function(){return f.H})),n.d(r,"concat",(function(){return f.I})),n.d(r,"concat1d",(function(){return f.J})),n.d(r,"concat2d",(function(){return f.K})),n.d(r,"concat3d",(function(){return f.L})),n.d(r,"concat4d",(function(){return f.M})),n.d(r,"conv1d",(function(){return f.N})),n.d(r,"conv2d",(function(){return f.O})),n.d(r,"conv2dTranspose",(function(){return f.P})),n.d(r,"conv3d",(function(){return f.Q})),n.d(r,"conv3dTranspose",(function(){return f.R})),n.d(r,"cos",(function(){return f.S})),n.d(r,"cosh",(function(){return f.T})),n.d(r,"cumprod",(function(){return f.V})),n.d(r,"cumsum",(function(){return f.W})),n.d(r,"denseBincount",(function(){return f.X})),n.d(r,"depthToSpace",(function(){return f.Y})),n.d(r,"depthwiseConv2d",(function(){return f.Z})),n.d(r,"diag",(function(){return f.ab})),n.d(r,"dilation2d",(function(){return f.bb})),n.d(r,"div",(function(){return f.cb})),n.d(r,"divNoNan",(function(){return f.db})),n.d(r,"dot",(function(){return f.eb})),n.d(r,"einsum",(function(){return f.gb})),n.d(r,"elu",(function(){return f.hb})),n.d(r,"ensureShape",(function(){return f.jb})),n.d(r,"equal",(function(){return f.kb})),n.d(r,"erf",(function(){return f.lb})),n.d(r,"euclideanNorm",(function(){return f.mb})),n.d(r,"exp",(function(){return f.nb})),n.d(r,"expandDims",(function(){return f.ob})),n.d(r,"expm1",(function(){return f.pb})),n.d(r,"eye",(function(){return f.qb})),n.d(r,"fill",(function(){return f.sb})),n.d(r,"floor",(function(){return f.tb})),n.d(r,"floorDiv",(function(){return f.ub})),n.d(r,"gather",(function(){return f.wb})),n.d(r,"greater",(function(){return f.yb})),n.d(r,"greaterEqual",(function(){return f.zb})),n.d(r,"imag",(function(){return f.Bb})),n.d(r,"isFinite",(function(){return f.Fb})),n.d(r,"isInf",(function(){return f.Gb})),n.d(r,"isNaN",(function(){return f.Hb})),n.d(r,"leakyRelu",(function(){return f.Ib})),n.d(r,"less",(function(){return f.Jb})),n.d(r,"lessEqual",(function(){return f.Kb})),n.d(r,"linspace",(function(){return f.Mb})),n.d(r,"localResponseNormalization",(function(){return f.Nb})),n.d(r,"log",(function(){return f.Ob})),n.d(r,"log1p",(function(){return f.Pb})),n.d(r,"logSigmoid",(function(){return f.Qb})),n.d(r,"logSoftmax",(function(){return f.Rb})),n.d(r,"logSumExp",(function(){return f.Sb})),n.d(r,"logicalAnd",(function(){return f.Tb})),n.d(r,"logicalNot",(function(){return f.Ub})),n.d(r,"logicalOr",(function(){return f.Vb})),n.d(r,"logicalXor",(function(){return f.Wb})),n.d(r,"lowerBound",(function(){return f.Yb})),n.d(r,"matMul",(function(){return f.Zb})),n.d(r,"max",(function(){return f.ac})),n.d(r,"maxPool",(function(){return f.bc})),n.d(r,"maxPool3d",(function(){return f.cc})),n.d(r,"maxPoolWithArgmax",(function(){return f.dc})),n.d(r,"maximum",(function(){return f.ec})),n.d(r,"mean",(function(){return f.fc})),n.d(r,"meshgrid",(function(){return f.gc})),n.d(r,"min",(function(){return f.hc})),n.d(r,"minimum",(function(){return f.ic})),n.d(r,"mirrorPad",(function(){return f.jc})),n.d(r,"mod",(function(){return f.kc})),n.d(r,"moments",(function(){return f.lc})),n.d(r,"mul",(function(){return f.nc})),n.d(r,"multiRNNCell",(function(){return f.oc})),n.d(r,"multinomial",(function(){return f.pc})),n.d(r,"neg",(function(){return f.qc})),n.d(r,"notEqual",(function(){return f.sc})),n.d(r,"oneHot",(function(){return f.tc})),n.d(r,"ones",(function(){return f.uc})),n.d(r,"onesLike",(function(){return f.vc})),n.d(r,"outerProduct",(function(){return f.xc})),n.d(r,"pad",(function(){return f.yc})),n.d(r,"pad1d",(function(){return f.zc})),n.d(r,"pad2d",(function(){return f.Ac})),n.d(r,"pad3d",(function(){return f.Bc})),n.d(r,"pad4d",(function(){return f.Cc})),n.d(r,"pool",(function(){return f.Dc})),n.d(r,"pow",(function(){return f.Ec})),n.d(r,"prelu",(function(){return f.Fc})),n.d(r,"print",(function(){return f.Gc})),n.d(r,"prod",(function(){return f.Hc})),n.d(r,"raggedGather",(function(){return f.Ic})),n.d(r,"raggedRange",(function(){return f.Jc})),n.d(r,"raggedTensorToTensor",(function(){return f.Kc})),n.d(r,"rand",(function(){return f.Lc})),n.d(r,"randomGamma",(function(){return f.Mc})),n.d(r,"randomNormal",(function(){return f.Nc})),n.d(r,"randomStandardNormal",(function(){return f.Oc})),n.d(r,"randomUniform",(function(){return f.Pc})),n.d(r,"randomUniformInt",(function(){return f.Qc})),n.d(r,"range",(function(){return f.Rc})),n.d(r,"real",(function(){return f.Sc})),n.d(r,"reciprocal",(function(){return f.Tc})),n.d(r,"relu",(function(){return f.Uc})),n.d(r,"relu6",(function(){return f.Vc})),n.d(r,"reshape",(function(){return f.Wc})),n.d(r,"reverse",(function(){return f.Xc})),n.d(r,"reverse1d",(function(){return f.Yc})),n.d(r,"reverse2d",(function(){return f.Zc})),n.d(r,"reverse3d",(function(){return f.ad})),n.d(r,"reverse4d",(function(){return f.bd})),n.d(r,"round",(function(){return f.dd})),n.d(r,"rsqrt",(function(){return f.ed})),n.d(r,"scalar",(function(){return f.fd})),n.d(r,"selu",(function(){return f.id})),n.d(r,"separableConv2d",(function(){return f.jd})),n.d(r,"setdiff1dAsync",(function(){return f.kd})),n.d(r,"sigmoid",(function(){return f.ld})),n.d(r,"sign",(function(){return f.md})),n.d(r,"sin",(function(){return f.od})),n.d(r,"sinh",(function(){return f.pd})),n.d(r,"slice",(function(){return f.qd})),n.d(r,"slice1d",(function(){return f.rd})),n.d(r,"slice2d",(function(){return f.sd})),n.d(r,"slice3d",(function(){return f.td})),n.d(r,"slice4d",(function(){return f.ud})),n.d(r,"softmax",(function(){return f.vd})),n.d(r,"softplus",(function(){return f.wd})),n.d(r,"spaceToBatchND",(function(){return f.xd})),n.d(r,"fft",(function(){return f.rb})),n.d(r,"ifft",(function(){return f.Ab})),n.d(r,"irfft",(function(){return f.Eb})),n.d(r,"rfft",(function(){return f.cd})),n.d(r,"split",(function(){return f.Bd})),n.d(r,"sqrt",(function(){return f.Cd})),n.d(r,"square",(function(){return f.Dd})),n.d(r,"squaredDifference",(function(){return f.Ed})),n.d(r,"squeeze",(function(){return f.Fd})),n.d(r,"stack",(function(){return f.Gd})),n.d(r,"step",(function(){return f.Hd})),n.d(r,"stridedSlice",(function(){return f.Id})),n.d(r,"sub",(function(){return f.Kd})),n.d(r,"sum",(function(){return f.Ld})),n.d(r,"tan",(function(){return f.Md})),n.d(r,"tanh",(function(){return f.Nd})),n.d(r,"tensor",(function(){return f.Od})),n.d(r,"tensor1d",(function(){return f.Pd})),n.d(r,"tensor2d",(function(){return f.Qd})),n.d(r,"tensor3d",(function(){return f.Rd})),n.d(r,"tensor4d",(function(){return f.Sd})),n.d(r,"tensor5d",(function(){return f.Td})),n.d(r,"tensor6d",(function(){return f.Ud})),n.d(r,"tensorScatterUpdate",(function(){return f.Vd})),n.d(r,"tile",(function(){return f.Wd})),n.d(r,"topk",(function(){return f.Xd})),n.d(r,"truncatedNormal",(function(){return f.Zd})),n.d(r,"unique",(function(){return f.ae})),n.d(r,"unsortedSegmentSum",(function(){return f.be})),n.d(r,"unstack",(function(){return f.ce})),n.d(r,"upperBound",(function(){return f.de})),n.d(r,"variable",(function(){return f.ee})),n.d(r,"where",(function(){return f.fe})),n.d(r,"whereAsync",(function(){return f.ge})),n.d(r,"zeros",(function(){return f.he})),n.d(r,"zerosLike",(function(){return f.ie})),n.d(r,"booleanMaskAsync",(function(){return f.z})),n.d(r,"transpose",(function(){return f.Yd})),n.d(r,"norm",(function(){return f.rc})),n.d(r,"movingAverage",(function(){return f.mc})),n.d(r,"scatterND",(function(){return f.gd})),n.d(r,"searchSorted",(function(){return f.hd})),n.d(r,"sparseToDense",(function(){return f.zd})),n.d(r,"gatherND",(function(){return f.xb})),n.d(r,"dropout",(function(){return f.fb})),n.d(r,"enclosingPowerOfTwo",(function(){return f.ib})),n.d(r,"cosineWindow",(function(){return f.U})),n.d(r,"inTopKAsync",(function(){return f.Db})),n.d(r,"op",(function(){return f.wc})),n.d(r,"OP_SCOPE_SUFFIX",(function(){return f.a})),n.d(r,"image",(function(){return f.Cb})),n.d(r,"linalg",(function(){return f.Lb})),n.d(r,"losses",(function(){return f.Xb})),n.d(r,"spectral",(function(){return f.Ad})),n.d(r,"fused",(function(){return f.vb})),n.d(r,"signal",(function(){return f.nd})),n.d(r,"sparse",(function(){return f.yd})),n.d(r,"string",(function(){return f.Jd}));var o=n(906);Object(o.ad)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(t=>{t&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}));var c=n(997),d=n(896);class l{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return Object(d.e)(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Object(d.e)(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(c.f)(this.node.rawAttrs,t,e);if(null!=n.s)return Object(c.i)(this.node.rawAttrs,t,e);if(null!=n.b)return Object(c.c)(this.node.rawAttrs,t,e);if(null!=n.shape)return Object(c.k)(this.node.rawAttrs,t,e);if(null!=n.type)return Object(c.e)(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(c.g)(this.node.rawAttrs,t,e);if(null!=n.list.s)return Object(c.h)(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Object(c.j)(this.node.rawAttrs,t,e);if(null!=n.list.b)return Object(c.b)(this.node.rawAttrs,t,e);if(null!=n.list.type)return Object(c.d)(this.node.rawAttrs,t,e)}return e}}var h=n(967),f=n(955);function m(t,e,n=""){if("number"!=typeof t&&"number"!=typeof e){o.Ed.assert(t.length===e.length,(()=>n+` Shapes ${t} and ${e} must match`));for(let i=0;i<t.length;i++){const r=t[i],c=e[i];o.Ed.assert(r<0||c<0||r===c,(()=>n+` Shapes ${t} and ${e} must match`))}}}function y(t){return"number"!=typeof t&&!t.some((t=>t<0))}function O(t,e,n){let r=j(t,n);const o=!y(r);if(o&&0===e.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(o&&e.forEach((t=>{r=j(t.shape,r)})),!y(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function j(t,e){if("number"==typeof t)return e;if("number"==typeof e)return t;if(t.length!==e.length)throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);const n=[];for(let i=0;i<t.length;++i){const r=t[i],o=e[i];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);n[i]=r>=0?r:o}return n}class w{constructor(t,e,n,r,c,d,l){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=c,this.dynamicSize=d,this.clearAfterRead=l,this.tensors=[],this.closed_=!1,this.idTensor=Object(o.pd)(0),Object(o.gd)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),m(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Object(o.gd)(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((i,t)=>this.write(i,e[t])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let i=0;i<this.size();i++)t.push(i)}if(0===t.length)return Object(o.yd)([],[0].concat(this.elementShape));const n=this.readMany(t);return m(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(o.vd)(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Object(o.yd)([],[0].concat(this.elementShape));const e=[];for(let i=0;i<this.size();i++)e.push(i);const n=this.readMany(e);return m(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(o.Wc)(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Object(o.Cd)(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const c=0===n?0:e.size/n,d=[];Object(o.Bd)((()=>{e=Object(o.od)(e,[1,n,c]);for(let i=0;i<t.length;++i){const n=[0,0===i?0:r[i-1],0],l=[1,t[i],c];d[i]=Object(o.od)(Object(o.rd)(e,n,l),this.elementShape)}return d}));const l=[];for(let i=0;i<t.length;i++)l[i]=i;this.writeMany(l,d)}}class x{get id(){return this.idTensor.id}constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);m(e,t.shape,"TensorList shape mismatch: "),Object(o.gd)(t)})),this.idTensor=Object(o.pd)(0),this.maxNumElements=r,Object(o.gd)(this.idTensor)}copy(){return new x([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);m(t,this.elementShape,"TensorList shape mismatch: ");const r=O(this.elementShape,this.tensors,t);return Object(o.Bd)((()=>{const t=this.tensors.map((t=>Object(o.od)(t,r)));return Object(o.vd)(t,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=O(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,m(r.shape,t,"TensorList shape mismatch: "),Object(o.od)(r,n)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(m(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(o.gd)(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new x([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let i=0;i<Math.min(this.tensors.length,t);++i)e.tensors[i]=this.tensors[i];return e}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);m(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=O(this.elementShape,this.tensors,e);return Object(o.od)(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);m(this.elementShape,e.shape,"TensorList shape mismatch: "),Object(o.gd)(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);m(this.elementShape,n,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=O(this.elementShape,this.tensors,n);return 0===t.length?Object(o.yd)([],[0].concat(r)):Object(o.Bd)((()=>{const e=t.map((i=>Object(o.od)(this.tensors[i],r)));return Object(o.vd)(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);m(this.elementShape,e,"TensorList shape mismatch: ");const n=O(this.elementShape,this.tensors,e);return 0===this.size()?Object(o.yd)([],[0].concat(n)):Object(o.Bd)((()=>{const t=this.tensors.map((t=>Object(o.od)(t,n)));return Object(o.Wc)(t,0)}))}}const N=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Object(d.d)("thenBranch",t,e,n),o=Object(d.d)("elseBranch",t,e,n),c=Object(d.d)("cond",t,e,n),l=Object(d.d)("args",t,e,n);return(await c.data())[0]?n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap):n.functionMap[o].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(d.d)("body",t,e,n),o=Object(d.d)("cond",t,e,n),c=Object(d.d)("args",t,e,n),l=await n.functionMap[o].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap),h=c.map((t=>t.id));let f=await l[0].data();l.forEach((t=>{t.kept||-1!==h.indexOf(t.id)||t.dispose()}));let m=c;for(;f[0];){const t=m;m=await n.functionMap[r].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);const e=m.map((t=>t.id));t.forEach((t=>{t.kept||-1!==h.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const c=await n.functionMap[o].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);f=await c[0].data(),c.forEach((t=>{t.kept||-1!==h.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return m}case"LoopCond":{const r=Object(d.d)("pred",t,e,n);return[Object(d.a)(r)]}case"Switch":{const r=Object(d.d)("pred",t,e,n);let data=Object(d.d)("data",t,e,n);return data.kept||(data=Object(d.a)(data)),(await r.data())[0]?[void 0,data]:[data,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==Object(d.e)(t,e,n)));if(r){const data=Object(d.e)(r,e,n);return[Object(d.a)(data)]}return}case"Enter":{const r=Object(d.d)("frameName",t,e,n),data=Object(d.d)("tensor",t,e,n);return n.enterFrame(r),[Object(d.a)(data)]}case"Exit":{const data=Object(d.d)("tensor",t,e,n);return n.exitFrame(),[Object(d.a)(data)]}case"NextIteration":{const data=Object(d.d)("tensor",t,e,n);return n.nextIteration(),[Object(d.a)(data)]}case"TensorArrayV3":{const r=Object(d.d)("size",t,e,n),c=Object(d.d)("dtype",t,e,n),l=Object(d.d)("elementShape",t,e,n),h=Object(d.d)("dynamicSize",t,e,n),f=Object(d.d)("clearAfterRead",t,e,n),m=Object(d.d)("identicalElementShapes",t,e,n),y=Object(d.d)("name",t,e,n),O=new w(y,c,r,l,m,h,f);return n.addTensorArray(O),[O.idTensor,Object(o.pd)(1)]}case"TensorArrayWriteV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=Object(d.d)("index",t,e,n),c=Object(d.d)("tensor",t,e,n),l=n.getTensorArray(r.id);return l.write(o,c),[l.idTensor]}case"TensorArrayReadV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=Object(d.d)("index",t,e,n);return[n.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=Object(d.d)("indices",t,e,n),c=Object(d.d)("dtype",t,e,n);return[n.getTensorArray(r.id).gather(o,c)]}case"TensorArrayScatterV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=Object(d.d)("indices",t,e,n),c=Object(d.d)("tensor",t,e,n),l=n.getTensorArray(r.id);return l.scatter(o,c),[l.idTensor]}case"TensorArrayConcatV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=n.getTensorArray(r.id),c=Object(d.d)("dtype",t,e,n);return[o.concat(c)]}case"TensorArraySplitV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=Object(d.d)("tensor",t,e,n),c=Object(d.d)("lengths",t,e,n),l=n.getTensorArray(r.id);return l.split(c,o),[l.idTensor]}case"TensorArraySizeV3":{const r=Object(d.d)("tensorArrayId",t,e,n),c=n.getTensorArray(r.id);return[Object(o.pd)(c.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(d.d)("tensorArrayId",t,e,n),o=n.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("index",t,e,n),c=Object(d.d)("tensor",t,e,n),l=n.getTensorList(r.id);return l.setItem(o,c),[l.idTensor]}case"TensorListGetItem":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("index",t,e,n),c=Object(d.d)("elementShape",t,e,n),l=Object(d.d)("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(o,c,l)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Object(d.d)("indices",t,e,n),c=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const c=Math.max(...e);if(null!=r&&-1!==r&&c>=r)throw new Error(`Max index must be < array size (${c}  vs. ${r})`);const d=new x([],n,t.dtype,r),l=Object(o.Cd)(t,0);return e.forEach(((t,e)=>{d.setItem(t,l[e])})),d}(Object(d.d)("tensor",t,e,n),r,Object(d.d)("elementShape",t,e,n),Object(d.d)("numElements",t,e,n));return n.addTensorList(c),[c.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Object(d.d)("elementShape",t,e,n),o=Object(d.d)("elementDType",t,e,n);let c;c="TensorListReserve"===t.op?"numElements":"maxNumElements";const l=Object(d.d)(c,t,e,n),h=function(t,e,n,r){return new x([],t,e,r)}(r,o,0,"TensorListReserve"===t.op?-1:l);return n.addTensorList(h),[h.idTensor]}case"TensorListGather":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("indices",t,e,n),c=Object(d.d)("elementShape",t,e,n),l=Object(d.d)("elementDType",t,e,n);return[n.getTensorList(r.id).gather(o,l,c)]}case"TensorListStack":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("elementShape",t,e,n),c=Object(d.d)("elementDType",t,e,n),l=Object(d.d)("numElements",t,e,n);return[n.getTensorList(r.id).stack(o,c,l)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);m(t.shape.slice(1),e,"TensorList shape mismatch: ");const c=Object(o.Cd)(t);return new x(c,e,r)}(Object(d.d)("tensor",t,e,n),Object(d.d)("elementShape",t,e,n),Object(d.d)("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Object(d.d)("tensorListId",t,e,n),o=n.getTensorList(r.id),c=Object(d.d)("dtype",t,e,n),l=Object(d.d)("elementShape",t,e,n);return[o.concat(c,l)]}case"TensorListPushBack":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("tensor",t,e,n),c=n.getTensorList(r.id);return c.pushBack(o),[c.idTensor]}case"TensorListPopBack":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("elementShape",t,e,n),c=Object(d.d)("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(o,c)]}case"TensorListSplit":{const r=Object(d.d)("tensor",t,e,n),c=Object(d.d)("elementShape",t,e,n),l=function(t,e,n){let r=0;const c=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const d=j(t.shape.slice(1),n),l=0===r?0:t.size/r,h=Object(o.Bd)((()=>{const n=[];t=Object(o.od)(t,[1,r,l]);for(let i=0;i<e.length;++i){const r=[0,0===i?0:c[i-1],0],h=[1,e[i],l];n[i]=Object(o.od)(Object(o.rd)(t,r,h),d)}return t.dispose(),n})),f=new x([],n,t.dtype,e.length);for(let i=0;i<h.length;i++)f.setItem(i,h[i]);return f}(r,Object(d.d)("lengths",t,e,n),c);return n.addTensorList(l),[l.idTensor]}case"TensorListLength":{const r=Object(d.d)("tensorListId",t,e,n),c=n.getTensorList(r.id);return[Object(o.pd)(c.size(),"int32")]}case"TensorListResize":{const r=Object(d.d)("tensorListId",t,e,n),o=Object(d.d)("size",t,e,n),c=n.getTensorList(r.id).resize(o);return n.addTensorList(c),[c.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function v(t,e,n){const[r,o]=Object(d.d)("fusedOps",t,e,n),c="biasadd"===r,l=!c,h="prelu"===o,f="fusedbatchnorm"===r,m=Object(d.d)("numArgs",t,e,n);if(c){if(h&&2!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!h&&c&&1!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(f)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const y=Object(d.d)("strides",t,e,n),O=Object(d.c)(t,e,n),j=Object(d.d)("dataFormat",t,e,n).toUpperCase(),w=Object(d.d)("dilations",t,e,n);let[x,N]=Object(d.d)("args",t,e,n);l&&(N=x,x=void 0);return{stride:y,pad:O,dataFormat:j,dilations:w,biasArg:x,preluArg:N,activationFunc:o,leakyreluAlpha:Object(d.d)("leakyreluAlpha",t,e,n)}}function S(t,e,n){return{boxes:Object(d.d)("boxes",t,e,n),scores:Object(d.d)("scores",t,e,n),maxOutputSize:Object(d.d)("maxOutputSize",t,e,n),iouThreshold:Object(d.d)("iouThreshold",t,e,n),scoreThreshold:Object(d.d)("scoreThreshold",t,e,n),softNmsSigma:Object(d.d)("softNmsSigma",t,e,n)}}var T=n(903);class k{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Object(o.pd)(0),this.tensorMap=new Map,Object(o.gd)(this.handle)}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return T.a(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),Object(o.Bd)((()=>{const t=Object(o.Cd)(e),r=n.length,c=t.length;o.Ed.assert(r===c,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${c} elements.`));for(let i=0;i<r;i++){const e=n[i],r=t[i];Object(o.gd)(r),this.tensorMap.set(e,r)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Object(o.Bd)((()=>{const t=[];for(let i=0;i<n.length;i++){const r=n[i],o=this.findWithDefault(r,e);t.push(o)}return Object(o.vd)(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function E(t,e,n,c,f=o.Bd){const m=((t,e,n)=>{switch(t.category){case"arithmetic":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"AddN":return[o.addN(Object(d.d)("tensors",t,e,n))];case"FloorMod":case"Mod":return[o.mod(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Mul":return[o.mul(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"RealDiv":case"Div":return[o.div(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"DivNoNan":return[o.divNoNan(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"FloorDiv":return[o.floorDiv(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Sub":return[o.sub(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Minimum":return[o.minimum(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Maximum":return[o.maximum(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Pow":return[o.pow(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"SquaredDifference":return[o.squaredDifference(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"basic_math":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Abs":case"ComplexAbs":return[o.abs(Object(d.d)("x",t,e,n))];case"Acos":return[o.acos(Object(d.d)("x",t,e,n))];case"Acosh":return[o.acosh(Object(d.d)("x",t,e,n))];case"Asin":return[o.asin(Object(d.d)("x",t,e,n))];case"Asinh":return[o.asinh(Object(d.d)("x",t,e,n))];case"Atan":return[o.atan(Object(d.d)("x",t,e,n))];case"Atan2":return[o.atan2(Object(d.d)("x",t,e,n),Object(d.d)("y",t,e,n))];case"Atanh":return[o.atanh(Object(d.d)("x",t,e,n))];case"Ceil":return[o.ceil(Object(d.d)("x",t,e,n))];case"Complex":return[o.complex(Object(d.d)("real",t,e,n),Object(d.d)("imag",t,e,n))];case"Cos":return[o.cos(Object(d.d)("x",t,e,n))];case"Cosh":return[o.cosh(Object(d.d)("x",t,e,n))];case"Elu":return[o.elu(Object(d.d)("x",t,e,n))];case"Erf":return[o.erf(Object(d.d)("x",t,e,n))];case"Exp":return[o.exp(Object(d.d)("x",t,e,n))];case"Expm1":return[o.expm1(Object(d.d)("x",t,e,n))];case"Floor":return[o.floor(Object(d.d)("x",t,e,n))];case"Log":return[o.log(Object(d.d)("x",t,e,n))];case"Log1p":return[o.log1p(Object(d.d)("x",t,e,n))];case"Imag":return[o.imag(Object(d.d)("x",t,e,n))];case"Neg":return[o.neg(Object(d.d)("x",t,e,n))];case"Reciprocal":return[o.reciprocal(Object(d.d)("x",t,e,n))];case"Real":return[o.real(Object(d.d)("x",t,e,n))];case"Relu":return[o.relu(Object(d.d)("x",t,e,n))];case"Round":return[o.round(Object(d.d)("x",t,e,n))];case"Selu":return[o.selu(Object(d.d)("x",t,e,n))];case"Sigmoid":return[o.sigmoid(Object(d.d)("x",t,e,n))];case"Sin":return[o.sin(Object(d.d)("x",t,e,n))];case"Sign":return[o.sign(Object(d.d)("x",t,e,n))];case"Sinh":return[o.sinh(Object(d.d)("x",t,e,n))];case"Softplus":return[o.softplus(Object(d.d)("x",t,e,n))];case"Sqrt":return[o.sqrt(Object(d.d)("x",t,e,n))];case"Square":return[o.square(Object(d.d)("x",t,e,n))];case"Tanh":return[o.tanh(Object(d.d)("x",t,e,n))];case"Tan":return[o.tan(Object(d.d)("x",t,e,n))];case"ClipByValue":return[o.clipByValue(Object(d.d)("x",t,e,n),Object(d.d)("clipValueMin",t,e,n),Object(d.d)("clipValueMax",t,e,n))];case"Relu6":return[o.relu6(Object(d.d)("x",t,e,n))];case"Rsqrt":return[o.rsqrt(Object(d.e)(t.inputNames[0],e,n))];case"LeakyRelu":return[o.leakyRelu(Object(d.d)("x",t,e,n),Object(d.d)("alpha",t,e,n))];case"Prelu":return[o.prelu(Object(d.d)("x",t,e,n),Object(d.d)("alpha",t,e,n))];case"IsNan":return[o.isNaN(Object(d.e)(t.inputNames[0],e,n))];case"IsInf":return[o.isInf(Object(d.e)(t.inputNames[0],e,n))];case"IsFinite":return[o.isFinite(Object(d.e)(t.inputNames[0],e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"control":return N(t,e,n);case"convolution":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Conv1D":{const r=Object(d.d)("stride",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("dataFormat",t,e,n).toUpperCase(),h=Object(d.d)("dilation",t,e,n);return[o.conv1d(Object(d.d)("x",t,e,n),Object(d.d)("filter",t,e,n),r,c,l,h)]}case"Conv2D":{const r=Object(d.d)("strides",t,e,n),c=Object(d.c)(t,e,n),l=Object(d.d)("dataFormat",t,e,n).toUpperCase(),h=Object(d.d)("dilations",t,e,n);return[o.conv2d(Object(d.d)("x",t,e,n),Object(d.d)("filter",t,e,n),[r[1],r[2]],c,l,[h[1],h[2]])]}case"_FusedConv2D":{const{stride:r,pad:c,dataFormat:l,dilations:h,biasArg:f,preluArg:m,activationFunc:y,leakyreluAlpha:O}=v(t,e,n);return[o.fused.conv2d({x:Object(d.d)("x",t,e,n),filter:Object(d.d)("filter",t,e,n),strides:[r[1],r[2]],pad:c,dataFormat:l,dilations:[h[1],h[2]],bias:f,activation:y,preluActivationWeights:m,leakyreluAlpha:O})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:c,dataFormat:l,dilations:h,biasArg:f,preluArg:m,activationFunc:y,leakyreluAlpha:O}=v(t,e,n);return[o.fused.depthwiseConv2d({x:Object(d.d)("x",t,e,n),filter:Object(d.d)("filter",t,e,n),strides:[r[1],r[2]],pad:c,dataFormat:l,dilations:[h[1],h[2]],bias:f,activation:y,preluActivationWeights:m,leakyreluAlpha:O})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(d.d)("outputShape",t,e,n),c=Object(d.d)("strides",t,e,n),l=Object(d.c)(t,e,n);return[o.conv2dTranspose(Object(d.d)("x",t,e,n),Object(d.d)("filter",t,e,n),r,[c[1],c[2]],l)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(d.d)("strides",t,e,n),c=Object(d.c)(t,e,n),l=Object(d.d)("dilations",t,e,n),h=Object(d.d)("dataFormat",t,e,n).toUpperCase();return[o.depthwiseConv2d(Object(d.d)("input",t,e,n),Object(d.d)("filter",t,e,n),[r[1],r[2]],c,h,[l[1],l[2]])]}case"Conv3D":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("dataFormat",t,e,n).toUpperCase(),h=Object(d.d)("dilations",t,e,n);return[o.conv3d(Object(d.d)("x",t,e,n),Object(d.d)("filter",t,e,n),[r[1],r[2],r[3]],c,l,[h[1],h[2],h[3]])]}case"AvgPool":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("kernelSize",t,e,n);return[o.avgPool(Object(d.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],c)]}case"MaxPool":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("kernelSize",t,e,n);return[o.maxPool(Object(d.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],c)]}case"MaxPoolWithArgmax":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("kernelSize",t,e,n),h=Object(d.d)("includeBatchInIndex",t,e,n),{result:f,indexes:m}=o.maxPoolWithArgmax(Object(d.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],c,h);return[f,m]}case"AvgPool3D":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("kernelSize",t,e,n);return[o.avgPool3d(Object(d.d)("x",t,e,n),[l[1],l[2],l[3]],[r[1],r[2],r[3]],c)]}case"MaxPool3D":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("kernelSize",t,e,n);return[o.maxPool3d(Object(d.d)("x",t,e,n),[l[1],l[2],l[3]],[r[1],r[2],r[3]],c)]}case"Dilation2D":{const r=Object(d.d)("strides",t,e,n),c=Object(d.d)("pad",t,e,n),l=Object(d.d)("dilations",t,e,n),h=r[1],f=r[2],m=l[1],y=l[2];return[o.dilation2d(Object(d.d)("x",t,e,n),Object(d.d)("filter",t,e,n),[h,f],c,[m,y],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"creation":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Fill":{const r=Object(d.d)("shape",t,e,n),c=Object(d.d)("dtype",t,e,n),l=Object(d.d)("value",t,e,n);return[o.fill(r,l,c)]}case"LinSpace":{const r=Object(d.d)("start",t,e,n),c=Object(d.d)("stop",t,e,n),l=Object(d.d)("num",t,e,n);return[o.linspace(r,c,l)]}case"Multinomial":{const r=Object(d.d)("logits",t,e,n),c=Object(d.d)("numSamples",t,e,n),l=Object(d.d)("seed",t,e,n);return[o.multinomial(r,c,l)]}case"OneHot":{const r=Object(d.d)("indices",t,e,n),c=Object(d.d)("depth",t,e,n),l=Object(d.d)("onValue",t,e,n),h=Object(d.d)("offValue",t,e,n),f=Object(d.d)("dtype",t,e,n);return[o.oneHot(r,c,l,h,f)]}case"Ones":return[o.ones(Object(d.d)("shape",t,e,n),Object(d.d)("dtype",t,e,n))];case"OnesLike":return[o.onesLike(Object(d.d)("x",t,e,n))];case"RandomStandardNormal":return[o.randomStandardNormal(Object(d.d)("shape",t,e,n),Object(d.d)("dtype",t,e,n),Object(d.d)("seed",t,e,n))];case"RandomUniform":return[o.randomUniform(Object(d.d)("shape",t,e,n),Object(d.d)("minval",t,e,n),Object(d.d)("maxval",t,e,n),Object(d.d)("dtype",t,e,n))];case"RandomUniformInt":return[o.randomUniformInt(Object(d.d)("shape",t,e,n),Object(d.d)("minval",t,e,n),Object(d.d)("maxval",t,e,n),Object(d.d)("seed",t,e,n))];case"Range":{const r=Object(d.d)("start",t,e,n),c=Object(d.d)("stop",t,e,n),l=Object(d.d)("step",t,e,n);return[o.range(r,c,l,Object(d.d)("dtype",t,e,n))]}case"TruncatedNormal":{const r=Object(d.d)("shape",t,e,n),c=Object(d.d)("mean",t,e,n),l=Object(d.d)("stdDev",t,e,n),h=Object(d.d)("seed",t,e,n);return[o.truncatedNormal(r,c,l,Object(d.d)("dtype",t,e,n),h)]}case"Zeros":return[o.zeros(Object(d.d)("shape",t,e,n),Object(d.d)("dtype",t,e,n))];case"ZerosLike":return[o.zerosLike(Object(d.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"dynamic":return(async(t,e,n,o,c=r)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:o,maxOutputSize:d,iouThreshold:l,scoreThreshold:h,softNmsSigma:f}=S(t,e,n),m=await c.image.nonMaxSuppressionWithScoreAsync(r,o,d,l,h,f);return[m.selectedIndices,m.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:o,maxOutputSize:l,iouThreshold:h,scoreThreshold:f}=S(t,e,n),m=Object(d.d)("padToMaxOutputSize",t,e,n),y=await c.image.nonMaxSuppressionPaddedAsync(r,o,l,h,f,m);return[y.selectedIndices,y.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:o,maxOutputSize:d,iouThreshold:l,scoreThreshold:h}=S(t,e,n);return[await c.image.nonMaxSuppressionAsync(r,o,d,l,h)]}case"Where":{const r=c.cast(Object(d.d)("condition",t,e,n),"bool"),o=[await c.whereAsync(r)];return r.dispose(),o}case"ListDiff":return c.setdiff1dAsync(Object(d.d)("x",t,e,n),Object(d.d)("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"LowerBound":{const r=Object(d.d)("sortedSequence",t,e,n),c=Object(d.d)("values",t,e,n);return[o.lowerBound(r,c)]}case"TopKV2":{const r=Object(d.d)("x",t,e,n),c=Object(d.d)("k",t,e,n),l=Object(d.d)("sorted",t,e,n),h=o.topk(r,c,l);return[h.values,h.indices]}case"UpperBound":{const r=Object(d.d)("sortedSequence",t,e,n),c=Object(d.d)("values",t,e,n);return[o.upperBound(r,c)]}case"Unique":{const r=Object(d.d)("x",t,e,n),c=o.unique(r);return[c.values,c.indices]}case"UniqueV2":{const r=Object(d.d)("x",t,e,n),c=Object(d.d)("axis",t,e,n),l=o.unique(r,c);return[l.values,l.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"image":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"ResizeBilinear":{const r=Object(d.d)("images",t,e,n),c=Object(d.d)("size",t,e,n),l=Object(d.d)("alignCorners",t,e,n),h=Object(d.d)("halfPixelCenters",t,e,n);return[o.image.resizeBilinear(r,[c[0],c[1]],l,h)]}case"ResizeNearestNeighbor":{const r=Object(d.d)("images",t,e,n),c=Object(d.d)("size",t,e,n),l=Object(d.d)("alignCorners",t,e,n),h=Object(d.d)("halfPixelCenters",t,e,n);return[o.image.resizeNearestNeighbor(r,[c[0],c[1]],l,h)]}case"CropAndResize":{const image=Object(d.d)("image",t,e,n),r=Object(d.d)("boxes",t,e,n),c=Object(d.d)("boxInd",t,e,n),l=Object(d.d)("cropSize",t,e,n),h=Object(d.d)("method",t,e,n),f=Object(d.d)("extrapolationValue",t,e,n);return[o.image.cropAndResize(image,r,c,l,h,f)]}case"ImageProjectiveTransformV3":{const r=Object(d.d)("images",t,e,n),c=Object(d.d)("transforms",t,e,n),l=Object(d.d)("outputShape",t,e,n),h=Object(d.d)("fillValue",t,e,n),f=Object(d.d)("interpolation",t,e,n),m=Object(d.d)("fillMode",t,e,n);return[o.image.transform(r,c,f.toLowerCase(),m.toLowerCase(),h,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"graph":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Object(d.d)("default",t,e,n);return[Object(d.e)(t.name,e,n)||r];case"Placeholder":return[Object(d.e)(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const data=Object(d.d)("x",t,e,n);return[Object(d.a)(data)]}case"IdentityN":return Object(d.d)("x",t,e,n).map((t=>Object(d.a)(t)));case"Snapshot":const c=Object(d.d)("x",t,e,n);return[Object(d.a)(c)];case"Shape":return[o.tensor1d(Object(d.d)("x",t,e,n).shape,"int32")];case"ShapeN":return Object(d.d)("x",t,e,n).map((t=>o.tensor1d(t.shape)));case"Size":return[o.scalar(Object(d.d)("x",t,e,n).size,"int32")];case"Rank":return[o.scalar(Object(d.d)("x",t,e,n).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":const input=Object(d.d)("x",t,e,n),data=Object(d.d)("data",t,e,n),l=Object(d.d)("message",t,e,n),h=Object(d.d)("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let i=0;i<data.length;i++)console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0,h));return[input];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"logical":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Equal":return[o.equal(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"NotEqual":return[o.notEqual(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Greater":return[o.greater(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"GreaterEqual":return[o.greaterEqual(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Less":return[o.less(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"LessEqual":return[o.lessEqual(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"LogicalAnd":return[o.logicalAnd(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"LogicalNot":return[o.logicalNot(Object(d.d)("a",t,e,n))];case"LogicalOr":return[o.logicalOr(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"Select":case"SelectV2":return[o.where(Object(d.d)("condition",t,e,n),Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];case"BitwiseAnd":return[o.bitwiseAnd(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"matrices":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(Object(d.d)("a",t,e,n),Object(d.d)("b",t,e,n),Object(d.d)("transposeA",t,e,n),Object(d.d)("transposeB",t,e,n))];case"Einsum":return[o.einsum(Object(d.d)("equation",t,e,n),...Object(d.d)("tensors",t,e,n))];case"Transpose":return[o.transpose(Object(d.d)("x",t,e,n),Object(d.d)("perm",t,e,n))];case"_FusedMatMul":const[r,c]=Object(d.d)("fusedOps",t,e,n),l="biasadd"===r,h="prelu"===c,f=Object(d.d)("numArgs",t,e,n),m=Object(d.d)("leakyreluAlpha",t,e,n);if(l){if(h&&2!==f)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!h&&1!==f)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[y,O]=Object(d.d)("args",t,e,n);return[o.fused.matMul({a:Object(d.d)("a",t,e,n),b:Object(d.d)("b",t,e,n),transposeA:Object(d.d)("transposeA",t,e,n),transposeB:Object(d.d)("transposeB",t,e,n),bias:y,activation:c,preluActivationWeights:O,leakyreluAlpha:m})];case"MatrixBandPart":return[o.linalg.bandPart(Object(d.d)("a",t,e,n),Object(d.d)("numLower",t,e,n),Object(d.d)("numUpper",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"normalization":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"EuclideanNorm":return[o.euclideanNorm(Object(d.d)("x",t,e,n),Object(d.d)("axis",t,e,n),Object(d.d)("keepDims",t,e,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[o.batchNorm(Object(d.d)("x",t,e,n),Object(d.d)("mean",t,e,n),Object(d.d)("variance",t,e,n),Object(d.d)("offset",t,e,n),Object(d.d)("scale",t,e,n),Object(d.d)("epsilon",t,e,n))];case"LRN":return[o.localResponseNormalization(Object(d.d)("x",t,e,n),Object(d.d)("radius",t,e,n),Object(d.d)("bias",t,e,n),Object(d.d)("alpha",t,e,n),Object(d.d)("beta",t,e,n))];case"Softmax":return[o.softmax(Object(d.d)("x",t,e,n))];case"LogSoftmax":return[o.logSoftmax(Object(d.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"ragged":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:c}=o.raggedGather(Object(d.d)("paramsNestedSplits",t,e,n),Object(d.d)("paramsDenseValues",t,e,n),Object(d.d)("indices",t,e,n),Object(d.d)("outputRaggedRank",t,e,n));return r.concat(c)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:c}=o.raggedRange(Object(d.d)("starts",t,e,n),Object(d.d)("limits",t,e,n),Object(d.d)("splits",t,e,n));return[r,c]}case"RaggedTensorToTensor":return[o.raggedTensorToTensor(Object(d.d)("shape",t,e,n),Object(d.d)("values",t,e,n),Object(d.d)("defaultValue",t,e,n),Object(d.d)("rowPartitionTensors",t,e,n),Object(d.d)("rowPartitionTypes",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"reduction":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Max":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.max(Object(d.d)("x",t,e,n),r,c)]}case"Mean":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.mean(Object(d.d)("x",t,e,n),r,c)]}case"Min":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.min(Object(d.d)("x",t,e,n),r,c)]}case"Sum":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.sum(Object(d.d)("x",t,e,n),r,c)]}case"All":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.all(Object(d.d)("x",t,e,n),r,c)]}case"Any":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.any(Object(d.d)("x",t,e,n),r,c)]}case"ArgMax":{const r=Object(d.d)("axis",t,e,n);return[o.argMax(Object(d.d)("x",t,e,n),r)]}case"ArgMin":{const r=Object(d.d)("axis",t,e,n);return[o.argMin(Object(d.d)("x",t,e,n),r)]}case"Prod":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("keepDims",t,e,n);return[o.prod(Object(d.d)("x",t,e,n),r,c)]}case"Cumprod":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("exclusive",t,e,n),l=Object(d.d)("reverse",t,e,n);return[o.cumprod(Object(d.d)("x",t,e,n),r,c,l)]}case"Cumsum":{const r=Object(d.d)("axis",t,e,n),c=Object(d.d)("exclusive",t,e,n),l=Object(d.d)("reverse",t,e,n);return[o.cumsum(Object(d.d)("x",t,e,n),r,c,l)]}case"Bincount":const r=Object(d.d)("x",t,e,n),c=Object(d.d)("weights",t,e,n),l=Object(d.d)("size",t,e,n);return[o.bincount(r,c,l)];case"DenseBincount":{const r=Object(d.d)("x",t,e,n),c=Object(d.d)("weights",t,e,n),l=Object(d.d)("size",t,e,n),h=Object(d.d)("binaryOutput",t,e,n);return[o.denseBincount(r,c,l,h)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"slice_join":return f((()=>((t,e,n,c=r)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Object(d.d)("n",t,e,n),o=Object(d.d)("axis",t,e,n);let l=Object(d.d)("tensors",t,e,n);return l=l.slice(0,r),[c.concat(l,o)]}case"Gather":{const input=Object(d.d)("x",t,e,n),r=Object(d.d)("indices",t,e,n);return[c.gather(input,c.cast(r,"int32"),0)]}case"GatherV2":{const r=Object(d.d)("axis",t,e,n),o=Object(d.d)("batchDims",t,e,n),input=Object(d.d)("x",t,e,n),l=Object(d.d)("indices",t,e,n);return[c.gather(input,c.cast(l,"int32"),r,o)]}case"Reverse":{const r=Object(d.d)("dims",t,e,n),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const input=Object(d.d)("x",t,e,n);return[c.reverse(input,o)]}case"ReverseV2":{const r=Object(d.d)("axis",t,e,n),input=Object(d.d)("x",t,e,n);return[c.reverse(input,r)]}case"Slice":{const r=Object(d.d)("begin",t,e,n),o=Object(d.d)("size",t,e,n);return[c.slice(Object(d.d)("x",t,e,n),r,o)]}case"StridedSlice":{const r=Object(d.d)("begin",t,e,n),o=Object(d.d)("end",t,e,n),l=Object(d.d)("strides",t,e,n),h=Object(d.d)("beginMask",t,e,n),f=Object(d.d)("endMask",t,e,n),m=Object(d.d)("ellipsisMask",t,e,n),y=Object(d.d)("newAxisMask",t,e,n),O=Object(d.d)("shrinkAxisMask",t,e,n),j=Object(d.d)("x",t,e,n);return[c.stridedSlice(j,r,o,l,h,f,m,y,O)]}case"Pack":return Object(o.Bd)((()=>{const r=Object(d.d)("axis",t,e,n),l=Object(d.d)("tensors",t,e,n),h=l[0].shape,f=c.squeeze(l[0]).shape,m=l.map((t=>{const e=o.Ed.arraysEqual(t.shape,h);if(!e&&!o.Ed.arraysEqual(c.squeeze(t).shape,f))throw new Error("the input tensors shape does not match");return e?t:c.reshape(t,h)}));return[c.stack(m,r)]}));case"Unpack":{const r=Object(d.d)("axis",t,e,n),o=Object(d.d)("tensor",t,e,n);return c.unstack(o,r)}case"Tile":{const r=Object(d.d)("reps",t,e,n);return[c.tile(Object(d.d)("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Object(d.d)("axis",t,e,n),o=Object(d.d)("numOrSizeSplits",t,e,n),l=Object(d.d)("x",t,e,n);return c.split(l,o,r)}case"ScatterNd":{const r=Object(d.d)("indices",t,e,n),o=Object(d.d)("values",t,e,n),l=Object(d.d)("shape",t,e,n);return[c.scatterND(r,o,l)]}case"GatherNd":{const r=Object(d.d)("x",t,e,n),o=Object(d.d)("indices",t,e,n);return[c.gatherND(r,o)]}case"SparseToDense":{const r=Object(d.d)("sparseIndices",t,e,n),o=Object(d.d)("outputShape",t,e,n),l=Object(d.d)("sparseValues",t,e,n),h=Object(d.d)("defaultValue",t,e,n);return[c.sparseToDense(r,l,o,l.dtype===h.dtype?h:c.cast(h,l.dtype))]}case"TensorScatterUpdate":{const r=Object(d.d)("indices",t,e,n),o=Object(d.d)("values",t,e,n),l=Object(d.d)("tensor",t,e,n);return[c.tensorScatterUpdate(l,r,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"sparse":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:c,emptyRowIndicator:l,reverseIndexMap:h}=o.sparse.sparseFillEmptyRows(Object(d.d)("indices",t,e,n),Object(d.d)("values",t,e,n),Object(d.d)("denseShape",t,e,n),Object(d.d)("defaultValue",t,e,n));return[r,c,l,h]}case"SparseReshape":{const{outputIndices:r,outputShape:c}=o.sparse.sparseReshape(Object(d.d)("inputIndices",t,e,n),Object(d.d)("inputShape",t,e,n),Object(d.d)("newShape",t,e,n));return[r,c]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(Object(d.d)("data",t,e,n),Object(d.d)("indices",t,e,n),Object(d.d)("segmentIds",t,e,n))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(Object(d.d)("data",t,e,n),Object(d.d)("indices",t,e,n),Object(d.d)("segmentIds",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"spectral":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"FFT":return[o.fft(Object(d.d)("x",t,e,n))];case"IFFT":return[o.ifft(Object(d.d)("x",t,e,n))];case"RFFT":return[o.rfft(Object(d.d)("x",t,e,n))];case"IRFFT":return[o.irfft(Object(d.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"string":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"StaticRegexReplace":return[o.string.staticRegexReplace(Object(d.d)("input",t,e,n),Object(d.d)("pattern",t,e,n),Object(d.d)("rewrite",t,e,n),Object(d.d)("replaceGlobal",t,e,n))];case"StringNGrams":{const{nGrams:r,nGramsSplits:c}=o.string.stringNGrams(Object(d.d)("data",t,e,n),Object(d.d)("dataSplits",t,e,n),Object(d.d)("separator",t,e,n),Object(d.d)("nGramWidths",t,e,n),Object(d.d)("leftPad",t,e,n),Object(d.d)("rightPad",t,e,n),Object(d.d)("padWidth",t,e,n),Object(d.d)("preserveShortSequences",t,e,n));return[r,c]}case"StringSplit":{const{indices:r,values:c,shape:l}=o.string.stringSplit(Object(d.d)("input",t,e,n),Object(d.d)("delimiter",t,e,n),Object(d.d)("skipEmpty",t,e,n));return[r,c,l]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(Object(d.d)("input",t,e,n),Object(d.d)("numBuckets",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"transformation":return f((()=>((t,e,n,o=r)=>{switch(t.op){case"Cast":return[o.cast(Object(d.d)("x",t,e,n),Object(d.d)("dtype",t,e,n))];case"ExpandDims":{const r=Object(d.d)("axis",t,e,n);return[o.expandDims(Object(d.d)("x",t,e,n),r)]}case"Squeeze":{const r=Object(d.d)("axis",t,e,n);return[o.squeeze(Object(d.d)("x",t,e,n),r)]}case"Reshape":return[o.reshape(Object(d.d)("x",t,e,n),Object(d.d)("shape",t,e,n))];case"EnsureShape":return[o.ensureShape(Object(d.d)("x",t,e,n),Object(d.d)("shape",t,e,n))];case"MirrorPad":return[o.mirrorPad(Object(d.d)("x",t,e,n),Object(d.d)("padding",t,e,n),Object(d.d)("mode",t,e,n))];case"PadV2":case"Pad":return[o.pad(Object(d.d)("x",t,e,n),Object(d.d)("padding",t,e,n),Object(d.d)("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Object(d.d)("blockShape",t,e,n),c=Object(d.d)("paddings",t,e,n);return[o.spaceToBatchND(Object(d.d)("x",t,e,n),r,c)]}case"BatchToSpaceND":{const r=Object(d.d)("blockShape",t,e,n),c=Object(d.d)("crops",t,e,n);return[o.batchToSpaceND(Object(d.d)("x",t,e,n),r,c)]}case"DepthToSpace":{const r=Object(d.d)("blockSize",t,e,n),c=Object(d.d)("dataFormat",t,e,n).toUpperCase();return[o.depthToSpace(Object(d.d)("x",t,e,n),r,c)]}case"BroadcastTo":return[o.broadcastTo(Object(d.d)("x",t,e,n),Object(d.d)("shape",t,e,n))];case"BroadcastArgs":return[o.broadcastArgs(Object(d.d)("s0",t,e,n),Object(d.d)("s1",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const o=Object(d.d)("keyDType",t,e,n),c=Object(d.d)("valueDType",t,e,n),l=new k(o,c);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=Object(d.d)("tableHandle",t,e,n,r),c=Object(d.d)("keys",t,e,n),l=Object(d.d)("values",t,e,n),h=r.getHashTableById(o.id);return[await h.import(c,l)]}case"LookupTableFind":case"LookupTableFindV2":{const o=Object(d.d)("tableHandle",t,e,n,r),c=Object(d.d)("keys",t,e,n),l=Object(d.d)("defaultValue",t,e,n),h=r.getHashTableById(o.id);return[await h.find(c,l)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=Object(d.d)("tableHandle",t,e,n,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,c);case"custom":const m=Object(h.a)(t.op);if(m&&m.customExecutor)return m.customExecutor(new l(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return o.Ed.isPromise(m)?m.then((data=>[].concat(data))):[].concat(m)}class I{constructor(t={},e={},n={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let i=0;i<this.contexts.length-1;i++){const e=this.contexts.slice(0,this.contexts.length-i);t.push(this.contextIdforContexts(e))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function _(t,e,n,r){const o=new Set,c=[];let l=null,h=null;const f=new Set,m=new Set(Object.keys(t).map((t=>Object(d.g)(t)[0])));r=r||[];const y=new Set(r.map((t=>Object(d.g)(t.name)[0]))),O=[...e];for(;O.length>0;){const t=O.pop();(C(t)||F(t)||B(t))&&null==l&&(l=t,h=l.children.map((t=>t.name)).filter((t=>o.has(t)))),o.add(t.name),null==n[t.name]&&(m.has(t.name)||y.has(t.name)||(0!==t.inputs.length?t.inputs.forEach((input=>{f.has(input.name)||(f.add(input.name),O.push(input))})):c.push(t.name)))}return{inputs:t,outputs:e,usedNodes:o,missingInputs:c,dynamicNode:l,syncInputs:h}}function A(t,e){const{usedNodes:n,inputs:r}=e,o=Object.keys(r).map((t=>Object(d.g)(t)[0])).map((e=>t.nodes[e])),c=t.initNodes||[],l=t=>n.has("string"==typeof t?t:t.name);function h(t){return[...new Map(t.map((t=>[t.name,t]))).values()]}const f=h([...o,...t.weights,...c]).filter(l),m=h([...f,...Object.values(t.nodes)]).filter(l),y=new Map(m.map((t=>[t.name,t]))),O={};for(const t of m){O[t.name]=O[t.name]||0;for(const e of t.children)l(e)||(O[e.name]=Number.POSITIVE_INFINITY),O[e.name]=(O[e.name]||0)+1}const j=Object.entries(O).filter((([,t])=>0===t)).map((([t])=>t)),w=[...j];for(;j.length>0;){const t=j.pop(),e=y.get(t);for(const t of e.children.filter(l))0==--O[t.name]&&(w.push(t.name),j.push(t.name))}const x=function(t,e){const n=new Map(t.map((t=>[t.name,t]))),r=e.map((t=>t.name)),o=new Set(r);for(;r.length>0;){const t=r.pop(),e=n.get(t);for(const t of e.children)n.has(t.name)&&!o.has(t.name)&&(o.add(t.name),r.push(t.name))}return t.filter((t=>o.has(t.name)))}(w.map((t=>y.get(t))),f);return function(t,e){const n=new Map(t.map(((t,e)=>[t.name,e]))),r=new Set(e.map((t=>t.name))),o=t=>r.has("string"==typeof t?t:t.name),c=new Set(t.map((t=>t.name))),d=t=>c.has("string"==typeof t?t:t.name);for(const e of t){for(const t of e.children.filter(d)){if(!n.has(t.name))throw new $(`Child ${t.name} of node ${e.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new $(`Node ${e.name} is scheduled to run after its child ${t.name}.`)}if(!o(e))for(const input of e.inputs){if(!n.has(input.name))throw new $(`Input ${input.name} of node ${e.name} is unreachable.`);if(n.get(input.name)>n.get(e.name))throw new $(`Node ${e.name} is scheduled to run before its input ${input.name}.`)}}}(x,f),x}class $ extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const M=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),D=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),R=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function C(t){return M.has(t.op)}function F(t){return D.has(t.op)}function B(t){return R.has(t.op)}class L{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((map,t)=>(map[t]=this._functions[t].signature,map)),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new L(t.functions[e],this)}))}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const n=_(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:c}=n;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${c}]`);if(r.length>0){const n=e.map((t=>t.name)),o=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${o}]. Missing the following inputs: [${r}]`)}const d=A(this.graph,n),l=function(t){const e=new Map(t.map(((t,e)=>[t.name,e]))),n=Number.MAX_SAFE_INTEGER,r=t.map(((t,e)=>C(t)?n:e)),o=t=>{const n=r[e.get(t.name)];return null==n?-1:n},c=t.map(((t,e)=>t.children.map(o).reduce(((a,b)=>Math.max(a,b)),r[e]))),d=new Map;for(let e=0;e<t.length;++e){const r=c[e];if(r===n)continue;const o=t[e],l=t[r];d.has(l.name)||d.set(l.name,[]),d.get(l.name).push(o)}return d}(d);return{orderedNodes:d,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return Object(o.gd)(e),e}cloneTensorList(t){if(!t)return null;return t.map((t=>this.cloneAndKeepTensor(t)))}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map((([t,e])=>[t,this.cloneTensorList(e)])))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[Object(d.g)(t)[0]])),c=e.map((t=>Object(d.g)(t)[0])),l=new Set(c);let h=c.map((t=>this.graph.nodes[t]));0===h.length&&(h=this._outputs);const f=this.getCompilationKey(r,h);let m=this.compiledMap.get(f);null==m&&(m=this.compile(t,h),this.compiledMap.set(f,m));try{this.keepIntermediateTensors=Object(o.ad)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(t){this.keepIntermediateTensors=!1,console.warn(t.message)}const y={},O={};return Object(o.Bd)((()=>{const n=new I(this.weightMap,y,O,this.functionExecutorMap,this.parseNodeNameCache),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach((e=>{const[o,c]=Object(d.g)(e,n),l=[];l[c]=t[e],r[o]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[o]=this.cloneTensorList(l))}));const c=this.getFrozenTensorIds(r),{orderedNodes:h,nodeLiveUntilMap:f}=m;for(const t of h){if(r[t.name])continue;const e=E(t,r,n,this._resourceManager);if(o.Ed.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.keepIntermediateTensors&&(this.clonedTensorsMap[t.name]=this.cloneTensorList(e)),this.checkTensorForDisposalWithNodeLiveUntilInfo(t,r,n,c,l,f.get(t.name))}return null==this.parent&&n.dispose(c),e.map((t=>Object(d.e)(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,o,c,l){if(!C(e)&&!c.has(t)){for(const r of n[t])null!=r&&(l[r.id]=(l[r.id]||0)+e.children.length);for(const input of e.inputs){if(C(input))continue;const t=Object(d.f)(input.name,n,r);if(null!=t)for(const e of t){if(!e||e.kept||o.has(e.id))continue;const t=l[e.id];1===t?(e.dispose(),delete l[e.id]):null!=t&&l[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,n,r,o,c){function l(t){return C(t)||o.has(t.name)}if(!C(t)&&null!=c)for(const t of c){if(l(t))continue;const o=Object(d.f)(t.name,e,n);for(const t of o)!t||t.kept||r.has(t.id)||t.dispose()}}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(t,e,n=!1,r={},c={}){this.disposeIntermediateTensors(),n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepIntermediateTensors=Object(o.ad)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(t){this.keepIntermediateTensors=!1,console.warn(t.message)}const l=new I(this.weightMap,r,c,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const h=await this.executeWithControlFlow(t,l,e,n),f=e.map((t=>Object(d.e)(t,h,l))),m=f.map((t=>t.id)),y=Object.keys(t).map((e=>t[e].id)),O=new Set([...m,...y,...this.weightIds]);return Object.values(h).forEach((t=>{t.forEach((t=>{!t||t.isDisposed||O.has(t.id)||t.dispose()}))})),null==this.parent&&l.dispose(O),f}async executeFunctionAsync(t,e,n){const r=t.reduce(((map,t,e)=>(map[this.inputs[e].name]=t,map)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const o=Object.keys(t),c=o.map((t=>this.graph.nodes[Object(d.g)(t)[0]])),l=n.map((t=>Object(d.g)(t)[0])),h=new Set(l);let f=l.map((t=>this.graph.nodes[t]));0===f.length&&(f=this._outputs);const{usedNodes:m,missingInputs:y,dynamicNode:O,syncInputs:j}=_(t,f,this.weightMap,this._initNodes),w=[...c,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),x=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=Object(d.g)(e),o=[];o[r]=t[e],x[n]=o}));const N={},v=this.getFrozenTensorIds(x),S={};for(;w.length>0;){const t=this.processStack(c,w,e,x,S,v,h,N,m);await Promise.all(t)}null!=O||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const T=f.filter((t=>!C(t)&&!Object(d.e)(t.name,x,e))).map((t=>t.name));if(T.length>0){let t="";throw null!=O&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${j}]`),new Error(`Cannot compute the outputs [${T}] from the provided inputs [${o}]. Consider providing the following inputs: [${y}]. ${t}`)}return x}processStack(t,e,n,r,c,l,h,f,m){const y=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let O="";if("Enter"===t.node.op&&Object(d.d)("isConstant",t.node,r,n)&&([O]=Object(d.b)(t.node.name,n)),null==r[t.node.name]){const j=E(t.node,r,n,this._resourceManager);O||([O]=Object(d.b)(t.node.name,n));const w=n.currentContext;o.Ed.isPromise(j)?y.push(j.then((o=>(r[O]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[O]=this.cloneTensorList(o)),n.currentContext=w,this.checkTensorForDisposal(O,t.node,r,n,l,h,f),this.processChildNodes(t.node,e,n,r,c,m),o)))):(r[O]=j,this.keepIntermediateTensors&&(this.clonedTensorsMap[O]=this.cloneTensorList(j)),this.checkTensorForDisposal(O,t.node,r,n,l,h,f),this.processChildNodes(t.node,e,n,r,c,m))}else this.processChildNodes(t.node,e,n,r,c,m)}return y}processChildNodes(t,e,n,r,o,c){t.children.forEach((t=>{const[l]=Object(d.b)(t.name,n);!o[l]&&c.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!Object(d.e)(t,r,n)))&&(o[l]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!Object(d.e)(t,r,n)))&&(o[l]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const input=t[e],[n]=Object(d.g)(e),r=this.graph.nodes[n];if(r.attrParams.shape&&r.attrParams.shape.value){const t=r.attrParams.shape.value,e=t.length===input.shape.length&&input.shape.every(((e,n)=>-1===t[n]||t[n]===e));o.Ed.assert(e,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${t}], but was [${input.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&o.Ed.assert(input.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${input.dtype}`))}))}mapInputs(t){var e,n;const r={};for(const o in t){const c=null===(n=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===n?void 0:n[o];null!=c?r[c.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=Object(d.g)(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{var e,n;const r=null===(n=null===(e=this._signature)||void 0===e?void 0:e.outputs)||void 0===n?void 0:n[t];return null!=r?r.name:t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=Object(d.g)(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class z{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class P{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},n=o.fd){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=n,null==e&&(this.loadOptions={}),this.resourceManager=new z}findIOHandler(){const path=this.modelUrl;if(null!=path.load)this.handler=path;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(path,this.loadOptions);else{const t=this.io.getLoadHandlers(path,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(path,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[path]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return o.Ed.isPromise(t)?t.then((t=>this.loadSync(t))):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const t=this.artifacts.userDefinedMetadata;null!=t.signature&&(n=t.signature),null!=t.structuredOutputKeys&&(this.structuredOutputKeys=t.structuredOutputKeys)}this.signature=n,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new L(c.a.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=c.a.Instance.transformGraph(t.modelInitializer);this.initializer=new L(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}async save(t,e){if("string"==typeof t){const e=this.io.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}addStructuredOutputNames(t){if(this.structuredOutputKeys){const e=t instanceof o.Cc?[t]:t,n={};return e.forEach(((t,i)=>n[this.structuredOutputKeys[i]]=t)),n}return t}predict(t,e){const n=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(t,e){const n=await this.executeAsync(t,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(t){var e;if(!(t instanceof o.Cc||Array.isArray(t))){const n=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=n)for(const input in n){const e=n[input];null!=e.resourceId&&(t[input]=this.resourceIdToCapturedInput[e.resourceId])}return t}t=Array.isArray(t)?t:[t];const n=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce(((map,e)=>{var n,o,c;const d=null===(c=null===(o=null===(n=this.signature)||void 0===n?void 0:n.inputs)||void 0===o?void 0:o[e])||void 0===c?void 0:c.resourceId;return map[e]=null!=d?this.resourceIdToCapturedInput[d]:t[r++],map}),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,n=Object.keys(e);for(let i=0;i<n.length;i++){const r=e[n[i]];this.resourceIdToCapturedInput[r.resourceId]=t[i]}}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(map){return Object.keys(map).reduce(((t,e)=>(t[e]=[map[e]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Object(o.Xc)(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function V(t,e={},n=o.fd){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&"string"==typeof t&&(t=function(t){t.endsWith("/")||(t+="/");return`${t}model.json?tfjs-format=file`}(t));const r=new P(t,e,n);return await r.load(),r}},975:function(t,e,n){"use strict";(function(t,r){let o;function c(){if(null==o){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}o=e}return o}function d(t,e){const n=function(){const t=c();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return d}))}).call(this,n(56),n(98))},976:function(t,e,n){"use strict";function r(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.d(e,"a",(function(){return r}))},979:function(t,e,n){"use strict";function r(t,e=!1){console.log(t.toString(e))}n.d(e,"a",(function(){return r}))},980:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(888);const h=Object(l.b)({floorDiv_:function(a,b){let t=Object(d.a)(a,"a","floorDiv"),e=Object(d.a)(b,"b","floorDiv");[t,e]=Object(c.c)(t,e);const n={a:t,b:e};return r.a.runKernel(o.fb,n)}})},981:function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(890),o=n(891),c=n(894),d=n(889),l=n(898),h=n(905),f=n(888);const m=Object(f.b)({maximum_:function(a,b){let t=Object(d.a)(a,"a","maximum"),e=Object(d.a)(b,"b","maximum");[t,e]=Object(c.c)(t,e),"bool"===t.dtype&&(t=Object(h.a)(t,"int32"),e=Object(h.a)(e,"int32")),Object(l.assertAndGetBroadcastShape)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernel(o.Ib,n)}})},982:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({elu_:function(t){const e={x:Object(c.a)(t,"x","elu","float32")};return r.a.runKernel(o.V,e)}})},983:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({leakyRelu_:function(t,e=.2){const n={x:Object(c.a)(t,"x","leakyRelu")},d={alpha:e};return r.a.runKernel(o.vb,n,d)}})},984:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({prelu_:function(t,e){const n={x:Object(c.a)(t,"x","prelu"),alpha:Object(c.a)(e,"alpha","prelu")};return r.a.runKernel(o.ac,n)}})},986:function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return c}));var r=n(890);n(889),n(892),n(899);function o(){return 32===r.a.backend.floatPrecision()?.001:.1}function c(a,t,e){if(null==e&&(e=o()),!d(a,t,e))throw new Error(`Numbers differ: actual === ${a}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function d(a,t,e){return!isFinite(a)&&!isFinite(t)||!(isNaN(a)||isNaN(t)||Math.abs(a-t)>e)}},987:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({relu6_:function(t){const e={x:Object(c.a)(t,"x","relu6")};return r.a.runKernel(o.kc,e)}})},988:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(890),o=n(891),c=n(889),d=n(888);const l=Object(d.b)({step_:function(t,e=0){const n={x:Object(c.a)(t,"x","step")},d={alpha:e};return r.a.runKernel(o.Oc,n,d)}})},989:function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(889),o=n(899),c=n(932);function d(t,e,n){if(Object(o.e)(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const d=Object(r.c)(t,n);if(3!==d.length&&1!==d.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===d.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(c.a)(t,e,d,n)}},990:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(928);function o(t,e){const n=[];for(let i=0;i<e.length;i++)e[i]&&n.push(i);const o=Object(r.a)(t,"int32"),c=Object(r.a)([n.length,t.length],"int32");for(let i=0;i<n.length;i++){const e=o.indexToLoc(n[i]),r=i*t.length;c.values.set(e,r)}return c.toTensor()}},995:function(t,e,n){"use strict";function r(a){return a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array||a instanceof Uint8ClampedArray}n.d(e,"a",(function(){return r}))},996:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},997:function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return M})),n.d(e,"i",(function(){return R})),n.d(e,"c",(function(){return C})),n.d(e,"f",(function(){return F})),n.d(e,"e",(function(){return z})),n.d(e,"d",(function(){return P})),n.d(e,"k",(function(){return U})),n.d(e,"g",(function(){return W})),n.d(e,"h",(function(){return G})),n.d(e,"j",(function(){return K})),n.d(e,"b",(function(){return H}));var r=n(906),o=n(1037),c=n(967),d=n(896),l=n(1038),h=n(1039),f=n(1040),m=n(1041),y=n(1042),O=n(1043),j=n(1044),w=n(1045),x=n(1046),N=n(1047),v=n(1048),S=n(1049),T=n(1050),k=n(1051),E=n(1052),I=n(1053),_=n(1054),A=n(1055),$=n(1056);class M{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[l,h,f,m,y,O,j,w,x,N,v,S,T,k,E,I,_,A,$].map((t=>t.json)));this.opMappers=t.reduce(((map,t)=>(map[t.tfOpName]=t,map)),{})}transformGraph(t,e={}){const n=t.node,r=[],o=[],c=[],l=n.reduce(((map,t)=>(map[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(map[t.name]):"Const"===t.op?o.push(map[t.name]):null!=t.input&&0!==t.input.length||c.push(map[t.name]),map)),{});let h=[];const f=[];let m={},y={};null!=e&&(m=this.mapSignatureEntries(e.inputs),y=this.mapSignatureEntries(e.outputs));const O=Object.keys(l);O.forEach((t=>{const e=l[t];e.inputNames.forEach(((t,n)=>{const[r,,o]=Object(d.b)(t),c=l[r];if(null!=c.outputs){const t=c.outputs.indexOf(o);if(-1!==t){const o=`${r}:${t}`;e.inputNames[n]=o}}e.inputs.push(c),c.children.push(e)}))})),0===Object.keys(y).length?O.forEach((t=>{const e=l[t];0===e.children.length&&f.push(e)})):Object.keys(y).forEach((t=>{const[e]=Object(d.b)(t),n=l[e];null!=n&&(n.signatureKey=y[t],f.push(n))})),Object.keys(m).length>0?Object.keys(m).forEach((t=>{const[e]=Object(d.b)(t),n=l[e];n&&(n.signatureKey=m[t],h.push(n))})):h=r;let j={};null!=t.library&&null!=t.library.function&&(j=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const w={nodes:l,inputs:h,outputs:f,weights:o,placeholders:r,signature:e,functions:j};return c.length>0&&(w.initNodes=c),w}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=Object(c.a)(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((input=>input.startsWith("^")?input.slice(1):input)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((map,param)=>(map[param.name]={type:param.type,inputIndexStart:param.start,inputIndexEnd:param.end},map)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((map,param)=>{const e=param.type;let n;switch(param.type){case"string":n=R(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=R(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"string[]":n=G(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=G(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"number":n=F(t.attr,param.tfName,param.defaultValue||0),void 0===n&&param.tfDeprecatedName&&(n=F(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"number[]":n=W(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=W(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool":n=C(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=C(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool[]":n=H(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=H(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape":n=U(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=U(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape[]":n=K(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=K(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype":n=z(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=z(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype[]":n=P(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=P(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"func":n=L(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=L(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${param.type} for op: ${t.op}`)}return map[param.name]={value:n,type:e},map}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((map,t)=>(map[t.name]=this.mapNode(t),"Const"===t.op&&n.push(map[t.name]),map)),{}));const o=[],c=[];t.signature.inputArg.forEach((t=>{const[e]=Object(d.b)(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:B(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,o.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach(((t,n)=>{const[o,,c]=Object(d.b)(t),l=r[o];if(null!=l.outputs){const t=l.outputs.indexOf(c);if(-1!==t){const r=`${o}:${t}`;e.inputNames[n]=r}}e.inputs.push(l),l.children.push(e)}))}));const l=t.ret;t.signature.outputArg.forEach((output=>{const[t,e]=Object(d.b)(l[output.name]),n=r[t];null!=n&&(n.defaultOutput=e,c.push(n))}));const h=this.mapArgsToSignature(t);return{nodes:r,inputs:o,outputs:c,weights:n,placeholders:[],signature:h}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((map,t)=>(map[t.name]=this.mapArgToTensorInfo(t),map)),{}),outputs:t.signature.outputArg.reduce(((map,e)=>(map[e.name]=this.mapArgToTensorInfo(e,t.ret),map)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function D(s,e){const n=Array.isArray(s)?String.fromCharCode.apply(null,s):function(text){const e=Object(r.ad)().global;if(void 0!==e.atob)return e.atob(text);if(void 0!==t)return new t(text,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(s);return e?n:n.toLowerCase()}function R(t,e,n,r=!1){const param=t[e];return null!=param?D(param.s,r):n}function C(t,e,n){const param=t[e];return param?param.b:n}function F(t,e,n){const param=t[e]||{},r=null!=param.i?param.i:null!=param.f?param.f:n;return"number"==typeof r?r:parseInt(r,10)}function B(t){switch("string"==typeof t&&(t=o.a[t]),t){case o.a.DT_FLOAT:case o.a.DT_HALF:return"float32";case o.a.DT_INT32:case o.a.DT_INT64:case o.a.DT_INT8:case o.a.DT_UINT8:return"int32";case o.a.DT_BOOL:return"bool";case o.a.DT_DOUBLE:return"float32";case o.a.DT_STRING:return"string";default:return null}}function L(t,e,n){const param=t[e];return param&&param.func?param.func.name:n}function z(t,e,n){const param=t[e];return param&&param.type?B(param.type):n}function P(t,e,n){const param=t[e];return param&&param.list&&param.list.type?param.list.type.map((t=>B(t))):n}function V(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function U(t,e,n){const param=t[e];return param&&param.shape?V(param.shape):n}function W(t,e,n){const param=t[e];return param?((param.list.f&&param.list.f.length?param.list.f:param.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function G(t,e,n,r=!1){const param=t[e];return param&&param.list&&param.list.s?param.list.s.map((t=>D(t,r))):n}function K(t,e,n){const param=t[e];return param&&param.list&&param.list.shape?param.list.shape.map((t=>V(t))):n}function H(t,e,n){const param=t[e];return param&&param.list&&param.list.b?param.list.b:n}}).call(this,n(166).Buffer)}}]);